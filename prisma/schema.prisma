// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
  binaryTargets = ["native", "debian-openssl-3.0.x"]
}

datasource db {
  provider = "sqlite"
  url      = "file:./dev.db"
}

model User {
  id          String   @id @default(cuid())
  email       String   @unique
  username    String   @unique
  password    String
  role        String   @default("seller") // seller, staff, admin
  
  // Profile information
  fullName    String?
  phoneNumber String?
  address     String?
  
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  // Relations
  products    Product[]
  orders      Order[]
  activities  Activity[]
  sessions    Session[]
  videoRecords VideoRecord[] @relation("VideoStaff")
  twoFactorAuth TwoFactorAuth[]
  externalServices ExternalService[]
  deliveryPlans DeliveryPlan[]

  @@map("users")
}

model Session {
  id        String   @id @default(cuid())
  userId    String
  token     String   @unique
  expiresAt DateTime
  createdAt DateTime @default(now())

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("sessions")
}

model Product {
  id           String           @id @default(cuid())
  name         String
  sku          String           @unique
  category     String           // camera_body, lens, watch, accessory
  status       String           @default("inbound") // inbound, inspection, storage, listing, ordered, shipping, delivery, sold, returned
  price        Int
  condition    String           // new, like_new, excellent, very_good, good, fair, poor
  description  String?
  imageUrl     String?
  entryDate    DateTime         @default(now())
  sellerId     String
  
  // Inspection data
  inspectedAt  DateTime?
  inspectedBy  String?
  inspectionNotes String?
  
  // Location tracking
  currentLocationId String?
  
  // Timestamps
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt

  // Relations
  seller       User @relation(fields: [sellerId], references: [id])
  currentLocation Location? @relation(fields: [currentLocationId], references: [id])
  movements    InventoryMovement[]
  orderItems   OrderItem[]
  activities   Activity[]
  videoRecords VideoRecord[]

  @@map("products")
}

model Location {
  id          String @id @default(cuid())
  code        String @unique // A区画-01, V区画-12, etc.
  name        String
  zone        String // A区画, V区画, H区画, D区画(配送先), etc.
  capacity    Int?
  isActive    Boolean @default(true)
  
  // 配送先倉庫用フィールド
  address     String? // 配送先住所（zone='D'の場合のみ使用）
  phone       String? // 配送先電話番号
  email       String? // 配送先メールアドレス
  notes       String? // 配送先備考
  
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  // Relations
  products    Product[]
  movementsFrom InventoryMovement[] @relation("MovementFrom")
  movementsTo   InventoryMovement[] @relation("MovementTo")
  barcodeScanners BarcodeScanner[]

  @@map("locations")
}



model InventoryMovement {
  id          String   @id @default(cuid())
  productId   String
  fromLocationId String?
  toLocationId   String?
  movedBy     String
  notes       String?
  createdAt   DateTime @default(now())

  // Relations
  product     Product @relation(fields: [productId], references: [id])
  fromLocation Location? @relation("MovementFrom", fields: [fromLocationId], references: [id])
  toLocation   Location? @relation("MovementTo", fields: [toLocationId], references: [id])

  @@map("inventory_movements")
}

model Order {
  id            String      @id @default(cuid())
  orderNumber   String      @unique
  customerId    String
  status        String      @default("pending") // pending, confirmed, processing, shipped, delivered, cancelled, returned
  totalAmount   Int
  shippingAddress String?
  paymentMethod String?
  notes         String?
  
  // Timestamps
  orderDate     DateTime @default(now())
  shippedAt     DateTime?
  deliveredAt   DateTime?
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt

  // Relations
  customer      User @relation(fields: [customerId], references: [id])
  items         OrderItem[]
  activities    Activity[]
  videoRecords  VideoRecord[]

  @@map("orders")
}

model OrderItem {
  id        String @id @default(cuid())
  orderId   String
  productId String
  quantity  Int    @default(1)
  price     Int
  
  // Relations
  order     Order @relation(fields: [orderId], references: [id], onDelete: Cascade)
  product   Product @relation(fields: [productId], references: [id])

  @@map("order_items")
}

model Activity {
  id          String   @id @default(cuid())
  type        String   // inbound, inspection, listing, sold, etc.
  description String
  userId      String?
  productId   String?
  orderId     String?
  metadata    String?  // JSON data stored as string
  createdAt   DateTime @default(now())

  // Relations
  user        User? @relation(fields: [userId], references: [id])
  product     Product? @relation(fields: [productId], references: [id])
  order       Order? @relation(fields: [orderId], references: [id])

  @@map("activities")
}

model VideoRecord {
  id          String   @id @default(cuid())
  productId   String?
  orderId     String?
  type        String   // inspection, packing, shipping, etc.
  sessionId   String?  // 記録セッションID
  timestamps  String?  // タイムスタンプのJSON配列
  s3VideoPath String?  // S3での動画パス
  staffId     String
  notes       String?
  createdAt   DateTime @default(now())
  
  // Relations
  product     Product? @relation(fields: [productId], references: [id])
  order       Order?   @relation(fields: [orderId], references: [id])
  staff       User     @relation("VideoStaff", fields: [staffId], references: [id])

  @@map("video_records")
}

model TwoFactorAuth {
  id          String   @id @default(cuid())
  userId      String
  code        String
  expiresAt   DateTime
  verified    Boolean  @default(false)
  createdAt   DateTime @default(now())
  
  // Relations
  user        User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("two_factor_auth")
}

model ExternalService {
  id          String   @id @default(cuid())
  service     String   // ebay, yamato, sagawa, stripe, etc.
  type        String   // api_call, webhook, etc.
  endpoint    String
  method      String
  requestBody String?  // JSON string
  response    String?  // JSON string
  status      String   // success, error, pending
  errorMessage String?
  userId      String?
  createdAt   DateTime @default(now())
  
  // Relations
  user        User? @relation(fields: [userId], references: [id])

  @@map("external_services")
}

model BarcodeScanner {
  id          String   @id @default(cuid())
  locationId  String
  deviceName  String
  ipAddress   String?
  isActive    Boolean  @default(true)
  lastUsedAt  DateTime?
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  
  // Relations
  location    Location @relation(fields: [locationId], references: [id])

  @@map("barcode_scanners")
}

model PickingTask {
  id            String           @id @default(cuid())
  orderId       String           @unique
  customerName  String
  priority      String           // 'urgent', 'high', 'normal', 'low'
  status        String           // 'pending', 'in_progress', 'completed', 'on_hold'
  assignee      String?
  shippingMethod String
  totalItems    Int
  pickedItems   Int              @default(0)
  createdAt     DateTime         @default(now())
  updatedAt     DateTime         @updatedAt
  dueDate       DateTime
  
  // Relations
  items         PickingItem[]

  @@map("picking_tasks")
}

model PickingItem {
  id             String      @id @default(cuid())
  pickingTaskId  String
  productId      String
  productName    String
  sku            String
  location       String
  quantity       Int
  pickedQuantity Int         @default(0)
  status         String      // 'pending', 'picked', 'verified'
  imageUrl       String?
  createdAt      DateTime    @default(now())
  updatedAt      DateTime    @updatedAt

  // Relations
  pickingTask    PickingTask @relation(fields: [pickingTaskId], references: [id], onDelete: Cascade)

  @@map("picking_items")
}

model DeliveryPlan {
  id              String   @id @default(cuid())
  planNumber      String   @unique
  sellerId        String
  sellerName      String
  status          String   // '下書き', '作成中', '作成完了', '準備中', '発送済', '到着済', 'キャンセル'
  deliveryAddress String
  contactEmail    String
  phoneNumber     String?
  notes           String?
  totalItems      Int      @default(0)
  totalValue      Int      @default(0)
  createdAt       DateTime @default(now())
  updatedAt       DateTime @updatedAt

  // Relations
  seller          User @relation(fields: [sellerId], references: [id])
  products        DeliveryPlanProduct[]

  @@map("delivery_plans")
}

model DeliveryPlanProduct {
  id               String   @id @default(cuid())
  deliveryPlanId   String
  name             String
  category         String   // 'カメラ本体', 'レンズ', '腕時計', 'アクセサリー'
  brand            String
  model            String
  serialNumber     String?
  estimatedValue   Int
  description      String?
  createdAt        DateTime @default(now())
  updatedAt        DateTime @updatedAt

  // Relations
  deliveryPlan     DeliveryPlan @relation(fields: [deliveryPlanId], references: [id], onDelete: Cascade)

  @@map("delivery_plan_products")
}