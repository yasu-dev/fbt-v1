import { test, expect } from '@playwright/test';

test.describe('繝ｭ繧ｰ繧､繝ｳ逕ｻ髱｢繝・せ繝・, () => {
  test('繝ｭ繧ｰ繧､繝ｳ逕ｻ髱｢縺梧ｭ｣縺励￥陦ｨ遉ｺ縺輔ｌ繧・, async ({ page }) => {
    // 繝ｭ繧ｰ繧､繝ｳ繝壹・繧ｸ縺ｫ繧｢繧ｯ繧ｻ繧ｹ
    await page.goto('/login');
    
    // 繝壹・繧ｸ繧ｿ繧､繝医Ν縺ｮ遒ｺ隱・
    await expect(page).toHaveTitle(/THE WORLD DOOR/);
    
    // 繝｡繧､繝ｳ繧ｿ繧､繝医Ν縺ｮ遒ｺ隱搾ｼ・2隕∫ｴ繧呈欠螳夲ｼ・
    await expect(page.getByRole('heading', { name: 'THE WORLD DOOR' })).toBeVisible();
    await expect(page.getByText('繝輔Ν繝輔ぅ繝ｫ繝｡繝ｳ繝医し繝ｼ繝薙せ')).toBeVisible();
    
    // 繝輔か繝ｼ繝隕∫ｴ縺ｮ遒ｺ隱・
    await expect(page.getByLabel('繝｡繝ｼ繝ｫ繧｢繝峨Ξ繧ｹ')).toBeVisible();
    await expect(page.getByLabel('繝代せ繝ｯ繝ｼ繝・)).toBeVisible();
    await expect(page.getByRole('button', { name: '繝ｭ繧ｰ繧､繝ｳ' })).toBeVisible();
    
    // 繝・せ繝育畑繝ｭ繧ｰ繧､繝ｳ諠・ｱ縺ｮ陦ｨ遉ｺ遒ｺ隱・
    await expect(page.getByText('繝・せ繝育畑繝ｭ繧ｰ繧､繝ｳ諠・ｱ')).toBeVisible();
    await expect(page.getByText('seller@example.com / password123')).toBeVisible();
    await expect(page.getByText('staff@example.com / password123')).toBeVisible();
  });

  test('繝ｫ繝ｼ繝医・繝ｼ繧ｸ縺九ｉ繝ｭ繧ｰ繧､繝ｳ繝壹・繧ｸ縺ｫ繝ｪ繝繧､繝ｬ繧ｯ繝医＆繧後ｋ', async ({ page }) => {
    // 繝ｫ繝ｼ繝医・繝ｼ繧ｸ縺ｫ繧｢繧ｯ繧ｻ繧ｹ
    await page.goto('/');
    
    // 繝ｭ繧ｰ繧､繝ｳ繝壹・繧ｸ縺ｫ繝ｪ繝繧､繝ｬ繧ｯ繝医＆繧後ｋ縺薙→繧堤｢ｺ隱・
    await expect(page).toHaveURL(/\/login$/);
    
    // 繝ｭ繧ｰ繧､繝ｳ逕ｻ髱｢縺ｮ隕∫ｴ縺瑚｡ｨ遉ｺ縺輔ｌ繧九％縺ｨ繧堤｢ｺ隱搾ｼ・2隕∫ｴ繧呈欠螳夲ｼ・
    await expect(page.getByRole('heading', { name: 'THE WORLD DOOR' })).toBeVisible();
  });
}); 
import { test, expect } from '@playwright/test';

test.describe('繝ｭ繧ｰ繧､繝ｳ讖溯・繝・せ繝・, () => {
  test('繧ｻ繝ｩ繝ｼ縺ｨ縺励※繝ｭ繧ｰ繧､繝ｳ縺ｧ縺阪ｋ', async ({ page }) => {
    // 繝ｭ繧ｰ繧､繝ｳ繝壹・繧ｸ縺ｫ繧｢繧ｯ繧ｻ繧ｹ
    await page.goto('/login');
    
    // 繧ｻ繝ｩ繝ｼ縺ｮ隱崎ｨｼ諠・ｱ繧貞・蜉・
    await page.fill('input[name="email"]', 'seller@example.com');
    await page.fill('input[name="password"]', 'password123');
    
    // 繝ｭ繧ｰ繧､繝ｳ繝懊ち繝ｳ繧偵け繝ｪ繝・け
    await page.click('button[type="submit"]');
    
    // 繝繝・す繝･繝懊・繝峨↓繝ｪ繝繧､繝ｬ繧ｯ繝医＆繧後ｋ縺薙→繧堤｢ｺ隱・
    await expect(page).toHaveURL(/\/dashboard$/);
    
    // 繝繝・す繝･繝懊・繝峨・隕∫ｴ縺瑚｡ｨ遉ｺ縺輔ｌ繧九％縺ｨ繧堤｢ｺ隱・
    await expect(page.locator('body')).toBeVisible();
  });

  test('繧ｹ繧ｿ繝・ヵ縺ｨ縺励※繝ｭ繧ｰ繧､繝ｳ縺ｧ縺阪ｋ', async ({ page }) => {
    // 繝ｭ繧ｰ繧､繝ｳ繝壹・繧ｸ縺ｫ繧｢繧ｯ繧ｻ繧ｹ
    await page.goto('/login');
    
    // 繧ｹ繧ｿ繝・ヵ縺ｮ隱崎ｨｼ諠・ｱ繧貞・蜉・
    await page.fill('input[name="email"]', 'staff@example.com');
    await page.fill('input[name="password"]', 'password123');
    
    // 繝ｭ繧ｰ繧､繝ｳ繝懊ち繝ｳ繧偵け繝ｪ繝・け
    await page.click('button[type="submit"]');
    
    // 繧ｹ繧ｿ繝・ヵ繝繝・す繝･繝懊・繝峨↓繝ｪ繝繧､繝ｬ繧ｯ繝医＆繧後ｋ縺薙→繧堤｢ｺ隱・
    await expect(page).toHaveURL(/\/staff\/dashboard$/);
    
    // 繝繝・す繝･繝懊・繝峨・隕∫ｴ縺瑚｡ｨ遉ｺ縺輔ｌ繧九％縺ｨ繧堤｢ｺ隱・
    await expect(page.locator('body')).toBeVisible();
  });

  test('辟｡蜉ｹ縺ｪ隱崎ｨｼ諠・ｱ縺ｧ繧ｨ繝ｩ繝ｼ繝｡繝・そ繝ｼ繧ｸ縺瑚｡ｨ遉ｺ縺輔ｌ繧・, async ({ page }) => {
    // 繝ｭ繧ｰ繧､繝ｳ繝壹・繧ｸ縺ｫ繧｢繧ｯ繧ｻ繧ｹ
    await page.goto('/login');
    
    // 辟｡蜉ｹ縺ｪ隱崎ｨｼ諠・ｱ繧貞・蜉・
    await page.fill('input[name="email"]', 'invalid@example.com');
    await page.fill('input[name="password"]', 'wrongpassword');
    
    // 繝ｭ繧ｰ繧､繝ｳ繝懊ち繝ｳ繧偵け繝ｪ繝・け
    await page.click('button[type="submit"]');
    
    // 繧ｨ繝ｩ繝ｼ繝｡繝・そ繝ｼ繧ｸ縺瑚｡ｨ遉ｺ縺輔ｌ繧九％縺ｨ繧堤｢ｺ隱・
    await expect(page.getByText('繝ｭ繧ｰ繧､繝ｳ縺ｫ螟ｱ謨励＠縺ｾ縺励◆')).toBeVisible({ timeout: 10000 });
    
    // 繝ｭ繧ｰ繧､繝ｳ繝壹・繧ｸ縺ｫ逡吶∪繧九％縺ｨ繧堤｢ｺ隱・
    await expect(page).toHaveURL(/\/login$/);
  });
}); 
import { test, expect } from '@playwright/test';

async function loginAsSeller(page: any) {
  await page.goto('/login');
  await page.fill('input[name="email"]', 'seller@example.com');
  await page.fill('input[name="password"]', 'password123');
  await page.click('button[type="submit"]');
  await expect(page).toHaveURL(/\/dashboard$/, { timeout: 15000 });
}

test.describe('繧ｻ繝ｩ繝ｼ繝壹・繧ｸ繝・せ繝・, () => {
  test('繝繝・す繝･繝懊・繝峨・繝ｼ繧ｸ縺梧ｭ｣縺励￥陦ｨ遉ｺ縺輔ｌ繧・, async ({ page }) => {
    await loginAsSeller(page);
    
    // 繝繝・す繝･繝懊・繝峨・蝓ｺ譛ｬ隕∫ｴ縺瑚｡ｨ遉ｺ縺輔ｌ繧九％縺ｨ繧堤｢ｺ隱・
    await expect(page.locator('body')).toBeVisible();
    await expect(page).toHaveURL(/\/dashboard$/);
  });

  test('邏榊刀繝励Λ繝ｳ繝壹・繧ｸ縺梧ｭ｣縺励￥陦ｨ遉ｺ縺輔ｌ繧・, async ({ page }) => {
    await loginAsSeller(page);
    
    // 邏榊刀繝励Λ繝ｳ繝壹・繧ｸ縺ｫ遘ｻ蜍・
    await page.goto('/delivery-plan');
    await expect(page).toHaveURL(/\/delivery-plan$/);
    
    // 繝壹・繧ｸ縺梧ｭ｣縺励￥陦ｨ遉ｺ縺輔ｌ繧九％縺ｨ繧堤｢ｺ隱・
    await expect(page.locator('body')).toBeVisible();
  });

  test('蝨ｨ蠎ｫ繝壹・繧ｸ縺梧ｭ｣縺励￥陦ｨ遉ｺ縺輔ｌ繧・, async ({ page }) => {
    await loginAsSeller(page);
    
    // 蝨ｨ蠎ｫ繝壹・繧ｸ縺ｫ遘ｻ蜍・
    await page.goto('/inventory');
    await expect(page).toHaveURL(/\/inventory$/);
    
    // 繝壹・繧ｸ縺梧ｭ｣縺励￥陦ｨ遉ｺ縺輔ｌ繧九％縺ｨ繧堤｢ｺ隱・
    await expect(page.locator('body')).toBeVisible();
  });

  test('螢ｲ荳翫・繝ｼ繧ｸ縺梧ｭ｣縺励￥陦ｨ遉ｺ縺輔ｌ繧・, async ({ page }) => {
    await loginAsSeller(page);
    
    // 螢ｲ荳翫・繝ｼ繧ｸ縺ｫ遘ｻ蜍・
    await page.goto('/sales');
    await expect(page).toHaveURL(/\/sales$/);
    
    // 繝壹・繧ｸ縺梧ｭ｣縺励￥陦ｨ遉ｺ縺輔ｌ繧九％縺ｨ繧堤｢ｺ隱・
    await expect(page.locator('body')).toBeVisible();
  });

  test('繝ｬ繝昴・繝医・繝ｼ繧ｸ縺梧ｭ｣縺励￥陦ｨ遉ｺ縺輔ｌ繧・, async ({ page }) => {
    await loginAsSeller(page);
    
    // 繝ｬ繝昴・繝医・繝ｼ繧ｸ縺ｫ遘ｻ蜍・
    await page.goto('/reports');
    await expect(page).toHaveURL(/\/reports$/);
    
    // 繝壹・繧ｸ縺梧ｭ｣縺励￥陦ｨ遉ｺ縺輔ｌ繧九％縺ｨ繧堤｢ｺ隱・
    await expect(page.locator('body')).toBeVisible();
  });

  test('險ｭ螳壹・繝ｼ繧ｸ縺梧ｭ｣縺励￥陦ｨ遉ｺ縺輔ｌ繧・, async ({ page }) => {
    await loginAsSeller(page);
    
    // 險ｭ螳壹・繝ｼ繧ｸ縺ｫ遘ｻ蜍・
    await page.goto('/settings');
    await expect(page).toHaveURL(/\/settings$/);
    
    // 繝壹・繧ｸ縺梧ｭ｣縺励￥陦ｨ遉ｺ縺輔ｌ繧九％縺ｨ繧堤｢ｺ隱・
    await expect(page.locator('body')).toBeVisible();
  });
}); 
import { test, expect } from '@playwright/test';

async function loginAsStaff(page: any) {
  await page.goto('/login');
  await page.fill('input[name="email"]', 'staff@example.com');
  await page.fill('input[name="password"]', 'password123');
  await page.click('button[type="submit"]');
  await expect(page).toHaveURL(/\/staff\/dashboard$/, { timeout: 15000 });
}

test.describe('繧ｹ繧ｿ繝・ヵ繝壹・繧ｸ繝・せ繝・, () => {
  test('繧ｹ繧ｿ繝・ヵ繝繝・す繝･繝懊・繝峨・繝ｼ繧ｸ縺梧ｭ｣縺励￥陦ｨ遉ｺ縺輔ｌ繧・, async ({ page }) => {
    await loginAsStaff(page);
    
    // 繝繝・す繝･繝懊・繝峨・蝓ｺ譛ｬ隕∫ｴ縺瑚｡ｨ遉ｺ縺輔ｌ繧九％縺ｨ繧堤｢ｺ隱・
    await expect(page.locator('body')).toBeVisible();
    await expect(page).toHaveURL(/\/staff\/dashboard$/);
  });

  test('蝨ｨ蠎ｫ邂｡逅・・繝ｼ繧ｸ縺梧ｭ｣縺励￥陦ｨ遉ｺ縺輔ｌ繧・, async ({ page }) => {
    await loginAsStaff(page);
    
    // 蝨ｨ蠎ｫ邂｡逅・・繝ｼ繧ｸ縺ｫ遘ｻ蜍・
    await page.goto('/staff/inventory');
    await expect(page).toHaveURL(/\/staff\/inventory$/);
    
    // 繝壹・繧ｸ縺梧ｭ｣縺励￥陦ｨ遉ｺ縺輔ｌ繧九％縺ｨ繧堤｢ｺ隱・
    await expect(page.locator('body')).toBeVisible();
  });

  test('蜃ｺ蜩∫ｮ｡逅・・繝ｼ繧ｸ縺梧ｭ｣縺励￥陦ｨ遉ｺ縺輔ｌ繧・, async ({ page }) => {
    await loginAsStaff(page);
    
    // 蜃ｺ蜩∫ｮ｡逅・・繝ｼ繧ｸ縺ｫ遘ｻ蜍・
    await page.goto('/staff/listing');
    await expect(page).toHaveURL(/\/staff\/listing$/);
    
    // 繝壹・繧ｸ縺梧ｭ｣縺励￥陦ｨ遉ｺ縺輔ｌ繧九％縺ｨ繧堤｢ｺ隱・
    await expect(page.locator('body')).toBeVisible();
  });

  test('繝ｭ繧ｱ繝ｼ繧ｷ繝ｧ繝ｳ邂｡逅・・繝ｼ繧ｸ縺梧ｭ｣縺励￥陦ｨ遉ｺ縺輔ｌ繧・, async ({ page }) => {
    await loginAsStaff(page);
    
    // 繝ｭ繧ｱ繝ｼ繧ｷ繝ｧ繝ｳ邂｡逅・・繝ｼ繧ｸ縺ｫ遘ｻ蜍・
    await page.goto('/staff/location');
    await expect(page).toHaveURL(/\/staff\/location$/);
    
    // 繝壹・繧ｸ縺梧ｭ｣縺励￥陦ｨ遉ｺ縺輔ｌ繧九％縺ｨ繧堤｢ｺ隱・
    await expect(page.locator('body')).toBeVisible();
  });

  test('繝斐ャ繧ｭ繝ｳ繧ｰ繝壹・繧ｸ縺梧ｭ｣縺励￥陦ｨ遉ｺ縺輔ｌ繧・, async ({ page }) => {
    await loginAsStaff(page);
    
    // 繝斐ャ繧ｭ繝ｳ繧ｰ繝壹・繧ｸ縺ｫ遘ｻ蜍・
    await page.goto('/staff/picking');
    await expect(page).toHaveURL(/\/staff\/picking$/);
    
    // 繝壹・繧ｸ縺梧ｭ｣縺励￥陦ｨ遉ｺ縺輔ｌ繧九％縺ｨ繧堤｢ｺ隱・
    await expect(page.locator('body')).toBeVisible();
  });

  test('驟埼∫ｮ｡逅・・繝ｼ繧ｸ縺梧ｭ｣縺励￥陦ｨ遉ｺ縺輔ｌ繧・, async ({ page }) => {
    await loginAsStaff(page);
    
    // 驟埼∫ｮ｡逅・・繝ｼ繧ｸ縺ｫ遘ｻ蜍・
    await page.goto('/staff/shipping');
    await expect(page).toHaveURL(/\/staff\/shipping$/);
    
    // 繝壹・繧ｸ縺梧ｭ｣縺励￥陦ｨ遉ｺ縺輔ｌ繧九％縺ｨ繧堤｢ｺ隱・
    await expect(page.locator('body')).toBeVisible();
  });

  test('霑泌刀邂｡逅・・繝ｼ繧ｸ縺梧ｭ｣縺励￥陦ｨ遉ｺ縺輔ｌ繧・, async ({ page }) => {
    await loginAsStaff(page);
    
    // 霑泌刀邂｡逅・・繝ｼ繧ｸ縺ｫ遘ｻ蜍・
    await page.goto('/staff/returns');
    await expect(page).toHaveURL(/\/staff\/returns$/);
    
    // 繝壹・繧ｸ縺梧ｭ｣縺励￥陦ｨ遉ｺ縺輔ｌ繧九％縺ｨ繧堤｢ｺ隱・
    await expect(page.locator('body')).toBeVisible();
  });

  test('繧ｿ繧ｹ繧ｯ邂｡逅・・繝ｼ繧ｸ縺梧ｭ｣縺励￥陦ｨ遉ｺ縺輔ｌ繧・, async ({ page }) => {
    await loginAsStaff(page);
    
    // 繧ｿ繧ｹ繧ｯ邂｡逅・・繝ｼ繧ｸ縺ｫ遘ｻ蜍・
    await page.goto('/staff/tasks');
    await expect(page).toHaveURL(/\/staff\/tasks$/);
    
    // 繝壹・繧ｸ縺梧ｭ｣縺励￥陦ｨ遉ｺ縺輔ｌ繧九％縺ｨ繧堤｢ｺ隱・
    await expect(page.locator('body')).toBeVisible();
  });

  test('讀懷刀繝壹・繧ｸ縺梧ｭ｣縺励￥陦ｨ遉ｺ縺輔ｌ繧・, async ({ page }) => {
    await loginAsStaff(page);
    
    // 讀懷刀繝壹・繧ｸ縺ｫ遘ｻ蜍・
    await page.goto('/staff/inspection');
    await expect(page).toHaveURL(/\/staff\/inspection$/);
    
    // 繝壹・繧ｸ縺梧ｭ｣縺励￥陦ｨ遉ｺ縺輔ｌ繧九％縺ｨ繧堤｢ｺ隱・
    await expect(page.locator('body')).toBeVisible();
  });

  test('繝ｬ繝昴・繝医・繝ｼ繧ｸ縺梧ｭ｣縺励￥陦ｨ遉ｺ縺輔ｌ繧・, async ({ page }) => {
    await loginAsStaff(page);
    
    // 繝ｬ繝昴・繝医・繝ｼ繧ｸ縺ｫ遘ｻ蜍・
    await page.goto('/staff/reports');
    await expect(page).toHaveURL(/\/staff\/reports$/);
    
    // 繝壹・繧ｸ縺梧ｭ｣縺励￥陦ｨ遉ｺ縺輔ｌ繧九％縺ｨ繧堤｢ｺ隱・
    await expect(page.locator('body')).toBeVisible();
  });
}); 
import { test, expect } from '@playwright/test';

async function loginAsSeller(page: any) {
  await page.goto('/login');
  await page.fill('input[name="email"]', 'seller@example.com');
  await page.fill('input[name="password"]', 'password123');
  await page.click('button[type="submit"]');
  await expect(page).toHaveURL(/\/dashboard$/, { timeout: 15000 });
}

async function loginAsStaff(page: any) {
  await page.goto('/login');
  await page.fill('input[name="email"]', 'staff@example.com');
  await page.fill('input[name="password"]', 'password123');
  await page.click('button[type="submit"]');
  await expect(page).toHaveURL(/\/staff\/dashboard$/, { timeout: 15000 });
}

test.describe('讌ｭ蜍吶ヵ繝ｭ繝ｼ繝・せ繝・, () => {
  test('繧ｻ繝ｩ繝ｼ: 邏榊刀繝励Λ繝ｳ菴懈・繝輔Ο繝ｼ縺梧ｭ｣蟶ｸ縺ｫ蜍穂ｽ懊☆繧・, async ({ page }) => {
    await loginAsSeller(page);
    
    // 邏榊刀繝励Λ繝ｳ繝壹・繧ｸ縺ｫ遘ｻ蜍・
    await page.goto('/delivery-plan');
    await expect(page).toHaveURL(/\/delivery-plan$/);
    
    // 邏榊刀繝励Λ繝ｳ菴懈・繧ｦ繧｣繧ｶ繝ｼ繝峨・隕∫ｴ縺瑚｡ｨ遉ｺ縺輔ｌ繧九％縺ｨ繧堤｢ｺ隱・
    await expect(page.locator('body')).toBeVisible();
    
    // 繝壹・繧ｸ縺梧ｭ｣縺励￥隱ｭ縺ｿ霎ｼ縺ｾ繧後ｋ縺薙→繧堤｢ｺ隱・
    await expect(page.locator('html')).toBeVisible();
  });

  test('繧ｻ繝ｩ繝ｼ: 蝨ｨ蠎ｫ邂｡逅・判髱｢縺ｧ蝠・刀荳隕ｧ縺瑚｡ｨ遉ｺ縺輔ｌ繧・, async ({ page }) => {
    await loginAsSeller(page);
    
    // 蝨ｨ蠎ｫ繝壹・繧ｸ縺ｫ遘ｻ蜍・
    await page.goto('/inventory');
    await expect(page).toHaveURL(/\/inventory$/);
    
    // 蝨ｨ蠎ｫ逕ｻ髱｢縺ｮ蝓ｺ譛ｬ隕∫ｴ縺瑚｡ｨ遉ｺ縺輔ｌ繧九％縺ｨ繧堤｢ｺ隱・
    await expect(page.locator('body')).toBeVisible();
  });

  test('繧ｹ繧ｿ繝・ヵ: 繝斐ャ繧ｭ繝ｳ繧ｰ逕ｻ髱｢縺梧ｭ｣蟶ｸ縺ｫ陦ｨ遉ｺ縺輔ｌ繧・, async ({ page }) => {
    await loginAsStaff(page);
    
    // 繝斐ャ繧ｭ繝ｳ繧ｰ繝壹・繧ｸ縺ｫ遘ｻ蜍・
    await page.goto('/staff/picking');
    await expect(page).toHaveURL(/\/staff\/picking$/);
    
    // 繝斐ャ繧ｭ繝ｳ繧ｰ逕ｻ髱｢縺ｮ蝓ｺ譛ｬ隕∫ｴ縺瑚｡ｨ遉ｺ縺輔ｌ繧九％縺ｨ繧堤｢ｺ隱・
    await expect(page.locator('body')).toBeVisible();
  });

  test('繧ｹ繧ｿ繝・ヵ: 讀懷刀逕ｻ髱｢縺梧ｭ｣蟶ｸ縺ｫ陦ｨ遉ｺ縺輔ｌ繧・, async ({ page }) => {
    await loginAsStaff(page);
    
    // 讀懷刀繝壹・繧ｸ縺ｫ遘ｻ蜍・
    await page.goto('/staff/inspection');
    await expect(page).toHaveURL(/\/staff\/inspection$/);
    
    // 讀懷刀逕ｻ髱｢縺ｮ蝓ｺ譛ｬ隕∫ｴ縺瑚｡ｨ遉ｺ縺輔ｌ繧九％縺ｨ繧堤｢ｺ隱・
    await expect(page.locator('body')).toBeVisible();
  });

  test('繧ｻ繝ｩ繝ｼ: 繝ｬ繝昴・繝育判髱｢縺ｧKPI縺瑚｡ｨ遉ｺ縺輔ｌ繧・, async ({ page }) => {
    await loginAsSeller(page);
    
    // 繝ｬ繝昴・繝医・繝ｼ繧ｸ縺ｫ遘ｻ蜍・
    await page.goto('/reports');
    await expect(page).toHaveURL(/\/reports$/);
    
    // 繝ｬ繝昴・繝育判髱｢縺ｮ蝓ｺ譛ｬ隕∫ｴ縺瑚｡ｨ遉ｺ縺輔ｌ繧九％縺ｨ繧堤｢ｺ隱・
    await expect(page.locator('body')).toBeVisible();
  });

  test('繧ｹ繧ｿ繝・ヵ: 繧ｿ繧ｹ繧ｯ邂｡逅・判髱｢縺梧ｭ｣蟶ｸ縺ｫ陦ｨ遉ｺ縺輔ｌ繧・, async ({ page }) => {
    await loginAsStaff(page);
    
    // 繧ｿ繧ｹ繧ｯ邂｡逅・・繝ｼ繧ｸ縺ｫ遘ｻ蜍・
    await page.goto('/staff/tasks');
    await expect(page).toHaveURL(/\/staff\/tasks$/);
    
    // 繧ｿ繧ｹ繧ｯ邂｡逅・判髱｢縺ｮ蝓ｺ譛ｬ隕∫ｴ縺瑚｡ｨ遉ｺ縺輔ｌ繧九％縺ｨ繧堤｢ｺ隱・
    await expect(page.locator('body')).toBeVisible();
  });

  test('隱崎ｨｼ: 繝ｭ繧ｰ繧｢繧ｦ繝域ｩ溯・縺梧ｭ｣蟶ｸ縺ｫ蜍穂ｽ懊☆繧・, async ({ page }) => {
    await loginAsSeller(page);
    
    // 繝繝・す繝･繝懊・繝峨′陦ｨ遉ｺ縺輔ｌ繧九％縺ｨ繧堤｢ｺ隱・
    await expect(page).toHaveURL(/\/dashboard$/);
    
    // 繝ｭ繧ｰ繧｢繧ｦ繝亥・逅・ｼ亥ｮ溯｣・＆繧後※縺・ｋ蝣ｴ蜷茨ｼ・
    // 繝励Ο繝輔ぅ繝ｼ繝ｫ繝｡繝九Η繝ｼ繧・Ο繧ｰ繧｢繧ｦ繝医・繧ｿ繝ｳ縺悟ｭ伜惠縺吶ｋ縺九メ繧ｧ繝・け
    const hasLogoutButton = await page.locator('button:has-text("繝ｭ繧ｰ繧｢繧ｦ繝・), a:has-text("繝ｭ繧ｰ繧｢繧ｦ繝・)').count() > 0;
    
    if (hasLogoutButton) {
      await page.locator('button:has-text("繝ｭ繧ｰ繧｢繧ｦ繝・), a:has-text("繝ｭ繧ｰ繧｢繧ｦ繝・)').first().click();
      // 繝ｭ繧ｰ繧｢繧ｦ繝亥ｾ後・繝ｭ繧ｰ繧､繝ｳ繝壹・繧ｸ縺ｫ繝ｪ繝繧､繝ｬ繧ｯ繝・
      await expect(page).toHaveURL(/\/login$/, { timeout: 10000 });
    }
  });
}); 
import { test, expect } from '@playwright/test';

test.describe('繧｢繧ｫ繧ｦ繝ｳ繝育ｮ｡逅・ｩ溯・繝・せ繝・, () => {
  test.beforeEach(async ({ page }) => {
    // 繝ｭ繧ｰ繧､繝ｳ蜃ｦ逅・    await page.goto('/login');
    await page.fill('input[name="email"]', 'staff@example.com');
    await page.fill('input[name="password"]', 'password123');
    await page.click('button[type="submit"]');
    
    // 繝繝・す繝･繝懊・繝峨・繝ｼ繧ｸ縺ｮ隱ｭ縺ｿ霎ｼ縺ｿ螳御ｺ・ｒ蠕・▽
    await page.waitForURL('/staff/dashboard');
    
    // 險ｭ螳壹・繝ｼ繧ｸ縺ｫ遘ｻ蜍・    await page.goto('/settings');
    await page.waitForLoadState('networkidle');
  });

  test('險ｭ螳壹・繝ｼ繧ｸ縺梧ｭ｣蟶ｸ縺ｫ陦ｨ遉ｺ縺輔ｌ繧・, async ({ page }) => {
    // 繝壹・繧ｸ繧ｿ繧､繝医Ν繧堤｢ｺ隱・    await expect(page.locator('h1')).toContainText('繧｢繧ｫ繧ｦ繝ｳ繝郁ｨｭ螳・);
    await expect(page.locator('p')).toContainText('繧｢繧ｫ繧ｦ繝ｳ繝域ュ蝣ｱ縺ｨ繝・・繧ｿ邂｡逅・);
    
    // intelligence-card繧ｯ繝ｩ繧ｹ縺碁←逕ｨ縺輔ｌ縺ｦ縺・ｋ縺狗｢ｺ隱・    await expect(page.locator('.intelligence-card')).toHaveCount(3);
    
    // 縺吶∋縺ｦ縺ｮ繧ｫ繝ｼ繝峨′global繧ｯ繝ｩ繧ｹ繧呈戟縺､縺狗｢ｺ隱・    const cards = page.locator('.intelligence-card.global');
    await expect(cards).toHaveCount(3);
  });

  test('繧｢繧ｫ繧ｦ繝ｳ繝育ｮ｡逅・そ繧ｯ繧ｷ繝ｧ繝ｳ縺瑚｡ｨ遉ｺ縺輔ｌ繧・, async ({ page }) => {
    // 繧ｻ繧ｯ繧ｷ繝ｧ繝ｳ繧ｿ繧､繝医Ν繧堤｢ｺ隱・    await expect(page.locator('h3')).toContainText('繧｢繧ｫ繧ｦ繝ｳ繝育ｮ｡逅・);
    
    // 繝・・繧ｿ繧ｨ繧ｯ繧ｹ繝昴・繝医そ繧ｯ繧ｷ繝ｧ繝ｳ
    await expect(page.locator('h4').filter({ hasText: '繝・・繧ｿ繧ｨ繧ｯ繧ｹ繝昴・繝・ })).toBeVisible();
    await expect(page.locator('text=蛟倶ｺｺ繝・・繧ｿ繧貞ｮ牙・縺ｫ繝繧ｦ繝ｳ繝ｭ繝ｼ繝峨＠縲√ヰ繝・け繧｢繝・・繧剃ｽ懈・縺励∪縺・)).toBeVisible();
    
    // 繧｢繧ｫ繧ｦ繝ｳ繝亥炎髯､繧ｻ繧ｯ繧ｷ繝ｧ繝ｳ
    await expect(page.locator('h4').filter({ hasText: '繧｢繧ｫ繧ｦ繝ｳ繝亥炎髯､' })).toBeVisible();
    await expect(page.locator('text=縺薙・謫堺ｽ懊・螳悟・縺ｫ蜈・↓謌ｻ縺帙∪縺帙ｓ')).toBeVisible();
  });

  test('繝・・繧ｿ繧ｨ繧ｯ繧ｹ繝昴・繝域ｩ溯・縺悟虚菴懊☆繧・, async ({ page }) => {
    // 繧ｨ繧ｯ繧ｹ繝昴・繝医・繧ｿ繝ｳ繧堤｢ｺ隱・    const exportButton = page.locator('button.nexus-button').filter({ hasText: '繧ｨ繧ｯ繧ｹ繝昴・繝・ });
    await expect(exportButton).toBeVisible();
    
    // 繝懊ち繝ｳ繧偵け繝ｪ繝・け
    await exportButton.click();
    
    // 繝医・繧ｹ繝磯夂衍縺瑚｡ｨ遉ｺ縺輔ｌ繧九°繝√ぉ繝・け・亥ｮ溯｣・↓蠢懊§縺ｦ隱ｿ謨ｴ・・    // await expect(page.locator('.toast, .notification')).toBeVisible();
  });

  test('繧｢繧ｫ繧ｦ繝ｳ繝亥炎髯､讖溯・縺ｮ遒ｺ隱阪ム繧､繧｢繝ｭ繧ｰ縺瑚｡ｨ遉ｺ縺輔ｌ繧・, async ({ page }) => {
    // 蜑企勁繝懊ち繝ｳ繧堤｢ｺ隱・    const deleteButton = page.locator('button.nexus-button.danger').filter({ hasText: '蜑企勁' });
    await expect(deleteButton).toBeVisible();
    
    // 繝繧､繧｢繝ｭ繧ｰ縺ｮ繝上Φ繝峨Λ繝ｼ繧定ｨｭ螳・    page.on('dialog', dialog => {
      expect(dialog.message()).toContain('譛ｬ蠖薙↓繧｢繧ｫ繧ｦ繝ｳ繝医ｒ蜑企勁縺励∪縺吶°・・);
      dialog.dismiss();
    });
    
    // 繝懊ち繝ｳ繧偵け繝ｪ繝・け
    await deleteButton.click();
  });

  test('驥崎ｦ√↑豕ｨ諢丈ｺ矩・そ繧ｯ繧ｷ繝ｧ繝ｳ縺瑚｡ｨ遉ｺ縺輔ｌ繧・, async ({ page }) => {
    // 繧ｻ繧ｯ繧ｷ繝ｧ繝ｳ繧ｿ繧､繝医Ν繧堤｢ｺ隱・    await expect(page.locator('h3').filter({ hasText: '驥崎ｦ√↑豕ｨ諢丈ｺ矩・ })).toBeVisible();
    
    // 豕ｨ諢丈ｺ矩・・蜀・ｮｹ繧堤｢ｺ隱・    await expect(page.locator('h4').filter({ hasText: '繝・・繧ｿ縺ｮ菫晁ｭｷ縺ｫ縺､縺・※' })).toBeVisible();
    await expect(page.locator('h4').filter({ hasText: '繧｢繧ｫ繧ｦ繝ｳ繝亥炎髯､縺ｮ蠖ｱ髻ｿ' })).toBeVisible();
    
    // 隱ｬ譏取枚繧堤｢ｺ隱・    await expect(page.locator('text=繧ｨ繧ｯ繧ｹ繝昴・繝医＆繧後◆繝・・繧ｿ縺ｯ驕ｩ蛻・↑蝣ｴ謇縺ｫ菫晏ｭ倥＠')).toBeVisible();
    await expect(page.locator('text=繧｢繧ｫ繧ｦ繝ｳ繝医ｒ蜑企勁縺吶ｋ縺ｨ縲√☆縺ｹ縺ｦ縺ｮ繝・・繧ｿ縲∬ｨｭ螳壹∝ｱ･豁ｴ縺悟ｮ悟・縺ｫ蜑企勁縺輔ｌ縺ｾ縺・)).toBeVisible();
  });

  test('UI邨ｱ荳諤ｧ縺ｮ遒ｺ隱・, async ({ page }) => {
    // intelligence-card繧ｯ繝ｩ繧ｹ縺ｮ菴ｿ逕ｨ繧堤｢ｺ隱・    const cards = page.locator('.intelligence-card.global');
    await expect(cards).toHaveCount(3);
    
    // nexus-button繧ｯ繝ｩ繧ｹ縺ｮ菴ｿ逕ｨ繧堤｢ｺ隱・    const buttons = page.locator('.nexus-button');
    await expect(buttons).toHaveCount(2);
    
    // danger繝懊ち繝ｳ縺ｮ遒ｺ隱・    const dangerButton = page.locator('.nexus-button.danger');
    await expect(dangerButton).toHaveCount(1);
    
    // nexus-text-primary繧ｯ繝ｩ繧ｹ縺ｮ菴ｿ逕ｨ繧堤｢ｺ隱・    const primaryTexts = page.locator('.text-nexus-text-primary');
    await expect(primaryTexts).toHaveCount(6); // 繧ｿ繧､繝医Ν縲∬ｦ句・縺励↑縺ｩ
    
    // nexus-text-secondary繧ｯ繝ｩ繧ｹ縺ｮ菴ｿ逕ｨ繧堤｢ｺ隱・    const secondaryTexts = page.locator('.text-nexus-text-secondary');
    await expect(secondaryTexts).toHaveCount(5); // 繧ｵ繝悶ち繧､繝医Ν縲∬ｪｬ譏取枚縺ｪ縺ｩ
  });

  test('繝ｬ繧ｹ繝昴Φ繧ｷ繝悶ョ繧ｶ繧､繝ｳ縺ｮ遒ｺ隱・, async ({ page }) => {
    // 繝・せ繧ｯ繝医ャ繝励し繧､繧ｺ
    await page.setViewportSize({ width: 1920, height: 1080 });
    await expect(page.locator('.intelligence-card')).toHaveCount(3);
    
    // 繧ｿ繝悶Ξ繝・ヨ繧ｵ繧､繧ｺ
    await page.setViewportSize({ width: 768, height: 1024 });
    await expect(page.locator('.intelligence-card')).toHaveCount(3);
    
    // 繝｢繝舌う繝ｫ繧ｵ繧､繧ｺ
    await page.setViewportSize({ width: 375, height: 667 });
    await expect(page.locator('.intelligence-card')).toHaveCount(3);
    
    // 繝ｬ繧､繧｢繧ｦ繝医′驕ｩ蛻・↓隱ｿ謨ｴ縺輔ｌ縺ｦ縺・ｋ縺狗｢ｺ隱・    await expect(page.locator('.space-y-6')).toBeVisible();
  });

  test('繧｢繧ｯ繧ｻ繧ｷ繝薙Μ繝・ぅ縺ｮ遒ｺ隱・, async ({ page }) => {
    // 繝懊ち繝ｳ縺ｫ繧｢繧ｯ繧ｻ繧ｷ繝悶Ν縺ｪ螻樊ｧ縺後≠繧九°遒ｺ隱・    const exportButton = page.locator('button').filter({ hasText: '繧ｨ繧ｯ繧ｹ繝昴・繝・ });
    await expect(exportButton).toBeVisible();
    
    const deleteButton = page.locator('button').filter({ hasText: '蜑企勁' });
    await expect(deleteButton).toBeVisible();
    
    // 繧ｻ繧ｯ繧ｷ繝ｧ繝ｳ隕句・縺励′驕ｩ蛻・↓讒矩蛹悶＆繧後※縺・ｋ縺狗｢ｺ隱・    await expect(page.locator('h1')).toHaveCount(1);
    await expect(page.locator('h3')).toHaveCount(2);
    await expect(page.locator('h4')).toHaveCount(4);
  });
});
import { test, expect } from '@playwright/test';

async function loginAsSeller(page: any) {
  await page.goto('/login');
  await page.fill('input[name="email"]', 'seller@example.com');
  await page.fill('input[name="password"]', 'password123');
  await page.click('button[type="submit"]');
  await expect(page).toHaveURL(/\/dashboard$/, { timeout: 15000 });
}

async function loginAsStaff(page: any) {
  await page.goto('/login');
  await page.fill('input[name="email"]', 'staff@example.com');
  await page.fill('input[name="password"]', 'password123');
  await page.click('button[type="submit"]');
  await expect(page).toHaveURL(/\/staff\/dashboard$/, { timeout: 15000 });
}

test.describe('繝励Ο繝輔ぅ繝ｼ繝ｫ繝壹・繧ｸ繝・せ繝・, () => {
  test('繧ｻ繝ｩ繝ｼ: 繝励Ο繝輔ぅ繝ｼ繝ｫ繝壹・繧ｸ縺梧ｭ｣縺励￥陦ｨ遉ｺ縺輔ｌ繧・, async ({ page }) => {
    await loginAsSeller(page);
    
    // 逶ｴ謗･繝励Ο繝輔ぅ繝ｼ繝ｫ繝壹・繧ｸ縺ｫ繧｢繧ｯ繧ｻ繧ｹ
    await page.goto('/profile');
    await expect(page).toHaveURL(/\/profile$/);
    
    // 繝励Ο繝輔ぅ繝ｼ繝ｫ繝壹・繧ｸ縺ｮ蝓ｺ譛ｬ隕∫ｴ縺瑚｡ｨ遉ｺ縺輔ｌ繧九％縺ｨ繧堤｢ｺ隱・
    await expect(page.locator('body')).toBeVisible();
    await expect(page.getByText('繝励Ο繝輔ぅ繝ｼ繝ｫ險ｭ螳・)).toBeVisible({ timeout: 10000 });
  });

  test('繧ｹ繧ｿ繝・ヵ: 繝励Ο繝輔ぅ繝ｼ繝ｫ繝壹・繧ｸ縺梧ｭ｣縺励￥陦ｨ遉ｺ縺輔ｌ繧・, async ({ page }) => {
    await loginAsStaff(page);
    
    // 逶ｴ謗･繝励Ο繝輔ぅ繝ｼ繝ｫ繝壹・繧ｸ縺ｫ繧｢繧ｯ繧ｻ繧ｹ
    await page.goto('/profile');
    await expect(page).toHaveURL(/\/profile$/);
    
    // 繝励Ο繝輔ぅ繝ｼ繝ｫ繝壹・繧ｸ縺ｮ蝓ｺ譛ｬ隕∫ｴ縺瑚｡ｨ遉ｺ縺輔ｌ繧九％縺ｨ繧堤｢ｺ隱・
    await expect(page.locator('body')).toBeVisible();
    await expect(page.getByText('繝励Ο繝輔ぅ繝ｼ繝ｫ險ｭ螳・)).toBeVisible({ timeout: 10000 });
  });

  test('繝励Ο繝輔ぅ繝ｼ繝ｫ邱ｨ髮・ｩ溯・縺悟虚菴懊☆繧・, async ({ page }) => {
    await loginAsSeller(page);
    
    // 繝励Ο繝輔ぅ繝ｼ繝ｫ繝壹・繧ｸ縺ｫ繧｢繧ｯ繧ｻ繧ｹ
    await page.goto('/profile');
    
    // 邱ｨ髮・・繧ｿ繝ｳ繧偵け繝ｪ繝・け
    await page.click('button:has-text("邱ｨ髮・)');
    
    // 邱ｨ髮・Δ繝ｼ繝峨↓縺ｪ繧九％縺ｨ繧堤｢ｺ隱・
    await expect(page.locator('input[value*="驤ｴ譛ｨ"]')).toBeVisible({ timeout: 5000 });
    
    // 菫晏ｭ倥・繧ｿ繝ｳ縺瑚｡ｨ遉ｺ縺輔ｌ繧九％縺ｨ繧堤｢ｺ隱・
    await expect(page.getByText('菫晏ｭ・)).toBeVisible();
  });

  test('繝代せ繝ｯ繝ｼ繝牙､画峩繝｢繝ｼ繝繝ｫ縺瑚｡ｨ遉ｺ縺輔ｌ繧・, async ({ page }) => {
    await loginAsSeller(page);
    
    // 繝励Ο繝輔ぅ繝ｼ繝ｫ繝壹・繧ｸ縺ｫ繧｢繧ｯ繧ｻ繧ｹ
    await page.goto('/profile');
    
    // 繝代せ繝ｯ繝ｼ繝牙､画峩繝懊ち繝ｳ繧偵け繝ｪ繝・け
    await page.click('button:has-text("螟画峩")');
    
    // 繝代せ繝ｯ繝ｼ繝牙､画峩繝｢繝ｼ繝繝ｫ縺瑚｡ｨ遉ｺ縺輔ｌ繧九％縺ｨ繧堤｢ｺ隱・
    await expect(page.getByText('繝代せ繝ｯ繝ｼ繝牙､画峩')).toBeVisible({ timeout: 5000 });
  });
}); 
import { test, expect } from '@playwright/test';

test.describe('UI邨ｱ荳諤ｧ讀懆ｨｼ', () => {
  test.beforeEach(async ({ page }) => {
    // 繝ｭ繧ｰ繧､繝ｳ蜃ｦ逅・    await page.goto('/login');
    await page.click('[data-testid="seller-login"]');
    await page.click('button:has-text("繝ｭ繧ｰ繧､繝ｳ")');
    await page.waitForURL('/dashboard');
  });

  test('PageHeader繧ｳ繝ｳ繝昴・繝阪Φ繝医・邨ｱ荳諤ｧ遒ｺ隱・, async ({ page }) => {
    // 繝繝・す繝･繝懊・繝峨・繝ｼ繧ｸ縺ｮPageHeader遒ｺ隱・    await page.goto('/dashboard');
    const dashboardHeader = page.locator('.intelligence-card.americas');
    await expect(dashboardHeader).toBeVisible();
    
    // 繧ｿ繧､繝医Ν縺ｨ繧ｵ繝悶ち繧､繝医Ν縺ｮ蟄伜惠遒ｺ隱・    await expect(page.locator('h1:has-text("繧ｻ繝ｩ繝ｼ繝繝・す繝･繝懊・繝・)')).toBeVisible();
    await expect(page.locator('text=雋ｩ螢ｲ螳溽ｸｾ縺ｨ蝨ｨ蠎ｫ迥ｶ豕√・讎りｦ・)).toBeVisible();
    
    // 繧｢繧､繧ｳ繝ｳ縺ｮ蟄伜惠遒ｺ隱・    await expect(page.locator('.module-icon')).toBeVisible();

    // 險ｭ螳壹・繝ｼ繧ｸ縺ｮPageHeader遒ｺ隱・    await page.goto('/settings');
    const settingsHeader = page.locator('.intelligence-card.global');
    await expect(settingsHeader).toBeVisible();
    
    await expect(page.locator('h1:has-text("繧｢繧ｫ繧ｦ繝ｳ繝郁ｨｭ螳・)')).toBeVisible();
    await expect(page.locator('text=繧｢繧ｫ繧ｦ繝ｳ繝域ュ蝣ｱ縺ｨ繝・・繧ｿ邂｡逅・)).toBeVisible();

    // 繧ｹ繧ｿ繝・ヵ繝繝・す繝･繝懊・繝峨・PageHeader遒ｺ隱・    await page.goto('/staff/dashboard');
    await expect(page.locator('h1:has-text("繧ｹ繧ｿ繝・ヵ繝繝・す繝･繝懊・繝・)')).toBeVisible();
    await expect(page.locator('text=譌･縲・・繧ｿ繧ｹ繧ｯ縺ｨ讌ｭ蜍吶ヵ繝ｭ繝ｼ縺ｮ邂｡逅・)).toBeVisible();
  });

  test('NexusButton繧ｳ繝ｳ繝昴・繝阪Φ繝医・邨ｱ荳諤ｧ遒ｺ隱・, async ({ page }) => {
    await page.goto('/dashboard');
    
    // 繝励Λ繧､繝槭Μ繝懊ち繝ｳ縺ｮ遒ｺ隱・    const primaryButtons = page.locator('.nexus-button.primary, button:has-class("nexus-button"):has-class("primary")');
    const primaryButtonCount = await primaryButtons.count();
    expect(primaryButtonCount).toBeGreaterThan(0);
    
    // 繝懊ち繝ｳ縺ｮ繝帙ヰ繝ｼ繧ｨ繝輔ぉ繧ｯ繝育｢ｺ隱・    const firstPrimaryButton = primaryButtons.first();
    await firstPrimaryButton.hover();
    
    // 繝懊ち繝ｳ縺ｮ繧ｯ繝ｪ繝・け蜿ｯ閭ｽ諤ｧ遒ｺ隱・    await expect(firstPrimaryButton).toBeEnabled();
    
    // 險ｭ螳壹・繝ｼ繧ｸ縺ｧ縺ｮ繝懊ち繝ｳ遒ｺ隱・    await page.goto('/settings');
    
    // 繧ｨ繧ｯ繧ｹ繝昴・繝医・繧ｿ繝ｳ縺ｮ遒ｺ隱・    const exportButton = page.locator('button:has-text("繧ｨ繧ｯ繧ｹ繝昴・繝・)');
    await expect(exportButton).toBeVisible();
    await expect(exportButton).toBeEnabled();
    
    // 蜊ｱ髯ｺ繝懊ち繝ｳ縺ｮ遒ｺ隱・    const deleteButton = page.locator('button:has-text("蜑企勁")');
    await expect(deleteButton).toBeVisible();
    await expect(deleteButton).toBeEnabled();
  });

  test('蝨ｰ蝓溷挨繧ｫ繝ｩ繝ｼ繝ｪ繝ｳ繧ｰ繧ｷ繧ｹ繝・Β縺ｮ遒ｺ隱・, async ({ page }) => {
    await page.goto('/dashboard');
    
    // Americas・磯搨・峨き繝ｩ繝ｼ繝ｪ繝ｳ繧ｰ遒ｺ隱・    const americasCard = page.locator('.intelligence-card.americas');
    await expect(americasCard).toBeVisible();
    
    // Europe・郁ｵ､・峨き繝ｩ繝ｼ繝ｪ繝ｳ繧ｰ遒ｺ隱・    const europeCard = page.locator('.intelligence-card.europe');
    await expect(europeCard).toBeVisible();
    
    // Asia・磯ｻ・ｼ峨き繝ｩ繝ｼ繝ｪ繝ｳ繧ｰ遒ｺ隱・    const asiaCard = page.locator('.intelligence-card.asia');
    await expect(asiaCard).toBeVisible();
    
    // Africa・育ｷ托ｼ峨き繝ｩ繝ｼ繝ｪ繝ｳ繧ｰ遒ｺ隱・    const africaCard = page.locator('.intelligence-card.africa');
    await expect(africaCard).toBeVisible();
    
    // Global・育ｴｫ・峨き繝ｩ繝ｼ繝ｪ繝ｳ繧ｰ遒ｺ隱・    const globalCard = page.locator('.intelligence-card.global');
    await expect(globalCard).toBeVisible();
  });

  test('繝ｬ繧ｹ繝昴Φ繧ｷ繝悶ョ繧ｶ繧､繝ｳ縺ｮ遒ｺ隱・, async ({ page }) => {
    // 繝・せ繧ｯ繝医ャ繝励ン繝･繝ｼ
    await page.setViewportSize({ width: 1440, height: 900 });
    await page.goto('/dashboard');
    
    // 繧ｵ繧､繝峨ヰ繝ｼ縺ｮ陦ｨ遉ｺ遒ｺ隱・    await expect(page.locator('.nexus-sidebar')).toBeVisible();
    
    // 繧ｿ繝悶Ξ繝・ヨ繝薙Η繝ｼ
    await page.setViewportSize({ width: 768, height: 1024 });
    await page.reload();
    
    // 繝倥ャ繝繝ｼ縺ｮ鬮倥＆隱ｿ謨ｴ遒ｺ隱・    const header = page.locator('.nexus-header');
    await expect(header).toBeVisible();
    
    // 繝｢繝舌う繝ｫ繝薙Η繝ｼ
    await page.setViewportSize({ width: 375, height: 667 });
    await page.reload();
    
    // 繧ｿ繝・メ繧ｿ繝ｼ繧ｲ繝・ヨ繧ｵ繧､繧ｺ縺ｮ遒ｺ隱・    const buttons = page.locator('button');
    const buttonCount = await buttons.count();
    
    for (let i = 0; i < Math.min(buttonCount, 5); i++) {
      const button = buttons.nth(i);
      const boundingBox = await button.boundingBox();
      if (boundingBox) {
        // 譛蟆上ち繝・メ繧ｿ繝ｼ繧ｲ繝・ヨ44px遒ｺ隱・        expect(boundingBox.height).toBeGreaterThanOrEqual(40);
        expect(boundingBox.width).toBeGreaterThanOrEqual(40);
      }
    }
  });

  test('繧｢繧ｯ繧ｻ繧ｷ繝薙Μ繝・ぅ縺ｮ遒ｺ隱・, async ({ page }) => {
    await page.goto('/dashboard');
    
    // 繝輔か繝ｼ繧ｫ繧ｹ蜿ｯ閭ｽ縺ｪ隕∫ｴ縺ｮ遒ｺ隱・    const focusableElements = page.locator('button, a, input, select, textarea, [tabindex]:not([tabindex="-1"])');
    const focusableCount = await focusableElements.count();
    expect(focusableCount).toBeGreaterThan(0);
    
    // 繧ｭ繝ｼ繝懊・繝峨リ繝薙ご繝ｼ繧ｷ繝ｧ繝ｳ遒ｺ隱・    await page.keyboard.press('Tab');
    const focusedElement = page.locator(':focus');
    await expect(focusedElement).toBeVisible();
    
    // ARIA螻樊ｧ縺ｮ遒ｺ隱・    const modals = page.locator('[role="dialog"]');
    const modalCount = await modals.count();
    
    if (modalCount > 0) {
      const firstModal = modals.first();
      await expect(firstModal).toHaveAttribute('aria-modal', 'true');
    }
  });

  test('邨ｱ荳縺輔ｌ縺溘お繝ｩ繝ｼ繝上Φ繝峨Μ繝ｳ繧ｰ遒ｺ隱・, async ({ page }) => {
    await page.goto('/settings');
    
    // 繧ｨ繝ｩ繝ｼ迥ｶ諷九・繝懊ち繝ｳ謫堺ｽ・    const deleteButton = page.locator('button:has-text("蜑企勁")');
    await deleteButton.click();
    
    // 遒ｺ隱阪ム繧､繧｢繝ｭ繧ｰ縺ｮ陦ｨ遉ｺ遒ｺ隱・    await page.waitForEvent('dialog');
  });

  test('繝ｭ繝ｼ繝・ぅ繝ｳ繧ｰ迥ｶ諷九・邨ｱ荳諤ｧ遒ｺ隱・, async ({ page }) => {
    await page.goto('/dashboard');
    
    // 繝壹・繧ｸ隱ｭ縺ｿ霎ｼ縺ｿ譎ゅ・繝ｭ繝ｼ繝・ぅ繝ｳ繧ｰ陦ｨ遉ｺ遒ｺ隱・    const loadingIndicator = page.locator('.animate-spin, text=隱ｭ縺ｿ霎ｼ縺ｿ荳ｭ');
    
    // 髱槫酔譛滓桃菴懊〒縺ｮ繝ｭ繝ｼ繝・ぅ繝ｳ繧ｰ遒ｺ隱・    const reportButton = page.locator('button:has-text("繝ｬ繝昴・繝医ｒ繝繧ｦ繝ｳ繝ｭ繝ｼ繝・)');
    if (await reportButton.isVisible()) {
      await reportButton.click();
      // 繝繧ｦ繝ｳ繝ｭ繝ｼ繝牙・逅・・螳御ｺ・ｒ蠕・▽
      await page.waitForTimeout(1000);
    }
  });

  test('繧ｰ繝ｩ繝・・繧ｷ繝ｧ繝ｳ蜉ｹ譫懊・遒ｺ隱・, async ({ page }) => {
    await page.goto('/dashboard');
    
    // 繧ｫ繝ｼ繝峨・繧ｰ繝ｩ繝・・繧ｷ繝ｧ繝ｳ荳企Κ繝舌・縺ｮ遒ｺ隱・    const gradientBars = page.locator('.intelligence-card .bg-gradient-to-r');
    const gradientCount = await gradientBars.count();
    expect(gradientCount).toBeGreaterThan(0);
    
    // 繝懊ち繝ｳ縺ｮ繧ｰ繝ｩ繝・・繧ｷ繝ｧ繝ｳ遒ｺ隱・    const gradientButtons = page.locator('.nexus-button:has-class("primary")');
    const buttonGradientCount = await gradientButtons.count();
    expect(buttonGradientCount).toBeGreaterThan(0);
  });

  test('繝輔か繝ｳ繝育ｵｱ荳諤ｧ縺ｮ遒ｺ隱・, async ({ page }) => {
    await page.goto('/dashboard');
    
    // 繝・ぅ繧ｹ繝励Ξ繧､繝輔か繝ｳ繝医・遒ｺ隱・    const displayElements = page.locator('.font-display');
    const displayCount = await displayElements.count();
    expect(displayCount).toBeGreaterThan(0);
    
    // 繝｢繝弱せ繝壹・繧ｹ繝輔か繝ｳ繝医・遒ｺ隱搾ｼ亥膚蜩！D遲会ｼ・    const monoElements = page.locator('.font-mono');
    const monoCount = await monoElements.count();
    expect(monoCount).toBeGreaterThan(0);
  });

  test('邨ｱ荳縺輔ｌ縺溘せ繝壹・繧ｷ繝ｳ繧ｰ繧ｷ繧ｹ繝・Β遒ｺ隱・, async ({ page }) => {
    await page.goto('/dashboard');
    
    // 繧ｫ繝ｼ繝蛾俣縺ｮ繧ｹ繝壹・繧ｷ繝ｳ繧ｰ遒ｺ隱・    const cardContainer = page.locator('.space-y-6');
    await expect(cardContainer).toBeVisible();
    
    // 繧ｰ繝ｪ繝・ラ縺ｮ繧ｮ繝｣繝・・遒ｺ隱・    const gridContainer = page.locator('.grid.gap-3, .grid.gap-4, .grid.gap-6');
    const gridCount = await gridContainer.count();
    expect(gridCount).toBeGreaterThan(0);
  });
}); 
import { test, expect } from '@playwright/test';

test.describe('讌ｭ蜍吶ヵ繝ｭ繝ｼ縺ｧ縺ｮUI邨ｱ荳諤ｧ讀懆ｨｼ', () => {
  test.beforeEach(async ({ page }) => {
    // 繧ｹ繧ｿ繝・ヵ繧｢繧ｫ繧ｦ繝ｳ繝医〒繝ｭ繧ｰ繧､繝ｳ
    await page.goto('/login');
    await page.click('[data-testid="staff-login"]');
    await page.waitForURL('/staff/dashboard');
  });

  test('蝠・刀讀懷刀繝輔Ο繝ｼ縺ｧ縺ｮUI邨ｱ荳諤ｧ', async ({ page }) => {
    // 讀懷刀繝壹・繧ｸ縺ｸ遘ｻ蜍・
    await page.goto('/staff/inspection');
    
    // PageHeader縺ｮ遒ｺ隱・
    await expect(page.locator('h1:has-text("蝠・刀讀懷刀")')).toBeVisible();
    
    // 邨ｱ荳縺輔ｌ縺溘・繧ｿ繝ｳ繧ｹ繧ｿ繧､繝ｫ縺ｮ遒ｺ隱・
    const inspectionButtons = page.locator('button');
    const buttonCount = await inspectionButtons.count();
    expect(buttonCount).toBeGreaterThan(0);
    
    // 繧ｫ繝ｼ繝峨さ繝ｳ繝昴・繝阪Φ繝医・邨ｱ荳遒ｺ隱・
    const cards = page.locator('.intelligence-card');
    const cardCount = await cards.count();
    expect(cardCount).toBeGreaterThan(0);
    
    // 讀懷刀髢句ｧ九・繧ｿ繝ｳ縺ｮ遒ｺ隱・
    const startButton = page.locator('button:has-text("讀懷刀繧帝幕蟋・)');
    if (await startButton.isVisible()) {
      await expect(startButton).toBeEnabled();
      
      // 繝懊ち繝ｳ縺ｮ繧ｹ繧ｿ繧､繝ｫ邨ｱ荳遒ｺ隱・
      const buttonClasses = await startButton.getAttribute('class');
      expect(buttonClasses).toContain('nexus-button');
    }
  });

  test('QR繧ｳ繝ｼ繝臥函謌舌ヵ繝ｭ繝ｼ縺ｧ縺ｮUI邨ｱ荳諤ｧ', async ({ page }) => {
    // 蝨ｨ蠎ｫ邂｡逅・・繝ｼ繧ｸ縺ｸ遘ｻ蜍・
    await page.goto('/staff/inventory');
    
    // QR繧ｳ繝ｼ繝臥函謌舌・繧ｿ繝ｳ縺ｮ遒ｺ隱・
    const qrButton = page.locator('button:has-text("QR逕滓・"), button:has-text("QR繧ｳ繝ｼ繝・)').first();
    if (await qrButton.isVisible()) {
      await qrButton.click();
      
      // 繝｢繝ｼ繝繝ｫ縺ｮ邨ｱ荳繧ｹ繧ｿ繧､繝ｫ遒ｺ隱・
      const modal = page.locator('[role="dialog"]');
      if (await modal.isVisible()) {
        await expect(modal).toHaveAttribute('aria-modal', 'true');
        
        // 繝｢繝ｼ繝繝ｫ蜀・・繝懊ち繝ｳ邨ｱ荳遒ｺ隱・
        const modalButtons = modal.locator('button');
        const modalButtonCount = await modalButtons.count();
        expect(modalButtonCount).toBeGreaterThan(0);
        
        // 髢峨§繧九・繧ｿ繝ｳ縺ｮ遒ｺ隱・
        const closeButton = modal.locator('button:has-text("髢峨§繧・), button:has-text("繧ｭ繝｣繝ｳ繧ｻ繝ｫ")').first();
        if (await closeButton.isVisible()) {
          await closeButton.click();
        }
      }
    }
  });

  test('霑泌刀蜃ｦ逅・ヵ繝ｭ繝ｼ縺ｧ縺ｮUI邨ｱ荳諤ｧ', async ({ page }) => {
    // 霑泌刀邂｡逅・・繝ｼ繧ｸ縺ｸ遘ｻ蜍・
    await page.goto('/staff/returns');
    
    // PageHeader縺ｮ蝨ｰ蝓溘き繝ｩ繝ｼ繝ｪ繝ｳ繧ｰ遒ｺ隱・
    const pageHeader = page.locator('.intelligence-card');
    await expect(pageHeader.first()).toBeVisible();
    
    // 霑泌刀蜃ｦ逅・・繧ｿ繝ｳ縺ｮ邨ｱ荳遒ｺ隱・
    const returnButtons = page.locator('button:has-text("蜃ｦ逅・), button:has-text("謇ｿ隱・), button:has-text("諡貞凄")');
    const returnButtonCount = await returnButtons.count();
    
    if (returnButtonCount > 0) {
      const firstButton = returnButtons.first();
      await expect(firstButton).toBeVisible();
      
      // 繝懊ち繝ｳ縺ｮ繝帙ヰ繝ｼ繧ｨ繝輔ぉ繧ｯ繝育｢ｺ隱・
      await firstButton.hover();
      await page.waitForTimeout(200);
    }
    
    // 繧ｹ繝・・繧ｿ繧ｹ繝舌ャ繧ｸ縺ｮ邨ｱ荳遒ｺ隱・
    const statusBadges = page.locator('.status-badge');
    const badgeCount = await statusBadges.count();
    expect(badgeCount).toBeGreaterThanOrEqual(0);
  });

  test('蜃ｺ闕ｷ蜃ｦ逅・ヵ繝ｭ繝ｼ縺ｧ縺ｮUI邨ｱ荳諤ｧ', async ({ page }) => {
    // 蜃ｺ闕ｷ邂｡逅・・繝ｼ繧ｸ縺ｸ遘ｻ蜍・
    await page.goto('/staff/shipping');
    
    // 邨ｱ荳縺輔ｌ縺溘ユ繝ｼ繝悶Ν繧ｹ繧ｿ繧､繝ｫ遒ｺ隱・
    const holoTable = page.locator('.holo-table');
    if (await holoTable.isVisible()) {
      await expect(holoTable).toBeVisible();
      
      // 繝・・繝悶Ν繝倥ャ繝繝ｼ縺ｮ邨ｱ荳遒ｺ隱・
      const tableHeaders = holoTable.locator('th');
      const headerCount = await tableHeaders.count();
      expect(headerCount).toBeGreaterThan(0);
    }
    
    // 蜃ｺ闕ｷ繝ｩ繝吶Ν蜊ｰ蛻ｷ繝懊ち繝ｳ縺ｮ遒ｺ隱・
    const printButtons = page.locator('button:has-text("蜊ｰ蛻ｷ"), button:has-text("繝ｩ繝吶Ν")');
    const printButtonCount = await printButtons.count();
    
    if (printButtonCount > 0) {
      const printButton = printButtons.first();
      await expect(printButton).toBeVisible();
      
      // 繝懊ち繝ｳ繧ｹ繧ｿ繧､繝ｫ縺ｮ邨ｱ荳遒ｺ隱・
      const buttonStyle = await printButton.getAttribute('class');
      expect(buttonStyle).toContain('nexus-button');
    }
  });

  test('繧ｿ繧ｹ繧ｯ邂｡逅・ヵ繝ｭ繝ｼ縺ｧ縺ｮUI邨ｱ荳諤ｧ', async ({ page }) => {
    // 繧ｿ繧ｹ繧ｯ邂｡逅・・繝ｼ繧ｸ縺ｸ遘ｻ蜍・
    await page.goto('/staff/tasks');
    
    // 譁ｰ隕上ち繧ｹ繧ｯ菴懈・繝懊ち繝ｳ縺ｮ遒ｺ隱・
    const createTaskButton = page.locator('button:has-text("譁ｰ隕・), button:has-text("菴懈・")').first();
    if (await createTaskButton.isVisible()) {
      await createTaskButton.click();
      
      // 繧ｿ繧ｹ繧ｯ菴懈・繝｢繝ｼ繝繝ｫ縺ｮ邨ｱ荳遒ｺ隱・
      const taskModal = page.locator('[role="dialog"]');
      if (await taskModal.isVisible()) {
        await expect(taskModal).toBeVisible();
        
        // 繝輔か繝ｼ繝隕∫ｴ縺ｮ邨ｱ荳遒ｺ隱・
        const formInputs = taskModal.locator('input, select, textarea');
        const inputCount = await formInputs.count();
        expect(inputCount).toBeGreaterThan(0);
        
        // 菫晏ｭ倥・繧ｿ繝ｳ縺ｮ邨ｱ荳遒ｺ隱・
        const saveButton = taskModal.locator('button:has-text("菫晏ｭ・), button:has-text("菴懈・")').first();
        if (await saveButton.isVisible()) {
          await expect(saveButton).toBeVisible();
        }
        
        // 繧ｭ繝｣繝ｳ繧ｻ繝ｫ繝懊ち繝ｳ縺ｧ髢峨§繧・
        const cancelButton = taskModal.locator('button:has-text("繧ｭ繝｣繝ｳ繧ｻ繝ｫ"), button:has-text("髢峨§繧・)').first();
        if (await cancelButton.isVisible()) {
          await cancelButton.click();
        }
      }
    }
    
    // 繧ｿ繧ｹ繧ｯ繧ｫ繝ｼ繝峨・邨ｱ荳遒ｺ隱・
    const taskCards = page.locator('.intelligence-card');
    const taskCardCount = await taskCards.count();
    expect(taskCardCount).toBeGreaterThan(0);
  });

  test('繝斐ャ繧ｭ繝ｳ繧ｰ繝輔Ο繝ｼ縺ｧ縺ｮUI邨ｱ荳諤ｧ', async ({ page }) => {
    // 繝斐ャ繧ｭ繝ｳ繧ｰ繝壹・繧ｸ縺ｸ遘ｻ蜍・
    await page.goto('/staff/picking');
    
    // 繝斐ャ繧ｭ繝ｳ繧ｰ繝ｪ繧ｹ繝医・邨ｱ荳遒ｺ隱・
    const pickingCards = page.locator('.intelligence-card');
    const cardCount = await pickingCards.count();
    expect(cardCount).toBeGreaterThan(0);
    
    // 繝斐ャ繧ｭ繝ｳ繧ｰ螳御ｺ・・繧ｿ繝ｳ縺ｮ遒ｺ隱・
    const completeButtons = page.locator('button:has-text("螳御ｺ・), button:has-text("遒ｺ隱・)');
    const completeButtonCount = await completeButtons.count();
    
    if (completeButtonCount > 0) {
      const completeButton = completeButtons.first();
      await expect(completeButton).toBeVisible();
      
      // 繝励Λ繧､繝槭Μ繝懊ち繝ｳ繧ｹ繧ｿ繧､繝ｫ縺ｮ遒ｺ隱・
      const buttonClasses = await completeButton.getAttribute('class');
      expect(buttonClasses).toMatch(/nexus-button|primary/);
    }
  });

  test('繝ｬ繝昴・繝育函謌舌ヵ繝ｭ繝ｼ縺ｧ縺ｮUI邨ｱ荳諤ｧ', async ({ page }) => {
    // 繝ｬ繝昴・繝医・繝ｼ繧ｸ縺ｸ遘ｻ蜍・
    await page.goto('/staff/reports');
    
    // 繝ｬ繝昴・繝育函謌舌・繧ｿ繝ｳ縺ｮ遒ｺ隱・
    const generateButton = page.locator('button:has-text("逕滓・"), button:has-text("菴懈・")').first();
    if (await generateButton.isVisible()) {
      await expect(generateButton).toBeVisible();
      
      // 繝懊ち繝ｳ縺ｮ繧｢繧､繧ｳ繝ｳ邨ｱ荳遒ｺ隱・
      const buttonIcon = generateButton.locator('svg');
      if (await buttonIcon.isVisible()) {
        await expect(buttonIcon).toBeVisible();
      }
    }
    
    // 譛滄俣驕ｸ謚朸I 縺ｮ邨ｱ荳遒ｺ隱・
    const dateInputs = page.locator('input[type="date"], input[type="datetime-local"]');
    const dateInputCount = await dateInputs.count();
    
    if (dateInputCount > 0) {
      const dateInput = dateInputs.first();
      await expect(dateInput).toBeVisible();
      
      // 蜈･蜉帙ヵ繧｣繝ｼ繝ｫ繝峨・繧ｹ繧ｿ繧､繝ｫ邨ｱ荳遒ｺ隱・
      const inputStyle = await dateInput.getAttribute('class');
      expect(inputStyle).toMatch(/nexus-input|form-control/);
    }
  });

  test('繝ｭ繧ｱ繝ｼ繧ｷ繝ｧ繝ｳ邂｡逅・ヵ繝ｭ繝ｼ縺ｧ縺ｮUI邨ｱ荳諤ｧ', async ({ page }) => {
    // 繝ｭ繧ｱ繝ｼ繧ｷ繝ｧ繝ｳ邂｡逅・・繝ｼ繧ｸ縺ｸ遘ｻ蜍・
    await page.goto('/staff/location');
    
    // 繝ｭ繧ｱ繝ｼ繧ｷ繝ｧ繝ｳ霑ｽ蜉繝懊ち繝ｳ縺ｮ遒ｺ隱・
    const addLocationButton = page.locator('button:has-text("霑ｽ蜉"), button:has-text("譁ｰ隕・)').first();
    if (await addLocationButton.isVisible()) {
      await addLocationButton.click();
      
      // 繝ｭ繧ｱ繝ｼ繧ｷ繝ｧ繝ｳ霑ｽ蜉繝｢繝ｼ繝繝ｫ縺ｮ邨ｱ荳遒ｺ隱・
      const locationModal = page.locator('[role="dialog"]');
      if (await locationModal.isVisible()) {
        await expect(locationModal).toBeVisible();
        
        // 繝｢繝ｼ繝繝ｫ縺ｮ繧ｯ繝ｭ繝ｼ繧ｺ繝懊ち繝ｳ遒ｺ隱・
        const closeButton = locationModal.locator('button:has-text("ﾃ・), button[aria-label*="髢峨§繧・]').first();
        if (await closeButton.isVisible()) {
          await closeButton.click();
        } else {
          // ESC繧ｭ繝ｼ縺ｧ髢峨§繧・
          await page.keyboard.press('Escape');
        }
      }
    }
    
    // 繝ｭ繧ｱ繝ｼ繧ｷ繝ｧ繝ｳ繧ｫ繝ｼ繝峨・邨ｱ荳遒ｺ隱・
    const locationCards = page.locator('.intelligence-card');
    const locationCardCount = await locationCards.count();
    expect(locationCardCount).toBeGreaterThan(0);
  });

  test('邨ｱ險医ム繝・す繝･繝懊・繝峨〒縺ｮUI邨ｱ荳諤ｧ', async ({ page }) => {
    // 繧ｹ繧ｿ繝・ヵ繝繝・す繝･繝懊・繝峨〒邨ｱ險郁｡ｨ遉ｺ縺ｮ遒ｺ隱・
    await page.goto('/staff/dashboard');
    
    // KPI繧ｫ繝ｼ繝峨・蝨ｰ蝓溷挨繧ｫ繝ｩ繝ｼ繝ｪ繝ｳ繧ｰ遒ｺ隱・
    const kpiCards = page.locator('.intelligence-card');
    const kpiCardCount = await kpiCards.count();
    expect(kpiCardCount).toBeGreaterThan(0);
    
    // 邨ｱ險亥､縺ｮ陦ｨ遉ｺ邨ｱ荳遒ｺ隱・
    const metricValues = page.locator('.metric-value');
    const metricCount = await metricValues.count();
    expect(metricCount).toBeGreaterThan(0);
    
    // 繧｢繧ｯ繧ｷ繝ｧ繝ｳ繧ｪ繝ｼ繝悶・邨ｱ荳遒ｺ隱・
    const actionOrbs = page.locator('.action-orb');
    const orbCount = await actionOrbs.count();
    expect(orbCount).toBeGreaterThan(0);
    
    // 繧ｹ繝・・繧ｿ繧ｹ繝舌ャ繧ｸ縺ｮ邨ｱ荳遒ｺ隱・
    const statusBadges = page.locator('.status-badge');
    const badgeCount = await statusBadges.count();
    expect(badgeCount).toBeGreaterThan(0);
  });

  test('繝｢繝舌う繝ｫ繝薙Η繝ｼ縺ｧ縺ｮ讌ｭ蜍吶ヵ繝ｭ繝ｼ邨ｱ荳諤ｧ', async ({ page }) => {
    // 繝｢繝舌う繝ｫ繝薙Η繝ｼ縺ｫ蛻・ｊ譖ｿ縺・
    await page.setViewportSize({ width: 375, height: 667 });
    
    // 蜷・ｸｻ隕√・繝ｼ繧ｸ縺ｧ縺ｮ繝｢繝舌う繝ｫ蟇ｾ蠢懃｢ｺ隱・
    const pages = [
      '/staff/dashboard',
      '/staff/inspection',
      '/staff/inventory',
      '/staff/shipping',
      '/staff/returns'
    ];
    
    for (const pagePath of pages) {
      await page.goto(pagePath);
      
      // 繝壹・繧ｸ縺ｮ隱ｭ縺ｿ霎ｼ縺ｿ遒ｺ隱・
      await page.waitForLoadState('networkidle');
      
      // 繝倥ャ繝繝ｼ縺ｮ陦ｨ遉ｺ遒ｺ隱・
      const header = page.locator('.nexus-header');
      await expect(header).toBeVisible();
      
      // 繝懊ち繝ｳ縺ｮ繧ｿ繝・メ繧ｿ繝ｼ繧ｲ繝・ヨ繧ｵ繧､繧ｺ遒ｺ隱・
      const buttons = page.locator('button').first();
      if (await buttons.isVisible()) {
        const boundingBox = await buttons.boundingBox();
        if (boundingBox) {
          expect(boundingBox.height).toBeGreaterThanOrEqual(40);
          expect(boundingBox.width).toBeGreaterThanOrEqual(40);
        }
      }
      
      // 繧ｫ繝ｼ繝峨・陦ｨ遉ｺ遒ｺ隱・
      const cards = page.locator('.intelligence-card');
      const cardCount = await cards.count();
      expect(cardCount).toBeGreaterThanOrEqual(0);
    }
  });
}); 
import { test, expect } from '@playwright/test';

test.describe('UI邨ｱ荳蛹紋ｿｮ豁｣鬆・岼 E2E繝・せ繝・, () => {
  test.beforeEach(async ({ page }) => {
    // 繝ｭ繧ｰ繧､繝ｳ蜃ｦ逅・
    await page.goto('/login');
    await page.click('[data-testid="seller-login"]');
    await page.click('button:has-text("繝ｭ繧ｰ繧､繝ｳ")');
    await page.waitForURL('/dashboard');
  });

  test.describe('閥 鬮伜━蜈亥ｺｦ菫ｮ豁｣鬆・岼', () => {
    test('Dashboard - 譌･莉倬∈謚槭Δ繝ｼ繝繝ｫ菫ｮ豁｣', async ({ page }) => {
      await page.goto('/dashboard');
      
      // 譛滄俣驕ｸ謚槭・繧ｿ繝ｳ縺ｮ蟄伜惠遒ｺ隱・
      const periodButton = page.locator('button:has-text("譛滄俣驕ｸ謚・), button:has-text("譛滄俣縺ｧ繝輔ぅ繝ｫ繧ｿ繝ｼ")');
      await expect(periodButton).toBeVisible();
      
      // BaseModal縺ｮ遒ｺ隱・
      await periodButton.click();
      const modal = page.locator('.fixed.inset-0.bg-black.bg-opacity-50, [role="dialog"]');
      await expect(modal).toBeVisible();
      
      // 繝｢繝ｼ繝繝ｫ繧ｿ繧､繝医Ν縺ｮ遒ｺ隱・
      const modalTitle = page.locator('h2:has-text("譛滄俣驕ｸ謚・), h3:has-text("譛滄俣驕ｸ謚・)');
      await expect(modalTitle).toBeVisible();
      
      // 繧ｭ繝｣繝ｳ繧ｻ繝ｫ繝懊ち繝ｳ縺ｧ髢峨§繧・
      const cancelButton = page.locator('button:has-text("繧ｭ繝｣繝ｳ繧ｻ繝ｫ"), button:has-text("髢峨§繧・)');
      if (await cancelButton.isVisible()) {
        await cancelButton.click();
        await expect(modal).not.toBeVisible();
      }
    });

    test('Inventory - CSV 繧､繝ｳ繝昴・繝医Δ繝ｼ繝繝ｫ繝ｻ繝懊ち繝ｳ菫ｮ豁｣', async ({ page }) => {
      await page.goto('/inventory');
      
      // NexusButton縺ｮ遒ｺ隱・
      const buttons = [
        '譁ｰ隕丞膚蜩∫匳骭ｲ',
        'CSV繧､繝ｳ繝昴・繝・,
        'CSV繧ｨ繧ｯ繧ｹ繝昴・繝・
      ];
      
      for (const buttonText of buttons) {
        const button = page.locator(`button:has-text("${buttonText}")`);
        await expect(button).toBeVisible();
        
        // NexusButton繧ｯ繝ｩ繧ｹ縺ｾ縺溘・繧ｹ繧ｿ繧､繝ｫ縺ｮ遒ｺ隱・
        const buttonClass = await button.getAttribute('class');
        expect(buttonClass).toContain('nexus-button');
      }
      
      // CSV繧､繝ｳ繝昴・繝医Δ繝ｼ繝繝ｫ縺ｮ遒ｺ隱・
      const csvImportButton = page.locator('button:has-text("CSV繧､繝ｳ繝昴・繝・)');
      await csvImportButton.click();
      
      const modal = page.locator('[role="dialog"]');
      await expect(modal).toBeVisible();
      
      // 繝｢繝ｼ繝繝ｫ蜀・・NexusInput縺ｮ遒ｺ隱・
      const fileInput = page.locator('input[type="file"]');
      await expect(fileInput).toBeVisible();
      
      // 繝｢繝ｼ繝繝ｫ繧帝哩縺倥ｋ
      const closeButton = page.locator('button:has-text("繧ｭ繝｣繝ｳ繧ｻ繝ｫ"), button:has-text("髢峨§繧・)');
      if (await closeButton.isVisible()) {
        await closeButton.click();
      }
    });

    test('Sales - 繝｢繝ｼ繝繝ｫ繝ｻ繝懊ち繝ｳ菫ｮ豁｣', async ({ page }) => {
      await page.goto('/sales');
      
      // NexusButton縺ｮ遒ｺ隱・
      const buttons = ['蜃ｺ蜩∬ｨｭ螳・, '繝励Ο繝｢繝ｼ繧ｷ繝ｧ繝ｳ菴懈・'];
      
      for (const buttonText of buttons) {
        const button = page.locator(`button:has-text("${buttonText}")`);
        await expect(button).toBeVisible();
        
        const buttonClass = await button.getAttribute('class');
        expect(buttonClass).toContain('nexus-button');
      }
      
      // HoloTable縺ｮ遒ｺ隱・
      const table = page.locator('.holo-table, table');
      await expect(table).toBeVisible();
      
      // 蜃ｺ蜩∬ｨｭ螳壹Δ繝ｼ繝繝ｫ縺ｮ遒ｺ隱・
      const settingsButton = page.locator('button:has-text("蜃ｺ蜩∬ｨｭ螳・)');
      await settingsButton.click();
      
      const modal = page.locator('[role="dialog"]');
      await expect(modal).toBeVisible();
      
      // 繝｢繝ｼ繝繝ｫ繧ｿ繧､繝医Ν縺ｮ遒ｺ隱・
      const modalTitle = page.locator('h2:has-text("蜃ｺ蜩∬ｨｭ螳・), h3:has-text("蜃ｺ蜩∬ｨｭ螳・)');
      await expect(modalTitle).toBeVisible();
      
      // 繝｢繝ｼ繝繝ｫ繧帝哩縺倥ｋ
      const closeButton = page.locator('button:has-text("繧ｭ繝｣繝ｳ繧ｻ繝ｫ"), button:has-text("髢峨§繧・)');
      if (await closeButton.isVisible()) {
        await closeButton.click();
      }
    });

    test('Billing - 繝懊ち繝ｳ繝ｻ繝・・繝悶Ν菫ｮ豁｣', async ({ page }) => {
      await page.goto('/billing');
      
      // NexusButton縺ｮ遒ｺ隱・
      const buttons = ['謾ｯ謇募ｱ･豁ｴ繧偵お繧ｯ繧ｹ繝昴・繝・, '謾ｯ謇輔＞譁ｹ豕輔ｒ逋ｻ骭ｲ'];
      
      for (const buttonText of buttons) {
        const button = page.locator(`button:has-text("${buttonText}")`);
        await expect(button).toBeVisible();
        
        const buttonClass = await button.getAttribute('class');
        expect(buttonClass).toContain('nexus-button');
      }
      
      // HoloTable縺ｮ遒ｺ隱・
      const table = page.locator('.holo-table, table');
      await expect(table).toBeVisible();
      
      // 繝懊ち繝ｳ縺ｮ繧｢繧､繧ｳ繝ｳ遒ｺ隱・
      const exportButton = page.locator('button:has-text("謾ｯ謇募ｱ･豁ｴ繧偵お繧ｯ繧ｹ繝昴・繝・)');
      const buttonIcon = exportButton.locator('svg');
      await expect(buttonIcon).toBeVisible();
    });

    test('Delivery - 繝｢繝ｼ繝繝ｫ繝ｻ蜈･蜉帑ｿｮ豁｣', async ({ page }) => {
      await page.goto('/delivery');
      
      // NexusButton縺ｮ遒ｺ隱・
      const buttons = ['譁ｰ隕冗ｴ榊刀繝励Λ繝ｳ菴懈・', '繝舌・繧ｳ繝ｼ繝臥匱陦・];
      
      for (const buttonText of buttons) {
        const button = page.locator(`button:has-text("${buttonText}")`);
        await expect(button).toBeVisible();
        
        const buttonClass = await button.getAttribute('class');
        expect(buttonClass).toContain('nexus-button');
      }
      
      // 繝舌・繧ｳ繝ｼ繝臥匱陦後Δ繝ｼ繝繝ｫ縺ｮ遒ｺ隱・
      const barcodeButton = page.locator('button:has-text("繝舌・繧ｳ繝ｼ繝臥匱陦・)');
      await barcodeButton.click();
      
      const modal = page.locator('[role="dialog"]');
      await expect(modal).toBeVisible();
      
      // 繝｢繝ｼ繝繝ｫ蜀・・NexusInput縺ｮ遒ｺ隱・
      const inputs = modal.locator('input');
      const inputCount = await inputs.count();
      expect(inputCount).toBeGreaterThan(0);
      
      // 繝｢繝ｼ繝繝ｫ繧帝哩縺倥ｋ
      const closeButton = page.locator('button:has-text("繧ｭ繝｣繝ｳ繧ｻ繝ｫ"), button:has-text("髢峨§繧・)');
      if (await closeButton.isVisible()) {
        await closeButton.click();
      }
    });

    test('Returns - 螟ｧ蝙九Δ繝ｼ繝繝ｫ菫ｮ豁｣', async ({ page }) => {
      await page.goto('/returns');
      
      // NexusButton縺ｮ遒ｺ隱・
      const buttons = ['霑泌刀逕ｳ隲・, '繝ｬ繝昴・繝亥・蜉・];
      
      for (const buttonText of buttons) {
        const button = page.locator(`button:has-text("${buttonText}")`);
        await expect(button).toBeVisible();
        
        const buttonClass = await button.getAttribute('class');
        expect(buttonClass).toContain('nexus-button');
      }
      
      // 霑泌刀逕ｳ隲九Δ繝ｼ繝繝ｫ縺ｮ遒ｺ隱・
      const returnButton = page.locator('button:has-text("霑泌刀逕ｳ隲・)');
      await returnButton.click();
      
      const modal = page.locator('[role="dialog"]');
      await expect(modal).toBeVisible();
      
      // 繝｢繝ｼ繝繝ｫ繧ｵ繧､繧ｺ縺ｮ遒ｺ隱搾ｼ・g・・
      const modalContent = modal.locator('.max-w-lg, .max-w-2xl, .max-w-4xl');
      await expect(modalContent).toBeVisible();
      
      // NexusInput縺ｨNexusTextarea縺ｮ遒ｺ隱・
      const inputs = modal.locator('input');
      const textareas = modal.locator('textarea');
      
      expect(await inputs.count()).toBeGreaterThan(0);
      expect(await textareas.count()).toBeGreaterThan(0);
      
      // 繝｢繝ｼ繝繝ｫ繧帝哩縺倥ｋ
      const closeButton = page.locator('button:has-text("繧ｭ繝｣繝ｳ繧ｻ繝ｫ"), button:has-text("髢峨§繧・)');
      if (await closeButton.isVisible()) {
        await closeButton.click();
      }
    });

    test('Profile - 蜈･蜉帙・繝｢繝ｼ繝繝ｫ菫ｮ豁｣', async ({ page }) => {
      await page.goto('/profile');
      
      // 邱ｨ髮・・繧ｿ繝ｳ縺ｮ遒ｺ隱・
      const editButton = page.locator('button:has-text("邱ｨ髮・)');
      await expect(editButton).toBeVisible();
      
      const buttonClass = await editButton.getAttribute('class');
      expect(buttonClass).toContain('nexus-button');
      
      // 邱ｨ髮・Δ繝ｼ繝峨・遒ｺ隱・
      await editButton.click();
      
      // NexusInput縺ｮ遒ｺ隱・
      const inputs = page.locator('input');
      const inputCount = await inputs.count();
      expect(inputCount).toBeGreaterThan(0);
      
      // 繝代せ繝ｯ繝ｼ繝牙､画峩繝懊ち繝ｳ縺ｮ遒ｺ隱・
      const passwordButton = page.locator('button:has-text("繝代せ繝ｯ繝ｼ繝牙､画峩")');
      if (await passwordButton.isVisible()) {
        await passwordButton.click();
        
        const modal = page.locator('[role="dialog"]');
        await expect(modal).toBeVisible();
        
        // 繝｢繝ｼ繝繝ｫ繧帝哩縺倥ｋ
        const closeButton = page.locator('button:has-text("繧ｭ繝｣繝ｳ繧ｻ繝ｫ"), button:has-text("髢峨§繧・)');
        if (await closeButton.isVisible()) {
          await closeButton.click();
        }
      }
    });

    test('Timeline - 繝懊ち繝ｳ繝ｻ繝｢繝ｼ繝繝ｫ菫ｮ豁｣', async ({ page }) => {
      await page.goto('/timeline');
      
      // NexusButton縺ｮ遒ｺ隱・
      const buttons = ['譛滄俣縺ｧ繝輔ぅ繝ｫ繧ｿ繝ｼ', '螻･豁ｴ繧偵お繧ｯ繧ｹ繝昴・繝・];
      
      for (const buttonText of buttons) {
        const button = page.locator(`button:has-text("${buttonText}")`);
        await expect(button).toBeVisible();
        
        const buttonClass = await button.getAttribute('class');
        expect(buttonClass).toContain('nexus-button');
      }
      
      // 繝輔ぅ繝ｫ繧ｿ繝ｼ繝｢繝ｼ繝繝ｫ縺ｮ遒ｺ隱・
      const filterButton = page.locator('button:has-text("譛滄俣縺ｧ繝輔ぅ繝ｫ繧ｿ繝ｼ")');
      await filterButton.click();
      
      const modal = page.locator('[role="dialog"]');
      await expect(modal).toBeVisible();
      
      // 繝｢繝ｼ繝繝ｫ繧帝哩縺倥ｋ
      const closeButton = page.locator('button:has-text("繧ｭ繝｣繝ｳ繧ｻ繝ｫ"), button:has-text("髢峨§繧・)');
      if (await closeButton.isVisible()) {
        await closeButton.click();
      }
    });
  });

  test.describe('泯 荳ｭ蜆ｪ蜈亥ｺｦ菫ｮ豁｣鬆・岼', () => {
    test('Staff Dashboard - 繝輔ぅ繝ｫ繧ｿ繝ｼ菫ｮ豁｣', async ({ page }) => {
      await page.goto('/staff/dashboard');
      
      // NexusSelect縺ｮ遒ｺ隱・
      const selects = page.locator('select');
      const selectCount = await selects.count();
      expect(selectCount).toBeGreaterThan(0);
      
      // 讀懃ｴ｢蜈･蜉帙・遒ｺ隱・
      const searchInput = page.locator('input[type="search"], input[placeholder*="讀懃ｴ｢"]');
      await expect(searchInput).toBeVisible();
      
      // 譁ｰ隕上ち繧ｹ繧ｯ菴懈・繝懊ち繝ｳ縺ｮ遒ｺ隱・
      const createButton = page.locator('button:has-text("譁ｰ隕上ち繧ｹ繧ｯ菴懈・")');
      await expect(createButton).toBeVisible();
      
      const buttonClass = await createButton.getAttribute('class');
      expect(buttonClass).toContain('nexus-button');
    });

    test('Staff Inventory - 繝輔ぅ繝ｫ繧ｿ繝ｼ繝ｻ繝｢繝ｼ繝繝ｫ菫ｮ豁｣', async ({ page }) => {
      await page.goto('/staff/inventory');
      
      // NexusSelect縺ｮ遒ｺ隱・
      const filters = [
        'select[name="status"]',
        'select[name="category"]',
        'select[name="location"]',
        'select[name="assignee"]'
      ];
      
      for (const filter of filters) {
        const select = page.locator(filter);
        if (await select.isVisible()) {
          const selectClass = await select.getAttribute('class');
          expect(selectClass).toContain('nexus-select');
        }
      }
      
      // 讀懃ｴ｢蜈･蜉帙・遒ｺ隱・
      const searchInput = page.locator('input[type="search"], input[placeholder*="讀懃ｴ｢"]');
      await expect(searchInput).toBeVisible();
      
      // NexusButton縺ｮ遒ｺ隱・
      const buttons = ['蝠・刀隧ｳ邏ｰ繧堤ｷｨ髮・, '繝ｭ繧ｱ繝ｼ繧ｷ繝ｧ繝ｳ遘ｻ蜍・, 'CSV繧ｨ繧ｯ繧ｹ繝昴・繝・];
      
      for (const buttonText of buttons) {
        const button = page.locator(`button:has-text("${buttonText}")`);
        if (await button.isVisible()) {
          const buttonClass = await button.getAttribute('class');
          expect(buttonClass).toContain('nexus-button');
        }
      }
    });

    test('Staff Inspection - 繝｢繝ｼ繝繝ｫ菫ｮ豁｣', async ({ page }) => {
      await page.goto('/staff/inspection');
      
      // NexusButton縺ｮ遒ｺ隱・
      const buttons = ['讀懷刀蝓ｺ貅悶ｒ遒ｺ隱・, '繧ｫ繝｡繝ｩ險ｭ螳・, '讀懷刀髢句ｧ・];
      
      for (const buttonText of buttons) {
        const button = page.locator(`button:has-text("${buttonText}")`);
        if (await button.isVisible()) {
          const buttonClass = await button.getAttribute('class');
          expect(buttonClass).toContain('nexus-button');
        }
      }
      
      // 讀懷刀蝓ｺ貅悶Δ繝ｼ繝繝ｫ縺ｮ遒ｺ隱・
      const standardsButton = page.locator('button:has-text("讀懷刀蝓ｺ貅悶ｒ遒ｺ隱・)');
      if (await standardsButton.isVisible()) {
        await standardsButton.click();
        
        const modal = page.locator('[role="dialog"]');
        await expect(modal).toBeVisible();
        
        // 繝｢繝ｼ繝繝ｫ繧帝哩縺倥ｋ
        const closeButton = page.locator('button:has-text("繧ｭ繝｣繝ｳ繧ｻ繝ｫ"), button:has-text("髢峨§繧・)');
        if (await closeButton.isVisible()) {
          await closeButton.click();
        }
      }
    });

    test('Login - 蜈･蜉帙ヵ繧｣繝ｼ繝ｫ繝我ｿｮ豁｣', async ({ page }) => {
      await page.goto('/login');
      
      // NexusInput縺ｮ遒ｺ隱・
      const emailInput = page.locator('input[type="email"]');
      const passwordInput = page.locator('input[type="password"]');
      
      await expect(emailInput).toBeVisible();
      await expect(passwordInput).toBeVisible();
      
      // enterprise繝舌Μ繧｢繝ｳ繝医・遒ｺ隱・
      const emailClass = await emailInput.getAttribute('class');
      const passwordClass = await passwordInput.getAttribute('class');
      
      expect(emailClass).toContain('nexus-input');
      expect(passwordClass).toContain('nexus-input');
      
      // 繝ｩ繝吶Ν縺ｮ繧｢繧､繧ｳ繝ｳ遒ｺ隱・
      const emailLabel = page.locator('label:has(svg) >> text=繝｡繝ｼ繝ｫ繧｢繝峨Ξ繧ｹ');
      const passwordLabel = page.locator('label:has(svg) >> text=繝代せ繝ｯ繝ｼ繝・);
      
      await expect(emailLabel).toBeVisible();
      await expect(passwordLabel).toBeVisible();
      
      // 繝ｭ繧ｰ繧､繝ｳ讖溯・縺ｮ遒ｺ隱・
      await emailInput.fill('seller@example.com');
      await passwordInput.fill('password123');
      
      const loginButton = page.locator('button:has-text("繝ｭ繧ｰ繧､繝ｳ")');
      await expect(loginButton).toBeVisible();
      
      const buttonClass = await loginButton.getAttribute('class');
      expect(buttonClass).toContain('nexus-button');
    });
  });

  test.describe('泙 菴主━蜈亥ｺｦ菫ｮ豁｣鬆・岼', () => {
    test('NexusTextarea - 繝ｩ繝吶Ν濶ｲ菫ｮ豁｣', async ({ page }) => {
      // NexusTextarea縺御ｽｿ逕ｨ縺輔ｌ縺ｦ縺・ｋ逕ｻ髱｢繧偵メ繧ｧ繝・け
      const pages = ['/returns', '/staff/inspection'];
      
      for (const pagePath of pages) {
        await page.goto(pagePath);
        
        const textareas = page.locator('textarea');
        const textareaCount = await textareas.count();
        
        if (textareaCount > 0) {
          // 繝ｩ繝吶Ν縺ｮ濶ｲ縺系exus-text-secondary縺ｧ縺ゅｋ縺薙→繧堤｢ｺ隱・
          const labels = page.locator('label');
          const labelCount = await labels.count();
          
          for (let i = 0; i < labelCount; i++) {
            const label = labels.nth(i);
            const labelClass = await label.getAttribute('class');
            if (labelClass && labelClass.includes('nexus-text-secondary')) {
              // 繝ｩ繝吶Ν濶ｲ縺梧ｭ｣縺励￥險ｭ螳壹＆繧後※縺・ｋ縺薙→繧堤｢ｺ隱・
              expect(labelClass).toContain('nexus-text-secondary');
            }
          }
        }
      }
    });
  });

  test.describe('搭 蜈ｨ菴鍋噪縺ｪ邨ｱ荳諤ｧ遒ｺ隱・, () => {
    test('繝・じ繧､繝ｳ繧ｷ繧ｹ繝・Β邨ｱ荳諤ｧ遒ｺ隱・, async ({ page }) => {
      const pages = [
        '/dashboard',
        '/inventory',
        '/sales',
        '/billing',
        '/delivery',
        '/returns',
        '/profile',
        '/timeline'
      ];
      
      for (const pagePath of pages) {
        await page.goto(pagePath);
        
        // NexusButton縺ｮ遒ｺ隱・
        const buttons = page.locator('button');
        const buttonCount = await buttons.count();
        
        if (buttonCount > 0) {
          // 蟆代↑縺上→繧・縺､縺ｮ繝懊ち繝ｳ縺君exusButton縺ｧ縺ゅｋ縺薙→繧堤｢ｺ隱・
          const nexusButtons = page.locator('button.nexus-button, button[class*="nexus-button"]');
          const nexusButtonCount = await nexusButtons.count();
          expect(nexusButtonCount).toBeGreaterThan(0);
        }
        
        // 繝｢繝ｼ繝繝ｫ縺ｮ遒ｺ隱・
        const modals = page.locator('[role="dialog"]');
        const modalCount = await modals.count();
        
        // 蜈･蜉帙ヵ繧｣繝ｼ繝ｫ繝峨・遒ｺ隱・
        const inputs = page.locator('input');
        const inputCount = await inputs.count();
        
        if (inputCount > 0) {
          // 蟆代↑縺上→繧・縺､縺ｮ蜈･蜉帙′NexusInput縺ｧ縺ゅｋ縺薙→繧堤｢ｺ隱・
          const nexusInputs = page.locator('input.nexus-input, input[class*="nexus-input"]');
          const nexusInputCount = await nexusInputs.count();
          expect(nexusInputCount).toBeGreaterThan(0);
        }
      }
    });

    test('讖溯・菫晄戟遒ｺ隱・, async ({ page }) => {
      // 荳ｻ隕√↑讖溯・縺梧ｭ｣蟶ｸ縺ｫ蜍穂ｽ懊☆繧九％縺ｨ繧堤｢ｺ隱・
      await page.goto('/dashboard');
      
      // 繝翫ン繧ｲ繝ｼ繧ｷ繝ｧ繝ｳ縺ｮ遒ｺ隱・
      const navLinks = page.locator('nav a');
      const navLinkCount = await navLinks.count();
      expect(navLinkCount).toBeGreaterThan(0);
      
      // 蜷・・繝ｼ繧ｸ縺ｸ縺ｮ繧｢繧ｯ繧ｻ繧ｹ遒ｺ隱・
      const pages = ['/inventory', '/sales', '/billing'];
      
      for (const pagePath of pages) {
        await page.goto(pagePath);
        
        // 繝壹・繧ｸ縺梧ｭ｣蟶ｸ縺ｫ隱ｭ縺ｿ霎ｼ縺ｾ繧後ｋ縺薙→繧堤｢ｺ隱・
        await expect(page.locator('h1')).toBeVisible();
        
        // 繧ｨ繝ｩ繝ｼ縺後↑縺・％縺ｨ繧堤｢ｺ隱・
        const errors = page.locator('.error, [role="alert"]');
        const errorCount = await errors.count();
        expect(errorCount).toBe(0);
      }
    });

    test('繝ｬ繧ｹ繝昴Φ繧ｷ繝悶ョ繧ｶ繧､繝ｳ遒ｺ隱・, async ({ page }) => {
      const viewports = [
        { width: 1440, height: 900 }, // 繝・せ繧ｯ繝医ャ繝・
        { width: 768, height: 1024 },  // 繧ｿ繝悶Ξ繝・ヨ
        { width: 375, height: 667 }    // 繝｢繝舌う繝ｫ
      ];
      
      for (const viewport of viewports) {
        await page.setViewportSize(viewport);
        await page.goto('/dashboard');
        
        // 繝壹・繧ｸ縺梧ｭ｣蟶ｸ縺ｫ陦ｨ遉ｺ縺輔ｌ繧九％縺ｨ繧堤｢ｺ隱・
        await expect(page.locator('h1')).toBeVisible();
        
        // 繝懊ち繝ｳ縺ｮ繧ｿ繝・メ繧ｿ繝ｼ繧ｲ繝・ヨ繧ｵ繧､繧ｺ遒ｺ隱搾ｼ医Δ繝舌う繝ｫ・・
        if (viewport.width === 375) {
          const buttons = page.locator('button');
          const buttonCount = await buttons.count();
          
          for (let i = 0; i < Math.min(buttonCount, 3); i++) {
            const button = buttons.nth(i);
            const boundingBox = await button.boundingBox();
            if (boundingBox) {
              expect(boundingBox.height).toBeGreaterThanOrEqual(40);
              expect(boundingBox.width).toBeGreaterThanOrEqual(40);
            }
          }
        }
      }
    });
  });
}); 
import { test, expect } from '@playwright/test';

test.describe('繧ｷ繝ｳ繝励ΝUI邨ｱ荳諤ｧ繝・せ繝・, () => {
  test('繝ｭ繧ｰ繧､繝ｳ繝壹・繧ｸ縺ｮNexusInput遒ｺ隱・, async ({ page }) => {
    await page.goto('/login');
    
    // 繝壹・繧ｸ縺梧ｭ｣蟶ｸ縺ｫ隱ｭ縺ｿ霎ｼ縺ｾ繧後ｋ縺薙→繧堤｢ｺ隱・
    await expect(page.locator('h2:has-text("THE WORLD DOOR")')).toBeVisible();
    
    // 繝｡繝ｼ繝ｫ繧｢繝峨Ξ繧ｹ蜈･蜉帙ヵ繧｣繝ｼ繝ｫ繝峨・遒ｺ隱・
    const emailInput = page.locator('input[type="email"]');
    await expect(emailInput).toBeVisible();
    
    // 繝代せ繝ｯ繝ｼ繝牙・蜉帙ヵ繧｣繝ｼ繝ｫ繝峨・遒ｺ隱・
    const passwordInput = page.locator('input[type="password"]');
    await expect(passwordInput).toBeVisible();
    
    // 繝ｭ繧ｰ繧､繝ｳ繝懊ち繝ｳ縺ｮ遒ｺ隱・
    const loginButton = page.locator('button:has-text("繝ｭ繧ｰ繧､繝ｳ")');
    await expect(loginButton).toBeVisible();
    
    // 繝・せ繝・D繝懊ち繝ｳ縺ｮ遒ｺ隱・
    const sellerLoginButton = page.locator('[data-testid="seller-login"]');
    await expect(sellerLoginButton).toBeVisible();
    
    const staffLoginButton = page.locator('[data-testid="staff-login"]');
    await expect(staffLoginButton).toBeVisible();
  });

  test('繝ｭ繧ｰ繧､繝ｳ讖溯・縺ｮ繝・せ繝・, async ({ page }) => {
    await page.goto('/login');
    
    // 繧ｻ繝ｩ繝ｼ繝ｭ繧ｰ繧､繝ｳ繝懊ち繝ｳ繧偵け繝ｪ繝・け
    await page.click('[data-testid="seller-login"]');
    
    // 繝ｭ繧ｰ繧､繝ｳ繝懊ち繝ｳ繧偵け繝ｪ繝・け
    await page.click('button:has-text("繝ｭ繧ｰ繧､繝ｳ")');
    
    // 繝繝・す繝･繝懊・繝峨・繝ｼ繧ｸ縺ｫ繝ｪ繝繧､繝ｬ繧ｯ繝医＆繧後ｋ縺薙→繧堤｢ｺ隱・
    await page.waitForURL('/dashboard');
    
    // 繝繝・す繝･繝懊・繝峨・繧ｿ繧､繝医Ν繧堤｢ｺ隱・
    await expect(page.locator('h1:has-text("繧ｻ繝ｩ繝ｼ繝繝・す繝･繝懊・繝・)')).toBeVisible();
  });

  test('繝繝・す繝･繝懊・繝峨・NexusButton遒ｺ隱・, async ({ page }) => {
    // 繝ｭ繧ｰ繧､繝ｳ
    await page.goto('/login');
    await page.click('[data-testid="seller-login"]');
    await page.click('button:has-text("繝ｭ繧ｰ繧､繝ｳ")');
    await page.waitForURL('/dashboard');
    
    // 繝壹・繧ｸ縺梧ｭ｣蟶ｸ縺ｫ隱ｭ縺ｿ霎ｼ縺ｾ繧後ｋ縺薙→繧堤｢ｺ隱・
    await expect(page.locator('h1:has-text("繧ｻ繝ｩ繝ｼ繝繝・す繝･繝懊・繝・)')).toBeVisible();
    
    // 繝懊ち繝ｳ縺ｮ蟄伜惠遒ｺ隱・
    const buttons = page.locator('button');
    const buttonCount = await buttons.count();
    expect(buttonCount).toBeGreaterThan(0);
    
    // NexusButton繧ｯ繝ｩ繧ｹ繧呈戟縺､繝懊ち繝ｳ縺ｮ遒ｺ隱・
    const nexusButtons = page.locator('button[class*="nexus-button"]');
    const nexusButtonCount = await nexusButtons.count();
    
    // 蟆代↑縺上→繧・縺､縺ｮNexusButton縺悟ｭ伜惠縺吶ｋ縺薙→繧堤｢ｺ隱・
    if (nexusButtonCount > 0) {
      console.log(`NexusButton found: ${nexusButtonCount} buttons`);
    } else {
      console.log('NexusButton not found, checking for other button styling');
    }
  });

  test('蝨ｨ蠎ｫ繝壹・繧ｸ縺ｮUI邨ｱ荳諤ｧ遒ｺ隱・, async ({ page }) => {
    // 繝ｭ繧ｰ繧､繝ｳ
    await page.goto('/login');
    await page.click('[data-testid="seller-login"]');
    await page.click('button:has-text("繝ｭ繧ｰ繧､繝ｳ")');
    await page.waitForURL('/dashboard');
    
    // 蝨ｨ蠎ｫ繝壹・繧ｸ縺ｫ遘ｻ蜍・
    await page.goto('/inventory');
    
    // 繝壹・繧ｸ縺梧ｭ｣蟶ｸ縺ｫ隱ｭ縺ｿ霎ｼ縺ｾ繧後ｋ縺薙→繧堤｢ｺ隱・
    await expect(page.locator('h1')).toBeVisible();
    
    // 繝懊ち繝ｳ縺ｮ蟄伜惠遒ｺ隱・
    const buttons = page.locator('button');
    const buttonCount = await buttons.count();
    expect(buttonCount).toBeGreaterThan(0);
    
    // 繝・・繝悶Ν縺ｮ蟄伜惠遒ｺ隱・
    const tables = page.locator('table');
    const tableCount = await tables.count();
    
    if (tableCount > 0) {
      console.log(`Tables found: ${tableCount}`);
    }
  });
}); 
import { test, expect } from '@playwright/test';

test.describe('霑ｽ蜉菫ｮ豁｣鬆・岼 E2E繝・せ繝・, () => {
  test.beforeEach(async ({ page }) => {
    // 繝ｭ繧ｰ繧､繝ｳ蜃ｦ逅・
    await page.goto('/login');
    await page.click('[data-testid="seller-login"]');
    await page.click('button:has-text("繝ｭ繧ｰ繧､繝ｳ")');
    await page.waitForURL('/dashboard');
  });

  test.describe('肌 霑ｽ蜉菫ｮ豁｣鬆・岼繝・せ繝・, () => {
    test('TaskDetailModal - 繝懊ち繝ｳ邨ｱ荳菫ｮ豁｣', async ({ page }) => {
      await page.goto('/dashboard');
      
      // 繧ｿ繧ｹ繧ｯ隧ｳ邏ｰ繝｢繝ｼ繝繝ｫ繧帝幕縺・
      const taskButton = page.locator('button:has-text("繧ｿ繧ｹ繧ｯ隧ｳ邏ｰ"), button:has-text("隧ｳ邏ｰ"), [data-testid*="task"]');
      if (await taskButton.first().isVisible()) {
        await taskButton.first().click();
        
        const modal = page.locator('[role="dialog"]');
        await expect(modal).toBeVisible();
        
        // 繝倥ャ繝繝ｼ縺ｮ髢峨§繧九・繧ｿ繝ｳ遒ｺ隱・
        const closeButton = modal.locator('button:has-text("髢峨§繧・), button[aria-label="Close"], button:has(svg)');
        if (await closeButton.first().isVisible()) {
          const buttonClass = await closeButton.first().getAttribute('class');
          expect(buttonClass).toContain('nexus-button');
        }
        
        // 繝輔ャ繧ｿ繝ｼ繝懊ち繝ｳ縺ｮ遒ｺ隱・
        const footerButtons = modal.locator('button:has-text("蜊ｰ蛻ｷ"), button:has-text("隍・｣ｽ"), button:has-text("邱ｨ髮・)');
        const footerButtonCount = await footerButtons.count();
        
        for (let i = 0; i < footerButtonCount; i++) {
          const button = footerButtons.nth(i);
          const buttonClass = await button.getAttribute('class');
          expect(buttonClass).toContain('nexus-button');
        }
        
        // 繝｢繝ｼ繝繝ｫ繧帝哩縺倥ｋ
        if (await closeButton.first().isVisible()) {
          await closeButton.first().click();
        }
      }
    });

    test('CarrierSettingsModal - 蜈･蜉帙ヵ繧｣繝ｼ繝ｫ繝我ｿｮ豁｣', async ({ page }) => {
      await page.goto('/settings');
      
      // 驟埼∵･ｭ閠・ｨｭ螳壹Δ繝ｼ繝繝ｫ繧帝幕縺・
      const carrierButton = page.locator('button:has-text("驟埼∵･ｭ閠・ｨｭ螳・), button:has-text("驟埼∬ｨｭ螳・), button:has-text("讌ｭ閠・ｨｭ螳・)');
      if (await carrierButton.first().isVisible()) {
        await carrierButton.first().click();
        
        const modal = page.locator('[role="dialog"]');
        await expect(modal).toBeVisible();
        
        // NexusInput縺ｮ遒ｺ隱・
        const inputs = modal.locator('input[type="text"], input[type="number"]');
        const inputCount = await inputs.count();
        
        if (inputCount > 0) {
          for (let i = 0; i < Math.min(inputCount, 3); i++) {
            const input = inputs.nth(i);
            const inputClass = await input.getAttribute('class');
            expect(inputClass).toContain('nexus-input');
          }
        }
        
        // NexusTextarea縺ｮ遒ｺ隱・
        const textareas = modal.locator('textarea');
        const textareaCount = await textareas.count();
        
        if (textareaCount > 0) {
          const textarea = textareas.first();
          const textareaClass = await textarea.getAttribute('class');
          expect(textareaClass).toContain('nexus-textarea');
        }
        
        // 繝懊ち繝ｳ縺ｮ遒ｺ隱・
        const saveButton = modal.locator('button:has-text("菫晏ｭ・), button:has-text("譖ｴ譁ｰ")');
        if (await saveButton.first().isVisible()) {
          const buttonClass = await saveButton.first().getAttribute('class');
          expect(buttonClass).toContain('nexus-button');
        }
        
        // 繝｢繝ｼ繝繝ｫ繧帝哩縺倥ｋ
        const closeButton = modal.locator('button:has-text("繧ｭ繝｣繝ｳ繧ｻ繝ｫ"), button:has-text("髢峨§繧・)');
        if (await closeButton.first().isVisible()) {
          await closeButton.first().click();
        }
      }
    });

    test('PackingMaterialsModal - 謨ｰ驥丞・蜉帑ｿｮ豁｣', async ({ page }) => {
      await page.goto('/inventory');
      
      // 譴ｱ蛹・ｳ・攝繝｢繝ｼ繝繝ｫ繧帝幕縺・
      const packingButton = page.locator('button:has-text("譴ｱ蛹・ｳ・攝"), button:has-text("雉・攝遒ｺ隱・), button:has-text("逋ｺ豕ｨ")');
      if (await packingButton.first().isVisible()) {
        await packingButton.first().click();
        
        const modal = page.locator('[role="dialog"]');
        await expect(modal).toBeVisible();
        
        // 謨ｰ驥丞・蜉帙ヵ繧｣繝ｼ繝ｫ繝峨・遒ｺ隱・
        const quantityInputs = modal.locator('input[type="number"], input[placeholder*="謨ｰ驥・], input[name*="quantity"]');
        const quantityCount = await quantityInputs.count();
        
        if (quantityCount > 0) {
          const quantityInput = quantityInputs.first();
          const inputClass = await quantityInput.getAttribute('class');
          expect(inputClass).toContain('nexus-input');
          
          // 謨ｰ驥丞､画峩繝・せ繝・
          await quantityInput.fill('5');
          const value = await quantityInput.inputValue();
          expect(value).toBe('5');
        }
        
        // 逋ｺ豕ｨ繝懊ち繝ｳ縺ｮ遒ｺ隱・
        const orderButton = modal.locator('button:has-text("逋ｺ豕ｨ"), button:has-text("豕ｨ譁・)');
        if (await orderButton.first().isVisible()) {
          const buttonClass = await orderButton.first().getAttribute('class');
          expect(buttonClass).toContain('nexus-button');
        }
        
        // 繝｢繝ｼ繝繝ｫ繧帝哩縺倥ｋ
        const closeButton = modal.locator('button:has-text("髢峨§繧・), button:has-text("繧ｭ繝｣繝ｳ繧ｻ繝ｫ")');
        if (await closeButton.first().isVisible()) {
          await closeButton.first().click();
        }
      }
    });

    test('ProductRegistrationModal - 蜈･蜉帷ｵｱ荳菫ｮ豁｣', async ({ page }) => {
      await page.goto('/inventory');
      
      // 譁ｰ隕丞膚蜩∫匳骭ｲ繝｢繝ｼ繝繝ｫ繧帝幕縺・
      const registerButton = page.locator('button:has-text("譁ｰ隕丞膚蜩∫匳骭ｲ"), button:has-text("蝠・刀霑ｽ蜉"), button:has-text("逋ｻ骭ｲ")');
      if (await registerButton.first().isVisible()) {
        await registerButton.first().click();
        
        const modal = page.locator('[role="dialog"]');
        await expect(modal).toBeVisible();
        
        // NexusInput縺ｮ遒ｺ隱・
        const textInputs = modal.locator('input[type="text"], input[type="number"]');
        const textInputCount = await textInputs.count();
        
        if (textInputCount > 0) {
          for (let i = 0; i < Math.min(textInputCount, 5); i++) {
            const input = textInputs.nth(i);
            const inputClass = await input.getAttribute('class');
            expect(inputClass).toContain('nexus-input');
          }
        }
        
        // NexusSelect縺ｮ遒ｺ隱・
        const selects = modal.locator('select');
        const selectCount = await selects.count();
        
        if (selectCount > 0) {
          for (let i = 0; i < selectCount; i++) {
            const select = selects.nth(i);
            const selectClass = await select.getAttribute('class');
            expect(selectClass).toContain('nexus-select');
          }
        }
        
        // NexusTextarea縺ｮ遒ｺ隱・
        const textareas = modal.locator('textarea');
        const textareaCount = await textareas.count();
        
        if (textareaCount > 0) {
          for (let i = 0; i < textareaCount; i++) {
            const textarea = textareas.nth(i);
            const textareaClass = await textarea.getAttribute('class');
            expect(textareaClass).toContain('nexus-textarea');
          }
        }
        
        // 逋ｻ骭ｲ繝懊ち繝ｳ縺ｮ遒ｺ隱・
        const submitButton = modal.locator('button:has-text("逋ｻ骭ｲ"), button:has-text("菫晏ｭ・), button[type="submit"]');
        if (await submitButton.first().isVisible()) {
          const buttonClass = await submitButton.first().getAttribute('class');
          expect(buttonClass).toContain('nexus-button');
        }
        
        // 繝｢繝ｼ繝繝ｫ繧帝哩縺倥ｋ
        const closeButton = modal.locator('button:has-text("繧ｭ繝｣繝ｳ繧ｻ繝ｫ"), button:has-text("髢峨§繧・)');
        if (await closeButton.first().isVisible()) {
          await closeButton.first().click();
        }
      }
    });

    test('QRCodeModal - 濶ｲ蠖ｩ邨ｱ荳菫ｮ豁｣', async ({ page }) => {
      await page.goto('/inventory');
      
      // QR繧ｳ繝ｼ繝臥函謌舌Δ繝ｼ繝繝ｫ繧帝幕縺・
      const qrButton = page.locator('button:has-text("QR繧ｳ繝ｼ繝・), button:has-text("繝舌・繧ｳ繝ｼ繝・), button[data-testid*="qr"]');
      if (await qrButton.first().isVisible()) {
        await qrButton.first().click();
        
        const modal = page.locator('[role="dialog"]');
        await expect(modal).toBeVisible();
        
        // Nexus繝・じ繧､繝ｳ繝医・繧ｯ繝ｳ縺ｮ遒ｺ隱・
        const textElements = modal.locator('.nexus-text-primary, .nexus-text-secondary');
        const textCount = await textElements.count();
        expect(textCount).toBeGreaterThan(0);
        
        // 閭梧勹濶ｲ縺ｮ遒ｺ隱・
        const bgElements = modal.locator('[class*="nexus-bg"], [class*="bg-nexus"]');
        const bgCount = await bgElements.count();
        
        // 繝懊・繝繝ｼ濶ｲ縺ｮ遒ｺ隱・
        const borderElements = modal.locator('[class*="nexus-border"], [class*="border-nexus"]');
        const borderCount = await borderElements.count();
        
        // 繝・・繧ｿ繧ｳ繝斐・繝懊ち繝ｳ縺ｮ遒ｺ隱・
        const copyButton = modal.locator('button:has-text("繧ｳ繝斐・"), button:has-text("繝・・繧ｿ"), button[data-testid*="copy"]');
        if (await copyButton.first().isVisible()) {
          const buttonClass = await copyButton.first().getAttribute('class');
          expect(buttonClass).toMatch(/nexus-blue|blue/);
        }
        
        // 繝｢繝ｼ繝繝ｫ繧帝哩縺倥ｋ
        const closeButton = modal.locator('button:has-text("髢峨§繧・), button:has-text("繧ｭ繝｣繝ｳ繧ｻ繝ｫ")');
        if (await closeButton.first().isVisible()) {
          await closeButton.first().click();
        }
      }
    });

    test('SearchModal - 繧ｿ繧､繝昴げ繝ｩ繝輔ぅ菫ｮ豁｣', async ({ page }) => {
      await page.goto('/dashboard');
      
      // 讀懃ｴ｢繝｢繝ｼ繝繝ｫ繧帝幕縺擾ｼ・trl+K縺ｾ縺溘・讀懃ｴ｢繝懊ち繝ｳ・・
      await page.keyboard.press('Control+k');
      
      const modal = page.locator('[role="dialog"]');
      if (await modal.isVisible()) {
        // 讀懃ｴ｢蜈･蜉帙ヵ繧｣繝ｼ繝ｫ繝峨・遒ｺ隱・
        const searchInput = modal.locator('input[type="search"], input[placeholder*="讀懃ｴ｢"]');
        if (await searchInput.isVisible()) {
          await searchInput.fill('繝・せ繝・);
          
          // 讀懃ｴ｢邨先棡縺ｮ繧ｿ繧､繝昴げ繝ｩ繝輔ぅ遒ｺ隱・
          const resultTitles = modal.locator('.nexus-text-primary');
          const titleCount = await resultTitles.count();
          
          const resultDescriptions = modal.locator('.nexus-text-secondary');
          const descCount = await resultDescriptions.count();
          
          // 繧｢繧､繧ｳ繝ｳ縺ｮ遒ｺ隱・
          const icons = modal.locator('svg');
          const iconCount = await icons.count();
          expect(iconCount).toBeGreaterThan(0);
          
          // 繝ｭ繝ｼ繝・ぅ繝ｳ繧ｰ陦ｨ遉ｺ縺ｮ遒ｺ隱・
          const loadingElements = modal.locator('[class*="nexus-blue"], [class*="blue"]');
          const loadingCount = await loadingElements.count();
          
          // 繝帙ヰ繝ｼ蜉ｹ譫懊・遒ｺ隱・
          const hoverElements = modal.locator('[class*="nexus-bg-secondary"], [class*="hover"]');
          const hoverCount = await hoverElements.count();
        }
        
        // 繝｢繝ｼ繝繝ｫ繧帝哩縺倥ｋ・・scape繧ｭ繝ｼ・・
        await page.keyboard.press('Escape');
      } else {
        // 莉｣譖ｿ譁ｹ豕包ｼ壽､懃ｴ｢繝懊ち繝ｳ繧偵け繝ｪ繝・け
        const searchButton = page.locator('button:has-text("讀懃ｴ｢"), button[data-testid*="search"], [data-testid*="search"]');
        if (await searchButton.first().isVisible()) {
          await searchButton.first().click();
          
          const modal = page.locator('[role="dialog"]');
          if (await modal.isVisible()) {
            // 繧ｿ繧､繝昴げ繝ｩ繝輔ぅ縺ｮ遒ｺ隱・
            const textElements = modal.locator('.nexus-text-primary, .nexus-text-secondary');
            const textCount = await textElements.count();
            
            // 繝｢繝ｼ繝繝ｫ繧帝哩縺倥ｋ
            const closeButton = modal.locator('button:has-text("髢峨§繧・)');
            if (await closeButton.isVisible()) {
              await closeButton.click();
            } else {
              await page.keyboard.press('Escape');
            }
          }
        }
      }
    });
  });

  test.describe('剥 邨ｱ蜷医ユ繧ｹ繝・, () => {
    test('蜈ｨ霑ｽ蜉菫ｮ豁｣鬆・岼縺ｮ邨ｱ荳諤ｧ遒ｺ隱・, async ({ page }) => {
      const pages = ['/dashboard', '/inventory', '/settings'];
      
      for (const pagePath of pages) {
        await page.goto(pagePath);
        
        // 繝壹・繧ｸ縺梧ｭ｣蟶ｸ縺ｫ隱ｭ縺ｿ霎ｼ縺ｾ繧後ｋ縺薙→繧堤｢ｺ隱・
        await expect(page.locator('h1')).toBeVisible();
        
        // NexusButton縺ｮ遒ｺ隱・
        const buttons = page.locator('button');
        const buttonCount = await buttons.count();
        
        if (buttonCount > 0) {
          // 蟆代↑縺上→繧・縺､縺ｮNexusButton縺悟ｭ伜惠縺吶ｋ縺薙→繧堤｢ｺ隱・
          const nexusButtons = page.locator('button[class*="nexus-button"]');
          const nexusButtonCount = await nexusButtons.count();
          
          if (nexusButtonCount > 0) {
            console.log(`${pagePath}: NexusButton found: ${nexusButtonCount} buttons`);
          }
        }
        
        // 蜈･蜉帙ヵ繧｣繝ｼ繝ｫ繝峨・遒ｺ隱・
        const inputs = page.locator('input');
        const inputCount = await inputs.count();
        
        if (inputCount > 0) {
          // NexusInput縺ｮ遒ｺ隱・
          const nexusInputs = page.locator('input[class*="nexus-input"]');
          const nexusInputCount = await nexusInputs.count();
          
          if (nexusInputCount > 0) {
            console.log(`${pagePath}: NexusInput found: ${nexusInputCount} inputs`);
          }
        }
      }
    });

    test('繝｢繝ｼ繝繝ｫ陦ｨ遉ｺ讖溯・縺ｮ遒ｺ隱・, async ({ page }) => {
      await page.goto('/dashboard');
      
      // 蜷・ｨｮ繝｢繝ｼ繝繝ｫ繝懊ち繝ｳ縺ｮ蟄伜惠遒ｺ隱・
      const modalButtons = [
        'button:has-text("隧ｳ邏ｰ")',
        'button:has-text("險ｭ螳・)',
        'button:has-text("逋ｻ骭ｲ")',
        'button:has-text("QR")',
        'button:has-text("讀懃ｴ｢")'
      ];
      
      for (const buttonSelector of modalButtons) {
        const button = page.locator(buttonSelector);
        if (await button.first().isVisible()) {
          console.log(`Modal button found: ${buttonSelector}`);
          
          // 繝懊ち繝ｳ繧ｯ繝ｪ繝・け縺ｧ繝｢繝ｼ繝繝ｫ縺碁幕縺上％縺ｨ繧堤｢ｺ隱・
          await button.first().click();
          
          // 繝｢繝ｼ繝繝ｫ縺ｮ陦ｨ遉ｺ遒ｺ隱・
          const modal = page.locator('[role="dialog"]');
          if (await modal.isVisible()) {
            console.log(`Modal opened successfully for: ${buttonSelector}`);
            
            // 繝｢繝ｼ繝繝ｫ繧帝哩縺倥ｋ
            const closeButton = modal.locator('button:has-text("髢峨§繧・), button:has-text("繧ｭ繝｣繝ｳ繧ｻ繝ｫ")');
            if (await closeButton.first().isVisible()) {
              await closeButton.first().click();
            } else {
              await page.keyboard.press('Escape');
            }
          }
        }
      }
    });
  });
}); 
import { test, expect } from '@playwright/test';

test.describe('螳滄圀縺ｮUI謫堺ｽ・- 譛ｬ逡ｪ驕狗畑縺ｨ蜷後§繝懊ち繝ｳ謖吝虚繝・せ繝・, () => {
  test.beforeEach(async ({ page }) => {
    // 繝ｭ繧ｰ繧､繝ｳ蜃ｦ逅・
    await page.goto('/login');
    await page.click('[data-testid="seller-login"]');
    await page.click('button:has-text("繝ｭ繧ｰ繧､繝ｳ")');
    await page.waitForURL('/dashboard');
  });

  test.describe('櫨 螳滄圀縺ｮ繝懊ち繝ｳ謫堺ｽ懊ユ繧ｹ繝・, () => {
    test('繝繝・す繝･繝懊・繝・- 蜈ｨ繝懊ち繝ｳ縺ｮ螳滄圀縺ｮ謖吝虚遒ｺ隱・, async ({ page }) => {
      await page.goto('/dashboard');
      
      // 譛滄俣驕ｸ謚槭・繧ｿ繝ｳ繧偵け繝ｪ繝・け縺励※螳滄圀縺ｫ繝｢繝ｼ繝繝ｫ縺碁幕縺上°
      const periodButton = page.locator('button:has-text("譛滄俣驕ｸ謚・), button:has-text("譛滄俣縺ｧ繝輔ぅ繝ｫ繧ｿ繝ｼ")');
      if (await periodButton.first().isVisible()) {
        console.log('笨・譛滄俣驕ｸ謚槭・繧ｿ繝ｳ繧堤匱隕・);
        await periodButton.first().click();
        
        // 繝｢繝ｼ繝繝ｫ縺悟ｮ滄圀縺ｫ陦ｨ遉ｺ縺輔ｌ繧九°
        const modal = page.locator('[role="dialog"]');
        await expect(modal).toBeVisible({ timeout: 3000 });
        console.log('笨・譛滄俣驕ｸ謚槭Δ繝ｼ繝繝ｫ縺梧ｭ｣蟶ｸ縺ｫ陦ｨ遉ｺ');
        
        // 繝｢繝ｼ繝繝ｫ繧帝哩縺倥ｋ
        const closeButton = modal.locator('button:has-text("繧ｭ繝｣繝ｳ繧ｻ繝ｫ"), button:has-text("髢峨§繧・)');
        if (await closeButton.first().isVisible()) {
          await closeButton.first().click();
          console.log('笨・繝｢繝ｼ繝繝ｫ縺梧ｭ｣蟶ｸ縺ｫ髢峨§繧・);
        }
      }
      
      // 繝ｬ繝昴・繝医ム繧ｦ繝ｳ繝ｭ繝ｼ繝峨・繧ｿ繝ｳ縺ｮ螳滄圀縺ｮ謖吝虚
      const downloadButton = page.locator('button:has-text("繝ｬ繝昴・繝医ｒ繝繧ｦ繝ｳ繝ｭ繝ｼ繝・), button:has-text("繝繧ｦ繝ｳ繝ｭ繝ｼ繝・)');
      if (await downloadButton.first().isVisible()) {
        console.log('笨・繝繧ｦ繝ｳ繝ｭ繝ｼ繝峨・繧ｿ繝ｳ繧堤匱隕・);
        
        // 繝繧ｦ繝ｳ繝ｭ繝ｼ繝牙・逅・・髢句ｧ九ｒ逶｣隕・
        const downloadPromise = page.waitForEvent('download', { timeout: 5000 }).catch(() => null);
        await downloadButton.first().click();
        
        const download = await downloadPromise;
        if (download) {
          console.log('笨・繝繧ｦ繝ｳ繝ｭ繝ｼ繝峨′螳滄圀縺ｫ髢句ｧ九＆繧後◆');
        } else {
          console.log('笞・・繝繧ｦ繝ｳ繝ｭ繝ｼ繝峨・髢句ｧ九＆繧後↑縺九▲縺溘′縲√・繧ｿ繝ｳ縺ｯ蜿榊ｿ・);
        }
      }
    });

    test('蝨ｨ蠎ｫ邂｡逅・- 蜈ｨ繝懊ち繝ｳ縺ｮ螳滄圀縺ｮ謖吝虚遒ｺ隱・, async ({ page }) => {
      await page.goto('/inventory');
      
      // 譁ｰ隕丞膚蜩∫匳骭ｲ繝懊ち繝ｳ
      const registerButton = page.locator('button:has-text("譁ｰ隕丞膚蜩∫匳骭ｲ")');
      if (await registerButton.isVisible()) {
        console.log('笨・譁ｰ隕丞膚蜩∫匳骭ｲ繝懊ち繝ｳ繧堤匱隕・);
        await registerButton.click();
        
        const modal = page.locator('[role="dialog"]');
        await expect(modal).toBeVisible({ timeout: 3000 });
        console.log('笨・蝠・刀逋ｻ骭ｲ繝｢繝ｼ繝繝ｫ縺梧ｭ｣蟶ｸ縺ｫ陦ｨ遉ｺ');
        
        // 螳滄圀縺ｫ繝輔か繝ｼ繝蜈･蜉帙ｒ繝・せ繝・
        const productNameInput = modal.locator('input[placeholder*="蝠・刀蜷・], input[name*="name"]');
        if (await productNameInput.isVisible()) {
          await productNameInput.fill('繝・せ繝亥膚蜩・);
          const value = await productNameInput.inputValue();
          expect(value).toBe('繝・せ繝亥膚蜩・);
          console.log('笨・蝠・刀蜷榊・蜉帙′豁｣蟶ｸ縺ｫ蜍穂ｽ・);
        }
        
        // SKU蜈･蜉帙ユ繧ｹ繝・
        const skuInput = modal.locator('input[placeholder*="SKU"], input[name*="sku"]');
        if (await skuInput.isVisible()) {
          await skuInput.fill('TEST-001');
          const value = await skuInput.inputValue();
          expect(value).toBe('TEST-001');
          console.log('笨・SKU蜈･蜉帙′豁｣蟶ｸ縺ｫ蜍穂ｽ・);
        }
        
        // 繧ｫ繝・ざ繝ｪ繝ｼ驕ｸ謚槭ユ繧ｹ繝・
        const categorySelect = modal.locator('select[name*="category"], select');
        if (await categorySelect.first().isVisible()) {
          await categorySelect.first().selectOption({ index: 1 });
          console.log('笨・繧ｫ繝・ざ繝ｪ繝ｼ驕ｸ謚槭′豁｣蟶ｸ縺ｫ蜍穂ｽ・);
        }
        
        // 繝｢繝ｼ繝繝ｫ繧帝哩縺倥ｋ
        const closeButton = modal.locator('button:has-text("繧ｭ繝｣繝ｳ繧ｻ繝ｫ"), button:has-text("髢峨§繧・)');
        if (await closeButton.first().isVisible()) {
          await closeButton.first().click();
          console.log('笨・繝｢繝ｼ繝繝ｫ縺梧ｭ｣蟶ｸ縺ｫ髢峨§繧・);
        }
      }
      
      // CSV繧､繝ｳ繝昴・繝医・繧ｿ繝ｳ
      const csvImportButton = page.locator('button:has-text("CSV繧､繝ｳ繝昴・繝・)');
      if (await csvImportButton.isVisible()) {
        console.log('笨・CSV繧､繝ｳ繝昴・繝医・繧ｿ繝ｳ繧堤匱隕・);
        await csvImportButton.click();
        
        const modal = page.locator('[role="dialog"]');
        await expect(modal).toBeVisible({ timeout: 3000 });
        console.log('笨・CSV繧､繝ｳ繝昴・繝医Δ繝ｼ繝繝ｫ縺梧ｭ｣蟶ｸ縺ｫ陦ｨ遉ｺ');
        
        // 繝輔ぃ繧､繝ｫ蜈･蜉帙・遒ｺ隱・
        const fileInput = modal.locator('input[type="file"]');
        if (await fileInput.isVisible()) {
          console.log('笨・繝輔ぃ繧､繝ｫ驕ｸ謚槭ヵ繧｣繝ｼ繝ｫ繝峨′陦ｨ遉ｺ');
        }
        
        // 繝｢繝ｼ繝繝ｫ繧帝哩縺倥ｋ
        const closeButton = modal.locator('button:has-text("繧ｭ繝｣繝ｳ繧ｻ繝ｫ"), button:has-text("髢峨§繧・)');
        if (await closeButton.first().isVisible()) {
          await closeButton.first().click();
          console.log('笨・繝｢繝ｼ繝繝ｫ縺梧ｭ｣蟶ｸ縺ｫ髢峨§繧・);
        }
      }
      
      // CSV繧ｨ繧ｯ繧ｹ繝昴・繝医・繧ｿ繝ｳ
      const csvExportButton = page.locator('button:has-text("CSV繧ｨ繧ｯ繧ｹ繝昴・繝・)');
      if (await csvExportButton.isVisible()) {
        console.log('笨・CSV繧ｨ繧ｯ繧ｹ繝昴・繝医・繧ｿ繝ｳ繧堤匱隕・);
        
        const downloadPromise = page.waitForEvent('download', { timeout: 5000 }).catch(() => null);
        await csvExportButton.click();
        
        const download = await downloadPromise;
        if (download) {
          console.log('笨・CSV繧ｨ繧ｯ繧ｹ繝昴・繝医′螳滄圀縺ｫ髢句ｧ九＆繧後◆');
        } else {
          console.log('笞・・CSV繧ｨ繧ｯ繧ｹ繝昴・繝医・髢句ｧ九＆繧後↑縺九▲縺溘′縲√・繧ｿ繝ｳ縺ｯ蜿榊ｿ・);
        }
      }
    });

    test('繧ｹ繧ｿ繝・ヵ繝繝・す繝･繝懊・繝・- 隧ｳ邏ｰ繝懊ち繝ｳ縺ｮ螳滄圀縺ｮ謖吝虚遒ｺ隱・, async ({ page }) => {
      // 繧ｹ繧ｿ繝・ヵ繧｢繧ｫ繧ｦ繝ｳ繝医〒繝ｭ繧ｰ繧､繝ｳ
      await page.goto('/login');
      await page.click('[data-testid="staff-login"]');
      await page.click('button:has-text("繝ｭ繧ｰ繧､繝ｳ")');
      await page.waitForURL('/staff/dashboard');
      
      // 隧ｳ邏ｰ繝懊ち繝ｳ繧呈爾縺励※繧ｯ繝ｪ繝・け
      const detailButtons = page.locator('button:has-text("隧ｳ邏ｰ")');
      const detailButtonCount = await detailButtons.count();
      
      if (detailButtonCount > 0) {
        console.log(`笨・隧ｳ邏ｰ繝懊ち繝ｳ繧・{detailButtonCount}蛟狗匱隕義);
        
        // 譛蛻昴・隧ｳ邏ｰ繝懊ち繝ｳ繧偵け繝ｪ繝・け
        await detailButtons.first().click();
        
        // TaskDetailModal縺瑚｡ｨ遉ｺ縺輔ｌ繧九°遒ｺ隱・
        const modal = page.locator('[role="dialog"]');
        await expect(modal).toBeVisible({ timeout: 3000 });
        console.log('笨・繧ｿ繧ｹ繧ｯ隧ｳ邏ｰ繝｢繝ｼ繝繝ｫ縺梧ｭ｣蟶ｸ縺ｫ陦ｨ遉ｺ');
        
        // 繝｢繝ｼ繝繝ｫ蜀・・繧ｿ繝匁ｩ溯・繧偵ユ繧ｹ繝・
        const tabs = modal.locator('button:has-text("蝓ｺ譛ｬ諠・ｱ"), button:has-text("豺ｻ莉倥ヵ繧｡繧､繝ｫ"), button:has-text("繧ｳ繝｡繝ｳ繝・)');
        const tabCount = await tabs.count();
        
        if (tabCount > 0) {
          for (let i = 0; i < tabCount; i++) {
            await tabs.nth(i).click();
            console.log(`笨・繧ｿ繝・{i + 1}縺梧ｭ｣蟶ｸ縺ｫ蜍穂ｽ彖);
            await page.waitForTimeout(500); // 繧ｿ繝門・繧頑崛縺医・蠕・ｩ・
          }
        }
        
        // 邱ｨ髮・・繧ｿ繝ｳ縺ｮ繝・せ繝・
        const editButton = modal.locator('button:has-text("邱ｨ髮・)');
        if (await editButton.isVisible()) {
          await editButton.click();
          console.log('笨・邱ｨ髮・・繧ｿ繝ｳ縺梧ｭ｣蟶ｸ縺ｫ蜍穂ｽ・);
        }
        
        // 繝｢繝ｼ繝繝ｫ繧帝哩縺倥ｋ
        const closeButton = modal.locator('button:has-text("髢峨§繧・)');
        if (await closeButton.isVisible()) {
          await closeButton.click();
          console.log('笨・繝｢繝ｼ繝繝ｫ縺梧ｭ｣蟶ｸ縺ｫ髢峨§繧・);
        }
      } else {
        console.log('笶・隧ｳ邏ｰ繝懊ち繝ｳ縺瑚ｦ九▽縺九ｉ縺ｪ縺・);
      }
    });

    test('霑泌刀邂｡逅・- 隧ｳ邏ｰ繝懊ち繝ｳ縺ｮ螳滄圀縺ｮ謖吝虚遒ｺ隱・, async ({ page }) => {
      await page.goto('/returns');
      
      // 霑泌刀隧ｳ邏ｰ繝懊ち繝ｳ繧呈爾縺励※繧ｯ繝ｪ繝・け
      const detailButtons = page.locator('button:has-text("隧ｳ邏ｰ"), button[aria-label*="隧ｳ邏ｰ"], svg[data-icon="eye"]').locator('..');
      const detailButtonCount = await detailButtons.count();
      
      if (detailButtonCount > 0) {
        console.log(`笨・霑泌刀隧ｳ邏ｰ繝懊ち繝ｳ繧・{detailButtonCount}蛟狗匱隕義);
        
        // 譛蛻昴・隧ｳ邏ｰ繝懊ち繝ｳ繧偵け繝ｪ繝・け
        await detailButtons.first().click();
        
        // ReturnDetailModal縺瑚｡ｨ遉ｺ縺輔ｌ繧九°遒ｺ隱・
        const modal = page.locator('[role="dialog"]');
        await expect(modal).toBeVisible({ timeout: 3000 });
        console.log('笨・霑泌刀隧ｳ邏ｰ繝｢繝ｼ繝繝ｫ縺梧ｭ｣蟶ｸ縺ｫ陦ｨ遉ｺ');
        
        // 繝｢繝ｼ繝繝ｫ蜀・・諠・ｱ縺瑚｡ｨ遉ｺ縺輔ｌ縺ｦ縺・ｋ縺狗｢ｺ隱・
        const customerInfo = modal.locator('text=鬘ｧ螳｢諠・ｱ, text=縺雁ｮ｢讒・);
        if (await customerInfo.first().isVisible()) {
          console.log('笨・鬘ｧ螳｢諠・ｱ縺瑚｡ｨ遉ｺ縺輔ｌ縺ｦ縺・ｋ');
        }
        
        // 繧ｹ繝・・繧ｿ繧ｹ螟画峩繝懊ち繝ｳ縺ｮ繝・せ繝・
        const statusButtons = modal.locator('button:has-text("謇ｿ隱・), button:has-text("諡貞凄"), button:has-text("蜃ｦ逅・ｸｭ")');
        const statusButtonCount = await statusButtons.count();
        
        if (statusButtonCount > 0) {
          await statusButtons.first().click();
          console.log('笨・繧ｹ繝・・繧ｿ繧ｹ螟画峩繝懊ち繝ｳ縺梧ｭ｣蟶ｸ縺ｫ蜍穂ｽ・);
        }
        
        // 繝｢繝ｼ繝繝ｫ繧帝哩縺倥ｋ
        const closeButton = modal.locator('button:has-text("髢峨§繧・)');
        if (await closeButton.isVisible()) {
          await closeButton.click();
          console.log('笨・繝｢繝ｼ繝繝ｫ縺梧ｭ｣蟶ｸ縺ｫ髢峨§繧・);
        }
      } else {
        console.log('笶・霑泌刀隧ｳ邏ｰ繝懊ち繝ｳ縺瑚ｦ九▽縺九ｉ縺ｪ縺・);
      }
    });

    test('險ｭ螳夂判髱｢ - 蜈ｨ繝懊ち繝ｳ縺ｮ螳滄圀縺ｮ謖吝虚遒ｺ隱・, async ({ page }) => {
      await page.goto('/settings');
      
      // 驟埼∵･ｭ閠・ｨｭ螳壹・繧ｿ繝ｳ
      const carrierButton = page.locator('button:has-text("驟埼∵･ｭ閠・ｨｭ螳・), button:has-text("驟埼∬ｨｭ螳・)');
      if (await carrierButton.first().isVisible()) {
        console.log('笨・驟埼∵･ｭ閠・ｨｭ螳壹・繧ｿ繝ｳ繧堤匱隕・);
        await carrierButton.first().click();
        
        const modal = page.locator('[role="dialog"]');
        await expect(modal).toBeVisible({ timeout: 3000 });
        console.log('笨・驟埼∵･ｭ閠・ｨｭ螳壹Δ繝ｼ繝繝ｫ縺梧ｭ｣蟶ｸ縺ｫ陦ｨ遉ｺ');
        
        // 蜈･蜉帙ヵ繧｣繝ｼ繝ｫ繝峨・繝・せ繝・
        const inputs = modal.locator('input');
        const inputCount = await inputs.count();
        
        if (inputCount > 0) {
          await inputs.first().fill('繝・せ繝亥・蜉・);
          const value = await inputs.first().inputValue();
          expect(value).toBe('繝・せ繝亥・蜉・);
          console.log('笨・蜈･蜉帙ヵ繧｣繝ｼ繝ｫ繝峨′豁｣蟶ｸ縺ｫ蜍穂ｽ・);
        }
        
        // 繝｢繝ｼ繝繝ｫ繧帝哩縺倥ｋ
        const closeButton = modal.locator('button:has-text("繧ｭ繝｣繝ｳ繧ｻ繝ｫ"), button:has-text("髢峨§繧・)');
        if (await closeButton.first().isVisible()) {
          await closeButton.first().click();
          console.log('笨・繝｢繝ｼ繝繝ｫ縺梧ｭ｣蟶ｸ縺ｫ髢峨§繧・);
        }
      }
      
      // 繧ｨ繧ｯ繧ｹ繝昴・繝医・繧ｿ繝ｳ
      const exportButton = page.locator('button:has-text("繧ｨ繧ｯ繧ｹ繝昴・繝・)');
      if (await exportButton.isVisible()) {
        console.log('笨・繧ｨ繧ｯ繧ｹ繝昴・繝医・繧ｿ繝ｳ繧堤匱隕・);
        
        const downloadPromise = page.waitForEvent('download', { timeout: 5000 }).catch(() => null);
        await exportButton.click();
        
        const download = await downloadPromise;
        if (download) {
          console.log('笨・繧ｨ繧ｯ繧ｹ繝昴・繝医′螳滄圀縺ｫ髢句ｧ九＆繧後◆');
        } else {
          console.log('笞・・繧ｨ繧ｯ繧ｹ繝昴・繝医・髢句ｧ九＆繧後↑縺九▲縺溘′縲√・繧ｿ繝ｳ縺ｯ蜿榊ｿ・);
        }
      }
    });

    test('讀懃ｴ｢讖溯・ - 螳滄圀縺ｮ謖吝虚遒ｺ隱・, async ({ page }) => {
      await page.goto('/dashboard');
      
      // Ctrl+K縺ｧ讀懃ｴ｢繝｢繝ｼ繝繝ｫ繧帝幕縺・
      await page.keyboard.press('Control+k');
      
      const modal = page.locator('[role="dialog"]');
      if (await modal.isVisible()) {
        console.log('笨・讀懃ｴ｢繝｢繝ｼ繝繝ｫ縺後く繝ｼ繝懊・繝峨す繝ｧ繝ｼ繝医き繝・ヨ縺ｧ陦ｨ遉ｺ');
        
        // 讀懃ｴ｢蜈･蜉帙・繝・せ繝・
        const searchInput = modal.locator('input[type="search"], input[placeholder*="讀懃ｴ｢"]');
        if (await searchInput.isVisible()) {
          await searchInput.fill('繝・せ繝域､懃ｴ｢');
          const value = await searchInput.inputValue();
          expect(value).toBe('繝・せ繝域､懃ｴ｢');
          console.log('笨・讀懃ｴ｢蜈･蜉帙′豁｣蟶ｸ縺ｫ蜍穂ｽ・);
          
          // 讀懃ｴ｢邨先棡縺ｮ陦ｨ遉ｺ遒ｺ隱・
          await page.waitForTimeout(1000); // 讀懃ｴ｢蜃ｦ逅・・蠕・ｩ・
          const results = modal.locator('[data-testid*="result"], .search-result');
          const resultCount = await results.count();
          
          if (resultCount > 0) {
            console.log(`笨・讀懃ｴ｢邨先棡縺・{resultCount}莉ｶ陦ｨ遉ｺ`);
          } else {
            console.log('笞・・讀懃ｴ｢邨先棡縺ｯ陦ｨ遉ｺ縺輔ｌ縺ｪ縺九▲縺溘′縲∵､懃ｴ｢讖溯・縺ｯ蜍穂ｽ・);
          }
        }
        
        // Escape縺ｧ髢峨§繧・
        await page.keyboard.press('Escape');
        console.log('笨・讀懃ｴ｢繝｢繝ｼ繝繝ｫ縺窪scape縺ｧ髢峨§繧・);
      } else {
        // 莉｣譖ｿ譁ｹ豕包ｼ壽､懃ｴ｢繝懊ち繝ｳ繧偵け繝ｪ繝・け
        const searchButton = page.locator('button[data-testid*="search"], button:has-text("讀懃ｴ｢")');
        if (await searchButton.first().isVisible()) {
          await searchButton.first().click();
          console.log('笨・讀懃ｴ｢繝懊ち繝ｳ繧ｯ繝ｪ繝・け縺ｧ讀懃ｴ｢繝｢繝ｼ繝繝ｫ縺瑚｡ｨ遉ｺ');
        }
      }
    });
  });

  test.describe('識 譛ｬ逡ｪ驕狗畑繝ｬ繝吶Ν縺ｮ蜍穂ｽ懃｢ｺ隱・, () => {
    test('繝輔か繝ｼ繝騾∽ｿ｡ - 螳滄圀縺ｮ繝・・繧ｿ蜃ｦ逅・｢ｺ隱・, async ({ page }) => {
      await page.goto('/inventory');
      
      // 譁ｰ隕丞膚蜩∫匳骭ｲ縺ｮ螳悟・縺ｪ繝輔Ο繝ｼ
      const registerButton = page.locator('button:has-text("譁ｰ隕丞膚蜩∫匳骭ｲ")');
      if (await registerButton.isVisible()) {
        await registerButton.click();
        
        const modal = page.locator('[role="dialog"]');
        await expect(modal).toBeVisible();
        
        // 蠢・医ヵ繧｣繝ｼ繝ｫ繝峨・蜈･蜉・
        const productNameInput = modal.locator('input[placeholder*="蝠・刀蜷・], input[name*="name"]').first();
        if (await productNameInput.isVisible()) {
          await productNameInput.fill('螳滄圀縺ｮ繝・せ繝亥膚蜩・);
        }
        
        const skuInput = modal.locator('input[placeholder*="SKU"], input[name*="sku"]').first();
        if (await skuInput.isVisible()) {
          await skuInput.fill('REAL-TEST-001');
        }
        
        // 萓｡譬ｼ蜈･蜉・
        const priceInput = modal.locator('input[type="number"], input[placeholder*="萓｡譬ｼ"]').first();
        if (await priceInput.isVisible()) {
          await priceInput.fill('1000');
        }
        
        // 逋ｻ骭ｲ繝懊ち繝ｳ繧偵け繝ｪ繝・け
        const submitButton = modal.locator('button:has-text("逋ｻ骭ｲ"), button:has-text("菫晏ｭ・), button[type="submit"]');
        if (await submitButton.first().isVisible()) {
          await submitButton.first().click();
          console.log('笨・逋ｻ骭ｲ繝懊ち繝ｳ縺後け繝ｪ繝・け縺輔ｌ縺・);
          
          // 謌仙粥繝｡繝・そ繝ｼ繧ｸ縺ｾ縺溘・繝｢繝ｼ繝繝ｫ縺碁哩縺倥ｋ縺薙→繧堤｢ｺ隱・
          await page.waitForTimeout(2000);
          
          const isModalClosed = !(await modal.isVisible());
          if (isModalClosed) {
            console.log('笨・逋ｻ骭ｲ蜃ｦ逅・′螳御ｺ・＠縺ｦ繝｢繝ｼ繝繝ｫ縺碁哩縺倥◆');
          } else {
            console.log('笞・・繝｢繝ｼ繝繝ｫ縺ｯ髢九＞縺溘∪縺ｾ縺縺後∫匳骭ｲ繝懊ち繝ｳ縺ｯ蜍穂ｽ・);
          }
        }
      }
    });

    test('繝翫ン繧ｲ繝ｼ繧ｷ繝ｧ繝ｳ - 蜈ｨ繝壹・繧ｸ驕ｷ遘ｻ遒ｺ隱・, async ({ page }) => {
      const pages = [
        { name: '繝繝・す繝･繝懊・繝・, url: '/dashboard' },
        { name: '蝨ｨ蠎ｫ邂｡逅・, url: '/inventory' },
        { name: '螢ｲ荳顔ｮ｡逅・, url: '/sales' },
        { name: '隲区ｱらｮ｡逅・, url: '/billing' },
        { name: '邏榊刀邂｡逅・, url: '/delivery' },
        { name: '霑泌刀邂｡逅・, url: '/returns' },
        { name: '繝励Ο繝輔ぅ繝ｼ繝ｫ', url: '/profile' },
        { name: '險ｭ螳・, url: '/settings' },
        { name: '繧ｿ繧､繝繝ｩ繧､繝ｳ', url: '/timeline' }
      ];
      
      for (const pageInfo of pages) {
        await page.goto(pageInfo.url);
        
        // 繝壹・繧ｸ縺梧ｭ｣蟶ｸ縺ｫ隱ｭ縺ｿ霎ｼ縺ｾ繧後ｋ縺薙→繧堤｢ｺ隱・
        await expect(page.locator('h1')).toBeVisible({ timeout: 5000 });
        console.log(`笨・${pageInfo.name}繝壹・繧ｸ縺梧ｭ｣蟶ｸ縺ｫ陦ｨ遉ｺ`);
        
        // 繝壹・繧ｸ蝗ｺ譛峨・繝懊ち繝ｳ縺悟ｭ伜惠縺吶ｋ縺薙→繧堤｢ｺ隱・
        const buttons = page.locator('button');
        const buttonCount = await buttons.count();
        expect(buttonCount).toBeGreaterThan(0);
        console.log(`笨・${pageInfo.name}繝壹・繧ｸ縺ｫ${buttonCount}蛟九・繝懊ち繝ｳ縺悟ｭ伜惠`);
      }
    });
  });
}); 
import { test, expect } from '@playwright/test';

test.describe('櫨 謇句虚UI謫堺ｽ懊ユ繧ｹ繝・- 譛ｬ逡ｪ驕狗畑縺ｨ蜷後§謖吝虚遒ｺ隱・, () => {
  test('繧ｻ繝ｩ繝ｼ繝ｭ繧ｰ繧､繝ｳ 竊・繝繝・す繝･繝懊・繝・竊・蝨ｨ蠎ｫ邂｡逅・竊・蜷・・繧ｿ繝ｳ縺ｮ螳滄圀縺ｮ謖吝虚遒ｺ隱・, async ({ page }) => {
    // 繧ｻ繝ｩ繝ｼ繝ｭ繧ｰ繧､繝ｳ
    await page.goto('/login');
    await page.click('[data-testid="seller-login"]');
    await page.click('button:has-text("繝ｭ繧ｰ繧､繝ｳ")');
    await page.waitForURL('/dashboard');
    
    console.log('笨・繧ｻ繝ｩ繝ｼ繝ｭ繧ｰ繧､繝ｳ謌仙粥');
    
    // 繝繝・す繝･繝懊・繝峨〒繝懊ち繝ｳ縺ｮ遒ｺ隱・
    await page.waitForSelector('h1', { timeout: 10000 });
    const dashboardTitle = await page.locator('h1').textContent();
    console.log(`投 繝繝・す繝･繝懊・繝芽｡ｨ遉ｺ: ${dashboardTitle}`);
    
    // 蝨ｨ蠎ｫ邂｡逅・・繝ｼ繧ｸ縺ｸ驕ｷ遘ｻ
    await page.goto('/inventory');
    await page.waitForSelector('h1', { timeout: 10000 });
    const inventoryTitle = await page.locator('h1').textContent();
    console.log(`逃 蝨ｨ蠎ｫ邂｡逅・・繝ｼ繧ｸ陦ｨ遉ｺ: ${inventoryTitle}`);
    
    // 譁ｰ隕丞膚蜩∫匳骭ｲ繝懊ち繝ｳ縺ｮ遒ｺ隱・
    const registerButton = page.locator('button:has-text("譁ｰ隕丞膚蜩∫匳骭ｲ")');
    if (await registerButton.isVisible()) {
      console.log('笨・譁ｰ隕丞膚蜩∫匳骭ｲ繝懊ち繝ｳ逋ｺ隕・);
      await registerButton.click();
      
      // 繝｢繝ｼ繝繝ｫ縺碁幕縺上°繝√ぉ繝・け
      const modal = page.locator('[role="dialog"]');
      await modal.waitFor({ state: 'visible', timeout: 5000 });
      console.log('笨・蝠・刀逋ｻ骭ｲ繝｢繝ｼ繝繝ｫ縺碁幕縺・◆');
      
      // 繝輔か繝ｼ繝蜈･蜉帙ユ繧ｹ繝・
      const nameInput = modal.locator('input[name*="name"], input[placeholder*="蝠・刀蜷・]').first();
      if (await nameInput.isVisible()) {
        await nameInput.fill('螳滄圀縺ｮ繝・せ繝亥膚蜩・);
        console.log('笨・蝠・刀蜷榊・蜉帶・蜉・);
      }
      
      // 繝｢繝ｼ繝繝ｫ繧帝哩縺倥ｋ
      const closeButton = modal.locator('button:has-text("繧ｭ繝｣繝ｳ繧ｻ繝ｫ"), button:has-text("髢峨§繧・)').first();
      if (await closeButton.isVisible()) {
        await closeButton.click();
        console.log('笨・繝｢繝ｼ繝繝ｫ繧帝哩縺倥◆');
      }
    } else {
      console.log('笶・譁ｰ隕丞膚蜩∫匳骭ｲ繝懊ち繝ｳ縺瑚ｦ九▽縺九ｉ縺ｪ縺・);
    }
    
    // CSV繧､繝ｳ繝昴・繝医・繧ｿ繝ｳ縺ｮ遒ｺ隱・
    const csvImportButton = page.locator('button:has-text("CSV繧､繝ｳ繝昴・繝・)');
    if (await csvImportButton.isVisible()) {
      console.log('笨・CSV繧､繝ｳ繝昴・繝医・繧ｿ繝ｳ逋ｺ隕・);
      await csvImportButton.click();
      
      const modal = page.locator('[role="dialog"]');
      await modal.waitFor({ state: 'visible', timeout: 5000 });
      console.log('笨・CSV繧､繝ｳ繝昴・繝医Δ繝ｼ繝繝ｫ縺碁幕縺・◆');
      
      // 繝｢繝ｼ繝繝ｫ繧帝哩縺倥ｋ
      const closeButton = modal.locator('button:has-text("繧ｭ繝｣繝ｳ繧ｻ繝ｫ"), button:has-text("髢峨§繧・)').first();
      if (await closeButton.isVisible()) {
        await closeButton.click();
        console.log('笨・繝｢繝ｼ繝繝ｫ繧帝哩縺倥◆');
      }
    } else {
      console.log('笶・CSV繧､繝ｳ繝昴・繝医・繧ｿ繝ｳ縺瑚ｦ九▽縺九ｉ縺ｪ縺・);
    }
    
    // 蜈ｨ繝懊ち繝ｳ縺ｮ謨ｰ繧偵き繧ｦ繝ｳ繝・
    const allButtons = page.locator('button');
    const buttonCount = await allButtons.count();
    console.log(`投 蝨ｨ蠎ｫ邂｡逅・・繝ｼ繧ｸ縺ｮ繝懊ち繝ｳ邱乗焚: ${buttonCount}蛟義);
    
    expect(buttonCount).toBeGreaterThan(0);
  });

  test('繧ｹ繧ｿ繝・ヵ繝ｭ繧ｰ繧､繝ｳ 竊・繧ｹ繧ｿ繝・ヵ繝繝・す繝･繝懊・繝・竊・隧ｳ邏ｰ繝懊ち繝ｳ縺ｮ螳滄圀縺ｮ謖吝虚遒ｺ隱・, async ({ page }) => {
    // 繧ｹ繧ｿ繝・ヵ繝ｭ繧ｰ繧､繝ｳ
    await page.goto('/login');
    await page.click('[data-testid="staff-login"]');
    await page.click('button:has-text("繝ｭ繧ｰ繧､繝ｳ")');
    await page.waitForURL('/staff/dashboard');
    
    console.log('笨・繧ｹ繧ｿ繝・ヵ繝ｭ繧ｰ繧､繝ｳ謌仙粥');
    
    // 繧ｹ繧ｿ繝・ヵ繝繝・す繝･繝懊・繝峨〒繧ｿ繧ｹ繧ｯ繝ｪ繧ｹ繝医・遒ｺ隱・
    await page.waitForSelector('h1', { timeout: 10000 });
    const dashboardTitle = await page.locator('h1').textContent();
    console.log(`則 繧ｹ繧ｿ繝・ヵ繝繝・す繝･繝懊・繝芽｡ｨ遉ｺ: ${dashboardTitle}`);
    
    // 繝・・繧ｿ縺瑚ｪｭ縺ｿ霎ｼ縺ｾ繧後ｋ縺ｾ縺ｧ蠕・ｩ・
    await page.waitForTimeout(3000);
    
    // 繧ｿ繧ｹ繧ｯ繝・・繝悶Ν縺ｮ遒ｺ隱・
    const taskTable = page.locator('table, [data-testid*="table"], .holo-table');
    if (await taskTable.isVisible()) {
      console.log('笨・繧ｿ繧ｹ繧ｯ繝・・繝悶Ν逋ｺ隕・);
      
      // 隧ｳ邏ｰ繝懊ち繝ｳ繧呈爾縺・
      const detailButtons = page.locator('button:has-text("隧ｳ邏ｰ")');
      const detailButtonCount = await detailButtons.count();
      console.log(`投 隧ｳ邏ｰ繝懊ち繝ｳ謨ｰ: ${detailButtonCount}蛟義);
      
      if (detailButtonCount > 0) {
        // 譛蛻昴・隧ｳ邏ｰ繝懊ち繝ｳ繧偵け繝ｪ繝・け
        await detailButtons.first().click();
        console.log('笨・隧ｳ邏ｰ繝懊ち繝ｳ繧ｯ繝ｪ繝・け');
        
        // TaskDetailModal縺碁幕縺上°繝√ぉ繝・け
        const modal = page.locator('[role="dialog"]');
        await modal.waitFor({ state: 'visible', timeout: 5000 });
        console.log('笨・繧ｿ繧ｹ繧ｯ隧ｳ邏ｰ繝｢繝ｼ繝繝ｫ縺碁幕縺・◆');
        
        // 繝｢繝ｼ繝繝ｫ蜀・ｮｹ縺ｮ遒ｺ隱・
        const modalTitle = modal.locator('h2, h3').first();
        if (await modalTitle.isVisible()) {
          const title = await modalTitle.textContent();
          console.log(`搭 繝｢繝ｼ繝繝ｫ繧ｿ繧､繝医Ν: ${title}`);
        }
        
        // 繝｢繝ｼ繝繝ｫ繧帝哩縺倥ｋ
        const closeButton = modal.locator('button:has-text("髢峨§繧・)').first();
        if (await closeButton.isVisible()) {
          await closeButton.click();
          console.log('笨・繝｢繝ｼ繝繝ｫ繧帝哩縺倥◆');
        }
      } else {
        console.log('笶・隧ｳ邏ｰ繝懊ち繝ｳ縺瑚ｦ九▽縺九ｉ縺ｪ縺・);
      }
    } else {
      console.log('笶・繧ｿ繧ｹ繧ｯ繝・・繝悶Ν縺瑚ｦ九▽縺九ｉ縺ｪ縺・);
    }
    
    // 譁ｰ隕上ち繧ｹ繧ｯ菴懈・繝懊ち繝ｳ縺ｮ遒ｺ隱・
    const createTaskButton = page.locator('button:has-text("譁ｰ隕上ち繧ｹ繧ｯ菴懈・"), button:has-text("譁ｰ隕丈ｽ懈・")');
    if (await createTaskButton.isVisible()) {
      console.log('笨・譁ｰ隕上ち繧ｹ繧ｯ菴懈・繝懊ち繝ｳ逋ｺ隕・);
      await createTaskButton.click();
      
      const modal = page.locator('[role="dialog"]');
      await modal.waitFor({ state: 'visible', timeout: 5000 });
      console.log('笨・繧ｿ繧ｹ繧ｯ菴懈・繝｢繝ｼ繝繝ｫ縺碁幕縺・◆');
      
      // 繝｢繝ｼ繝繝ｫ繧帝哩縺倥ｋ
      const closeButton = modal.locator('button:has-text("繧ｭ繝｣繝ｳ繧ｻ繝ｫ"), button:has-text("髢峨§繧・)').first();
      if (await closeButton.isVisible()) {
        await closeButton.click();
        console.log('笨・繝｢繝ｼ繝繝ｫ繧帝哩縺倥◆');
      }
    } else {
      console.log('笶・譁ｰ隕上ち繧ｹ繧ｯ菴懈・繝懊ち繝ｳ縺瑚ｦ九▽縺九ｉ縺ｪ縺・);
    }
    
    // 蜈ｨ繝懊ち繝ｳ縺ｮ謨ｰ繧偵き繧ｦ繝ｳ繝・
    const allButtons = page.locator('button');
    const buttonCount = await allButtons.count();
    console.log(`投 繧ｹ繧ｿ繝・ヵ繝繝・す繝･繝懊・繝峨・繝懊ち繝ｳ邱乗焚: ${buttonCount}蛟義);
    
    expect(buttonCount).toBeGreaterThan(0);
  });

  test('霑泌刀邂｡逅・竊・隧ｳ邏ｰ繝懊ち繝ｳ縺ｮ螳滄圀縺ｮ謖吝虚遒ｺ隱・, async ({ page }) => {
    // 繧ｻ繝ｩ繝ｼ繝ｭ繧ｰ繧､繝ｳ
    await page.goto('/login');
    await page.click('[data-testid="seller-login"]');
    await page.click('button:has-text("繝ｭ繧ｰ繧､繝ｳ")');
    await page.waitForURL('/dashboard');
    
    // 霑泌刀邂｡逅・・繝ｼ繧ｸ縺ｸ驕ｷ遘ｻ
    await page.goto('/returns');
    await page.waitForSelector('h1', { timeout: 10000 });
    const returnsTitle = await page.locator('h1').textContent();
    console.log(`売 霑泌刀邂｡逅・・繝ｼ繧ｸ陦ｨ遉ｺ: ${returnsTitle}`);
    
    // 繝・・繧ｿ縺瑚ｪｭ縺ｿ霎ｼ縺ｾ繧後ｋ縺ｾ縺ｧ蠕・ｩ・
    await page.waitForTimeout(3000);
    
    // 霑泌刀隧ｳ邏ｰ繝懊ち繝ｳ繧呈爾縺呻ｼ医い繧､繧ｳ繝ｳ繝懊ち繝ｳ繧ょ性繧・・
    const detailButtons = page.locator('button:has-text("隧ｳ邏ｰ"), button[aria-label*="隧ｳ邏ｰ"], svg[data-icon="eye"]').locator('..');
    const detailButtonCount = await detailButtons.count();
    console.log(`投 霑泌刀隧ｳ邏ｰ繝懊ち繝ｳ謨ｰ: ${detailButtonCount}蛟義);
    
    if (detailButtonCount > 0) {
      // 譛蛻昴・隧ｳ邏ｰ繝懊ち繝ｳ繧偵け繝ｪ繝・け
      await detailButtons.first().click();
      console.log('笨・霑泌刀隧ｳ邏ｰ繝懊ち繝ｳ繧ｯ繝ｪ繝・け');
      
      // ReturnDetailModal縺碁幕縺上°繝√ぉ繝・け
      const modal = page.locator('[role="dialog"]');
      await modal.waitFor({ state: 'visible', timeout: 5000 });
      console.log('笨・霑泌刀隧ｳ邏ｰ繝｢繝ｼ繝繝ｫ縺碁幕縺・◆');
      
      // 繝｢繝ｼ繝繝ｫ蜀・ｮｹ縺ｮ遒ｺ隱・
      const modalContent = modal.locator('div').first();
      if (await modalContent.isVisible()) {
        console.log('笨・霑泌刀隧ｳ邏ｰ諠・ｱ縺瑚｡ｨ遉ｺ縺輔ｌ縺ｦ縺・ｋ');
      }
      
      // 繝｢繝ｼ繝繝ｫ繧帝哩縺倥ｋ
      const closeButton = modal.locator('button:has-text("髢峨§繧・)').first();
      if (await closeButton.isVisible()) {
        await closeButton.click();
        console.log('笨・繝｢繝ｼ繝繝ｫ繧帝哩縺倥◆');
      }
    } else {
      console.log('笶・霑泌刀隧ｳ邏ｰ繝懊ち繝ｳ縺瑚ｦ九▽縺九ｉ縺ｪ縺・);
    }
    
    // 霑泌刀逋ｻ骭ｲ繝懊ち繝ｳ縺ｮ遒ｺ隱・
    const returnRegistrationButton = page.locator('button:has-text("霑泌刀逋ｻ骭ｲ"), button:has-text("譁ｰ隕剰ｿ泌刀")');
    if (await returnRegistrationButton.isVisible()) {
      console.log('笨・霑泌刀逋ｻ骭ｲ繝懊ち繝ｳ逋ｺ隕・);
      await returnRegistrationButton.click();
      
      const modal = page.locator('[role="dialog"]');
      await modal.waitFor({ state: 'visible', timeout: 5000 });
      console.log('笨・霑泌刀逋ｻ骭ｲ繝｢繝ｼ繝繝ｫ縺碁幕縺・◆');
      
      // 繝｢繝ｼ繝繝ｫ繧帝哩縺倥ｋ
      const closeButton = modal.locator('button:has-text("繧ｭ繝｣繝ｳ繧ｻ繝ｫ"), button:has-text("髢峨§繧・)').first();
      if (await closeButton.isVisible()) {
        await closeButton.click();
        console.log('笨・繝｢繝ｼ繝繝ｫ繧帝哩縺倥◆');
      }
    } else {
      console.log('笶・霑泌刀逋ｻ骭ｲ繝懊ち繝ｳ縺瑚ｦ九▽縺九ｉ縺ｪ縺・);
    }
    
    // 蜈ｨ繝懊ち繝ｳ縺ｮ謨ｰ繧偵き繧ｦ繝ｳ繝・
    const allButtons = page.locator('button');
    const buttonCount = await allButtons.count();
    console.log(`投 霑泌刀邂｡逅・・繝ｼ繧ｸ縺ｮ繝懊ち繝ｳ邱乗焚: ${buttonCount}蛟義);
    
    expect(buttonCount).toBeGreaterThan(0);
  });

  test('險ｭ螳夂判髱｢ 竊・蜈ｨ繝懊ち繝ｳ縺ｮ螳滄圀縺ｮ謖吝虚遒ｺ隱・, async ({ page }) => {
    // 繧ｻ繝ｩ繝ｼ繝ｭ繧ｰ繧､繝ｳ
    await page.goto('/login');
    await page.click('[data-testid="seller-login"]');
    await page.click('button:has-text("繝ｭ繧ｰ繧､繝ｳ")');
    await page.waitForURL('/dashboard');
    
    // 險ｭ螳壹・繝ｼ繧ｸ縺ｸ驕ｷ遘ｻ
    await page.goto('/settings');
    await page.waitForSelector('h1', { timeout: 10000 });
    const settingsTitle = await page.locator('h1').textContent();
    console.log(`笞呻ｸ・險ｭ螳壹・繝ｼ繧ｸ陦ｨ遉ｺ: ${settingsTitle}`);
    
    // 驟埼∵･ｭ閠・ｨｭ螳壹・繧ｿ繝ｳ縺ｮ遒ｺ隱・
    const carrierButton = page.locator('button:has-text("驟埼∵･ｭ閠・ｨｭ螳・), button:has-text("驟埼∬ｨｭ螳・)');
    if (await carrierButton.isVisible()) {
      console.log('笨・驟埼∵･ｭ閠・ｨｭ螳壹・繧ｿ繝ｳ逋ｺ隕・);
      await carrierButton.click();
      
      const modal = page.locator('[role="dialog"]');
      await modal.waitFor({ state: 'visible', timeout: 5000 });
      console.log('笨・驟埼∵･ｭ閠・ｨｭ螳壹Δ繝ｼ繝繝ｫ縺碁幕縺・◆');
      
      // 繝｢繝ｼ繝繝ｫ繧帝哩縺倥ｋ
      const closeButton = modal.locator('button:has-text("繧ｭ繝｣繝ｳ繧ｻ繝ｫ"), button:has-text("髢峨§繧・)').first();
      if (await closeButton.isVisible()) {
        await closeButton.click();
        console.log('笨・繝｢繝ｼ繝繝ｫ繧帝哩縺倥◆');
      }
    } else {
      console.log('笶・驟埼∵･ｭ閠・ｨｭ螳壹・繧ｿ繝ｳ縺瑚ｦ九▽縺九ｉ縺ｪ縺・);
    }
    
    // 譴ｱ蛹・攝險ｭ螳壹・繧ｿ繝ｳ縺ｮ遒ｺ隱・
    const packingButton = page.locator('button:has-text("譴ｱ蛹・攝險ｭ螳・), button:has-text("譴ｱ蛹・ｨｭ螳・)');
    if (await packingButton.isVisible()) {
      console.log('笨・譴ｱ蛹・攝險ｭ螳壹・繧ｿ繝ｳ逋ｺ隕・);
      await packingButton.click();
      
      const modal = page.locator('[role="dialog"]');
      await modal.waitFor({ state: 'visible', timeout: 5000 });
      console.log('笨・譴ｱ蛹・攝險ｭ螳壹Δ繝ｼ繝繝ｫ縺碁幕縺・◆');
      
      // 繝｢繝ｼ繝繝ｫ繧帝哩縺倥ｋ
      const closeButton = modal.locator('button:has-text("繧ｭ繝｣繝ｳ繧ｻ繝ｫ"), button:has-text("髢峨§繧・)').first();
      if (await closeButton.isVisible()) {
        await closeButton.click();
        console.log('笨・繝｢繝ｼ繝繝ｫ繧帝哩縺倥◆');
      }
    } else {
      console.log('笶・譴ｱ蛹・攝險ｭ螳壹・繧ｿ繝ｳ縺瑚ｦ九▽縺九ｉ縺ｪ縺・);
    }
    
    // 蜈ｨ繝懊ち繝ｳ縺ｮ謨ｰ繧偵き繧ｦ繝ｳ繝・
    const allButtons = page.locator('button');
    const buttonCount = await allButtons.count();
    console.log(`投 險ｭ螳壹・繝ｼ繧ｸ縺ｮ繝懊ち繝ｳ邱乗焚: ${buttonCount}蛟義);
    
    expect(buttonCount).toBeGreaterThan(0);
  });

  test('識 螳滄圀縺ｮ繝輔か繝ｼ繝騾∽ｿ｡繝・せ繝・, async ({ page }) => {
    // 繧ｻ繝ｩ繝ｼ繝ｭ繧ｰ繧､繝ｳ
    await page.goto('/login');
    await page.click('[data-testid="seller-login"]');
    await page.click('button:has-text("繝ｭ繧ｰ繧､繝ｳ")');
    await page.waitForURL('/dashboard');
    
    // 蝨ｨ蠎ｫ邂｡逅・・繝ｼ繧ｸ縺ｧ譁ｰ隕丞膚蜩∫匳骭ｲ
    await page.goto('/inventory');
    await page.waitForSelector('h1', { timeout: 10000 });
    
    const registerButton = page.locator('button:has-text("譁ｰ隕丞膚蜩∫匳骭ｲ")');
    if (await registerButton.isVisible()) {
      await registerButton.click();
      
      const modal = page.locator('[role="dialog"]');
      await modal.waitFor({ state: 'visible', timeout: 5000 });
      
      // 螳滄圀縺ｮ繝輔か繝ｼ繝蜈･蜉・
      const nameInput = modal.locator('input[name*="name"], input[placeholder*="蝠・刀蜷・]').first();
      if (await nameInput.isVisible()) {
        await nameInput.fill('螳滄圀縺ｮ繝・せ繝亥膚蜩・);
        console.log('笨・蝠・刀蜷榊・蜉・ 螳滄圀縺ｮ繝・せ繝亥膚蜩・);
      }
      
      const skuInput = modal.locator('input[name*="sku"], input[placeholder*="SKU"]').first();
      if (await skuInput.isVisible()) {
        await skuInput.fill('REAL-TEST-001');
        console.log('笨・SKU蜈･蜉・ REAL-TEST-001');
      }
      
      const priceInput = modal.locator('input[type="number"], input[name*="price"]').first();
      if (await priceInput.isVisible()) {
        await priceInput.fill('1000');
        console.log('笨・萓｡譬ｼ蜈･蜉・ 1000');
      }
      
      // 逋ｻ骭ｲ繝懊ち繝ｳ繧偵け繝ｪ繝・け
      const submitButton = modal.locator('button:has-text("逋ｻ骭ｲ"), button:has-text("菫晏ｭ・), button[type="submit"]').first();
      if (await submitButton.isVisible()) {
        await submitButton.click();
        console.log('笨・逋ｻ骭ｲ繝懊ち繝ｳ繧ｯ繝ｪ繝・け');
        
        // 蜃ｦ逅・ｮ御ｺ・・遒ｺ隱搾ｼ医Δ繝ｼ繝繝ｫ縺碁哩縺倥ｋ縺九ヨ繝ｼ繧ｹ繝医′陦ｨ遉ｺ縺輔ｌ繧具ｼ・
        await page.waitForTimeout(2000);
        
        const isModalClosed = !(await modal.isVisible());
        if (isModalClosed) {
          console.log('笨・逋ｻ骭ｲ蜃ｦ逅・ｮ御ｺ・ｼ医Δ繝ｼ繝繝ｫ縺碁哩縺倥◆・・);
        } else {
          console.log('笞・・繝｢繝ｼ繝繝ｫ縺ｯ髢九＞縺溘∪縺ｾ縺縺後∫匳骭ｲ繝懊ち繝ｳ縺ｯ蜍穂ｽ・);
        }
      }
    }
    
    console.log('識 螳滄圀縺ｮ繝輔か繝ｼ繝騾∽ｿ｡繝・せ繝亥ｮ御ｺ・);
  });
}); 
import { test, expect } from '@playwright/test';

test.describe('櫨 蠕ｹ蠎慕噪繝舌げ繝上Φ繝・ぅ繝ｳ繧ｰ - 譛ｬ逡ｪ驕狗畑繝ｬ繝吶ΝUI/UX繝・せ繝・, () => {
  
  test.beforeEach(async ({ page }) => {
    // 繧｢繝励Μ繧ｱ繝ｼ繧ｷ繝ｧ繝ｳ縺悟ｮ滄圀縺ｫ襍ｷ蜍輔＠縺ｦ縺・ｋ縺九ｒ遒ｺ隱・
    await page.goto('/login', { waitUntil: 'networkidle' });
    await page.waitForTimeout(2000); // 遒ｺ螳溘↓隱ｭ縺ｿ霎ｼ縺ｿ螳御ｺ・ｒ蠕・▽
  });

  test('圷 繝ｭ繧ｰ繧､繝ｳ逕ｻ髱｢ - 螳滄圀縺ｮ繝舌げ逋ｺ隕九ユ繧ｹ繝・, async ({ page }) => {
    console.log('=== 繝ｭ繧ｰ繧､繝ｳ逕ｻ髱｢繝舌げ繝上Φ繝・ぅ繝ｳ繧ｰ髢句ｧ・===');
    
    // 1. 繝壹・繧ｸ縺梧ｭ｣蟶ｸ縺ｫ隱ｭ縺ｿ霎ｼ縺ｾ繧後※縺・ｋ縺・
    const title = await page.title();
    console.log(`繝壹・繧ｸ繧ｿ繧､繝医Ν: ${title}`);
    
    // 2. 蠢・ｦ√↑隕∫ｴ縺悟ｭ伜惠縺吶ｋ縺・
    const sellerButton = page.locator('[data-testid="seller-login"]');
    const staffButton = page.locator('[data-testid="staff-login"]');
    const loginButton = page.locator('button:has-text("繝ｭ繧ｰ繧､繝ｳ")');
    
    const sellerExists = await sellerButton.isVisible();
    const staffExists = await staffButton.isVisible();
    const loginExists = await loginButton.isVisible();
    
    console.log(`繧ｻ繝ｩ繝ｼ繝ｭ繧ｰ繧､繝ｳ繝懊ち繝ｳ蟄伜惠: ${sellerExists}`);
    console.log(`繧ｹ繧ｿ繝・ヵ繝ｭ繧ｰ繧､繝ｳ繝懊ち繝ｳ蟄伜惠: ${staffExists}`);
    console.log(`繝ｭ繧ｰ繧､繝ｳ繝懊ち繝ｳ蟄伜惠: ${loginExists}`);
    
    if (!sellerExists) {
      console.log('圷 繝舌げ逋ｺ隕・ 繧ｻ繝ｩ繝ｼ繝ｭ繧ｰ繧､繝ｳ繝懊ち繝ｳ縺悟ｭ伜惠縺励↑縺・);
    }
    if (!staffExists) {
      console.log('圷 繝舌げ逋ｺ隕・ 繧ｹ繧ｿ繝・ヵ繝ｭ繧ｰ繧､繝ｳ繝懊ち繝ｳ縺悟ｭ伜惠縺励↑縺・);
    }
    if (!loginExists) {
      console.log('圷 繝舌げ逋ｺ隕・ 繝ｭ繧ｰ繧､繝ｳ繝懊ち繝ｳ縺悟ｭ伜惠縺励↑縺・);
    }
    
    // 3. 螳滄圀縺ｫ繧ｯ繝ｪ繝・け縺ｧ縺阪ｋ縺・
    if (sellerExists) {
      await sellerButton.click();
      await page.waitForTimeout(1000);
      
      const emailValue = await page.locator('input[type="email"]').inputValue();
      const passwordValue = await page.locator('input[type="password"]').inputValue();
      
      console.log(`繧ｻ繝ｩ繝ｼ繝ｭ繧ｰ繧､繝ｳ蠕・- Email: ${emailValue}, Password: ${passwordValue}`);
      
      if (emailValue !== 'seller@example.com') {
        console.log('圷 繝舌げ逋ｺ隕・ 繧ｻ繝ｩ繝ｼ繝ｭ繧ｰ繧､繝ｳ繝懊ち繝ｳ縺窪mail繧呈ｭ｣縺励￥險ｭ螳壹＠縺ｦ縺・↑縺・);
      }
      if (passwordValue !== 'password123') {
        console.log('圷 繝舌げ逋ｺ隕・ 繧ｻ繝ｩ繝ｼ繝ｭ繧ｰ繧､繝ｳ繝懊ち繝ｳ縺訓assword繧呈ｭ｣縺励￥險ｭ螳壹＠縺ｦ縺・↑縺・);
      }
    }
    
    // 4. 螳滄圀縺ｮ繝ｭ繧ｰ繧､繝ｳ蜃ｦ逅・
    if (loginExists) {
      await loginButton.click();
      await page.waitForTimeout(3000);
      
      const currentUrl = page.url();
      console.log(`繝ｭ繧ｰ繧､繝ｳ蠕袈RL: ${currentUrl}`);
      
      if (!currentUrl.includes('/dashboard')) {
        console.log('圷 繝舌げ逋ｺ隕・ 繝ｭ繧ｰ繧､繝ｳ蠕後↓繝繝・す繝･繝懊・繝峨↓驕ｷ遘ｻ縺励※縺・↑縺・);
      }
    }
  });

  test('圷 繝繝・す繝･繝懊・繝・- 螳滄圀縺ｮ繝舌げ逋ｺ隕九ユ繧ｹ繝・, async ({ page }) => {
    console.log('=== 繝繝・す繝･繝懊・繝峨ヰ繧ｰ繝上Φ繝・ぅ繝ｳ繧ｰ髢句ｧ・===');
    
    // 繝ｭ繧ｰ繧､繝ｳ蜃ｦ逅・
    await page.click('[data-testid="seller-login"]');
    await page.click('button:has-text("繝ｭ繧ｰ繧､繝ｳ")');
    await page.waitForURL('/dashboard');
    await page.waitForTimeout(3000);
    
    // 1. 繝壹・繧ｸ隱ｭ縺ｿ霎ｼ縺ｿ遒ｺ隱・
    const h1 = page.locator('h1');
    const h1Text = await h1.textContent();
    console.log(`繝繝・す繝･繝懊・繝峨ち繧､繝医Ν: ${h1Text}`);
    
    // 2. 蜈ｨ繝懊ち繝ｳ縺ｮ蟄伜惠遒ｺ隱・
    const allButtons = page.locator('button');
    const buttonCount = await allButtons.count();
    console.log(`繝繝・す繝･繝懊・繝峨・繧ｿ繝ｳ邱乗焚: ${buttonCount}蛟義);
    
    // 3. 蜷・・繧ｿ繝ｳ繧貞ｮ滄圀縺ｫ繧ｯ繝ｪ繝・け縺励※繝舌げ遒ｺ隱・
    for (let i = 0; i < Math.min(buttonCount, 10); i++) {
      const button = allButtons.nth(i);
      const buttonText = await button.textContent();
      const isVisible = await button.isVisible();
      const isEnabled = await button.isEnabled();
      
      console.log(`繝懊ち繝ｳ${i + 1}: "${buttonText}" - 陦ｨ遉ｺ:${isVisible}, 譛牙柑:${isEnabled}`);
      
      if (isVisible && isEnabled && buttonText) {
        try {
          await button.click();
          await page.waitForTimeout(1000);
          
          // 繝｢繝ｼ繝繝ｫ縺碁幕縺・◆縺狗｢ｺ隱・
          const modal = page.locator('[role="dialog"]');
          const modalVisible = await modal.isVisible();
          
          if (modalVisible) {
            console.log(`笨・繝懊ち繝ｳ"${buttonText}"縺ｯ繝｢繝ｼ繝繝ｫ繧呈ｭ｣蟶ｸ縺ｫ髢九＞縺歔);
            
            // 繝｢繝ｼ繝繝ｫ繧帝哩縺倥ｋ
            const closeButton = modal.locator('button:has-text("繧ｭ繝｣繝ｳ繧ｻ繝ｫ"), button:has-text("髢峨§繧・)').first();
            if (await closeButton.isVisible()) {
              await closeButton.click();
              await page.waitForTimeout(500);
            } else {
              // Escape縺ｧ髢峨§繧・
              await page.keyboard.press('Escape');
              await page.waitForTimeout(500);
            }
          } else {
            console.log(`笞・・繝懊ち繝ｳ"${buttonText}"繧ｯ繝ｪ繝・け蠕後↓繝｢繝ｼ繝繝ｫ縺碁幕縺九↑縺Я);
          }
        } catch (error) {
          console.log(`圷 繝舌げ逋ｺ隕・ 繝懊ち繝ｳ"${buttonText}"繧ｯ繝ｪ繝・け譎ゅ↓繧ｨ繝ｩ繝ｼ: ${error}`);
        }
      } else {
        console.log(`圷 繝舌げ逋ｺ隕・ 繝懊ち繝ｳ"${buttonText}"縺檎┌蜉ｹ縺ｾ縺溘・繧ｯ繝ｪ繝・け縺ｧ縺阪↑縺Я);
      }
    }
    
    // 4. API繧ｨ繝ｩ繝ｼ縺ｮ遒ｺ隱・
    const apiErrors: string[] = [];
    page.on('response', response => {
      if (response.status() >= 400) {
        apiErrors.push(`${response.status()} ${response.url()}`);
      }
    });
    
    await page.waitForTimeout(2000);
    
    if (apiErrors.length > 0) {
      console.log('圷 API 繧ｨ繝ｩ繝ｼ逋ｺ隕・');
      apiErrors.forEach(error => console.log(`  - ${error}`));
    }
  });

  test('圷 蝨ｨ蠎ｫ邂｡逅・判髱｢ - 螳滄圀縺ｮ繝舌げ逋ｺ隕九ユ繧ｹ繝・, async ({ page }) => {
    console.log('=== 蝨ｨ蠎ｫ邂｡逅・判髱｢繝舌げ繝上Φ繝・ぅ繝ｳ繧ｰ髢句ｧ・===');
    
    // 繝ｭ繧ｰ繧､繝ｳ蜃ｦ逅・
    await page.click('[data-testid="seller-login"]');
    await page.click('button:has-text("繝ｭ繧ｰ繧､繝ｳ")');
    await page.waitForURL('/dashboard');
    
    // 蝨ｨ蠎ｫ邂｡逅・・繝ｼ繧ｸ縺ｸ
    await page.goto('/inventory');
    await page.waitForTimeout(3000);
    
    // 1. 譁ｰ隕丞膚蜩∫匳骭ｲ繝懊ち繝ｳ縺ｮ繝・せ繝・
    const registerButton = page.locator('button:has-text("譁ｰ隕丞膚蜩∫匳骭ｲ")');
    const registerExists = await registerButton.isVisible();
    console.log(`譁ｰ隕丞膚蜩∫匳骭ｲ繝懊ち繝ｳ蟄伜惠: ${registerExists}`);
    
    if (registerExists) {
      await registerButton.click();
      await page.waitForTimeout(2000);
      
      const modal = page.locator('[role="dialog"]');
      const modalVisible = await modal.isVisible();
      console.log(`蝠・刀逋ｻ骭ｲ繝｢繝ｼ繝繝ｫ陦ｨ遉ｺ: ${modalVisible}`);
      
      if (modalVisible) {
        // 繝輔か繝ｼ繝隕∫ｴ縺ｮ遒ｺ隱・
        const nameInput = modal.locator('input[name*="name"], input[placeholder*="蝠・刀蜷・]').first();
        const skuInput = modal.locator('input[name*="sku"], input[placeholder*="SKU"]').first();
        const priceInput = modal.locator('input[type="number"], input[name*="price"]').first();
        
        const nameExists = await nameInput.isVisible();
        const skuExists = await skuInput.isVisible();
        const priceExists = await priceInput.isVisible();
        
        console.log(`蝠・刀蜷榊・蜉帙ヵ繧｣繝ｼ繝ｫ繝・ ${nameExists}`);
        console.log(`SKU蜈･蜉帙ヵ繧｣繝ｼ繝ｫ繝・ ${skuExists}`);
        console.log(`萓｡譬ｼ蜈･蜉帙ヵ繧｣繝ｼ繝ｫ繝・ ${priceExists}`);
        
        // 螳滄圀縺ｮ蜈･蜉帙ユ繧ｹ繝・
        if (nameExists) {
          await nameInput.fill('繝・せ繝亥膚蜩・);
          const nameValue = await nameInput.inputValue();
          if (nameValue !== '繝・せ繝亥膚蜩・) {
            console.log('圷 繝舌げ逋ｺ隕・ 蝠・刀蜷榊・蜉帙ヵ繧｣繝ｼ繝ｫ繝峨′豁｣蟶ｸ縺ｫ蜍穂ｽ懊＠縺ｪ縺・);
          }
        }
        
        if (skuExists) {
          await skuInput.fill('TEST-001');
          const skuValue = await skuInput.inputValue();
          if (skuValue !== 'TEST-001') {
            console.log('圷 繝舌げ逋ｺ隕・ SKU蜈･蜉帙ヵ繧｣繝ｼ繝ｫ繝峨′豁｣蟶ｸ縺ｫ蜍穂ｽ懊＠縺ｪ縺・);
          }
        }
        
        if (priceExists) {
          await priceInput.fill('1000');
          const priceValue = await priceInput.inputValue();
          if (priceValue !== '1000') {
            console.log('圷 繝舌げ逋ｺ隕・ 萓｡譬ｼ蜈･蜉帙ヵ繧｣繝ｼ繝ｫ繝峨′豁｣蟶ｸ縺ｫ蜍穂ｽ懊＠縺ｪ縺・);
          }
        }
        
        // 菫晏ｭ倥・繧ｿ繝ｳ縺ｮ繝・せ繝・
        const saveButton = modal.locator('button:has-text("逋ｻ骭ｲ"), button:has-text("菫晏ｭ・), button[type="submit"]').first();
        const saveExists = await saveButton.isVisible();
        console.log(`菫晏ｭ倥・繧ｿ繝ｳ蟄伜惠: ${saveExists}`);
        
        if (saveExists) {
          await saveButton.click();
          await page.waitForTimeout(3000);
          
          const modalStillVisible = await modal.isVisible();
          console.log(`菫晏ｭ伜ｾ後Δ繝ｼ繝繝ｫ迥ｶ諷・ ${modalStillVisible ? '髢九＞縺ｦ縺・ｋ' : '髢峨§縺ｦ縺・ｋ'}`);
          
          if (modalStillVisible) {
            console.log('笞・・菫晏ｭ伜ｾ後ｂ繝｢繝ｼ繝繝ｫ縺碁幕縺・※縺・ｋ・医ヰ繝ｪ繝・・繧ｷ繝ｧ繝ｳ繧ｨ繝ｩ繝ｼ縺ｾ縺溘・蜃ｦ逅・悴螳御ｺ・ｼ・);
          }
        } else {
          console.log('圷 繝舌げ逋ｺ隕・ 菫晏ｭ倥・繧ｿ繝ｳ縺悟ｭ伜惠縺励↑縺・);
        }
        
        // 繝｢繝ｼ繝繝ｫ繧帝哩縺倥ｋ
        const closeButton = modal.locator('button:has-text("繧ｭ繝｣繝ｳ繧ｻ繝ｫ"), button:has-text("髢峨§繧・)').first();
        if (await closeButton.isVisible()) {
          await closeButton.click();
        } else {
          await page.keyboard.press('Escape');
        }
      } else {
        console.log('圷 繝舌げ逋ｺ隕・ 譁ｰ隕丞膚蜩∫匳骭ｲ繝懊ち繝ｳ繧偵け繝ｪ繝・け縺励※繧ゅΔ繝ｼ繝繝ｫ縺碁幕縺九↑縺・);
      }
    } else {
      console.log('圷 繝舌げ逋ｺ隕・ 譁ｰ隕丞膚蜩∫匳骭ｲ繝懊ち繝ｳ縺悟ｭ伜惠縺励↑縺・);
    }
    
    // 2. CSV繧､繝ｳ繝昴・繝医・繧ｿ繝ｳ縺ｮ繝・せ繝・
    const csvImportButton = page.locator('button:has-text("CSV繧､繝ｳ繝昴・繝・)');
    const csvImportExists = await csvImportButton.isVisible();
    console.log(`CSV繧､繝ｳ繝昴・繝医・繧ｿ繝ｳ蟄伜惠: ${csvImportExists}`);
    
    if (csvImportExists) {
      await csvImportButton.click();
      await page.waitForTimeout(2000);
      
      const modal = page.locator('[role="dialog"]');
      const modalVisible = await modal.isVisible();
      
      if (!modalVisible) {
        console.log('圷 繝舌げ逋ｺ隕・ CSV繧､繝ｳ繝昴・繝医・繧ｿ繝ｳ繧偵け繝ｪ繝・け縺励※繧ゅΔ繝ｼ繝繝ｫ縺碁幕縺九↑縺・);
      } else {
        console.log('笨・CSV繧､繝ｳ繝昴・繝医Δ繝ｼ繝繝ｫ縺梧ｭ｣蟶ｸ縺ｫ髢九＞縺・);
        
        // 繝輔ぃ繧､繝ｫ蜈･蜉帙・遒ｺ隱・
        const fileInput = modal.locator('input[type="file"]');
        const fileInputExists = await fileInput.isVisible();
        console.log(`繝輔ぃ繧､繝ｫ蜈･蜉帙ヵ繧｣繝ｼ繝ｫ繝牙ｭ伜惠: ${fileInputExists}`);
        
        if (!fileInputExists) {
          console.log('圷 繝舌げ逋ｺ隕・ CSV繧､繝ｳ繝昴・繝医Δ繝ｼ繝繝ｫ縺ｫ繝輔ぃ繧､繝ｫ蜈･蜉帙ヵ繧｣繝ｼ繝ｫ繝峨′縺ｪ縺・);
        }
        
        // 繝｢繝ｼ繝繝ｫ繧帝哩縺倥ｋ
        const closeButton = modal.locator('button:has-text("繧ｭ繝｣繝ｳ繧ｻ繝ｫ"), button:has-text("髢峨§繧・)').first();
        if (await closeButton.isVisible()) {
          await closeButton.click();
        } else {
          await page.keyboard.press('Escape');
        }
      }
    } else {
      console.log('圷 繝舌げ逋ｺ隕・ CSV繧､繝ｳ繝昴・繝医・繧ｿ繝ｳ縺悟ｭ伜惠縺励↑縺・);
    }
  });

  test('圷 繧ｹ繧ｿ繝・ヵ繝繝・す繝･繝懊・繝・- 隧ｳ邏ｰ繝懊ち繝ｳ繝舌げ繝上Φ繝・ぅ繝ｳ繧ｰ', async ({ page }) => {
    console.log('=== 繧ｹ繧ｿ繝・ヵ繝繝・す繝･繝懊・繝芽ｩｳ邏ｰ繝懊ち繝ｳ繝舌げ繝上Φ繝・ぅ繝ｳ繧ｰ髢句ｧ・===');
    
    // 繧ｹ繧ｿ繝・ヵ繝ｭ繧ｰ繧､繝ｳ
    await page.click('[data-testid="staff-login"]');
    await page.click('button:has-text("繝ｭ繧ｰ繧､繝ｳ")');
    await page.waitForURL('/staff/dashboard');
    await page.waitForTimeout(5000); // 繝・・繧ｿ隱ｭ縺ｿ霎ｼ縺ｿ蠕・ｩ・
    
    // 繧ｿ繧ｹ繧ｯ繝・・繝悶Ν縺ｮ遒ｺ隱・
    const taskTable = page.locator('table, [data-testid*="table"], .holo-table');
    const tableExists = await taskTable.isVisible();
    console.log(`繧ｿ繧ｹ繧ｯ繝・・繝悶Ν蟄伜惠: ${tableExists}`);
    
    if (!tableExists) {
      console.log('圷 繝舌げ逋ｺ隕・ 繧ｿ繧ｹ繧ｯ繝・・繝悶Ν縺悟ｭ伜惠縺励↑縺・);
      return;
    }
    
    // 隧ｳ邏ｰ繝懊ち繝ｳ縺ｮ遒ｺ隱・
    const detailButtons = page.locator('button:has-text("隧ｳ邏ｰ")');
    const detailButtonCount = await detailButtons.count();
    console.log(`隧ｳ邏ｰ繝懊ち繝ｳ謨ｰ: ${detailButtonCount}蛟義);
    
    if (detailButtonCount === 0) {
      console.log('圷 繝舌げ逋ｺ隕・ 隧ｳ邏ｰ繝懊ち繝ｳ縺・縺､繧ょｭ伜惠縺励↑縺・);
      
      // 繝・・繝悶Ν蜀・ｮｹ繧定ｩｳ縺励￥隱ｿ譟ｻ
      const tableContent = await taskTable.textContent();
      console.log(`繝・・繝悶Ν蜀・ｮｹ: ${tableContent?.substring(0, 200)}...`);
      
      // 縺吶∋縺ｦ縺ｮ繝懊ち繝ｳ繧定ｪｿ譟ｻ
      const allButtons = taskTable.locator('button');
      const allButtonCount = await allButtons.count();
      console.log(`繝・・繝悶Ν蜀・・繧ｿ繝ｳ邱乗焚: ${allButtonCount}蛟義);
      
      for (let i = 0; i < Math.min(allButtonCount, 5); i++) {
        const button = allButtons.nth(i);
        const buttonText = await button.textContent();
        console.log(`繝・・繝悶Ν蜀・・繧ｿ繝ｳ${i + 1}: "${buttonText}"`);
      }
    } else {
      // 隧ｳ邏ｰ繝懊ち繝ｳ繧偵け繝ｪ繝・け縺励※繝・せ繝・
      const firstDetailButton = detailButtons.first();
      await firstDetailButton.click();
      await page.waitForTimeout(2000);
      
      const modal = page.locator('[role="dialog"]');
      const modalVisible = await modal.isVisible();
      console.log(`隧ｳ邏ｰ繝｢繝ｼ繝繝ｫ陦ｨ遉ｺ: ${modalVisible}`);
      
      if (!modalVisible) {
        console.log('圷 繝舌げ逋ｺ隕・ 隧ｳ邏ｰ繝懊ち繝ｳ繧偵け繝ｪ繝・け縺励※繧ゅΔ繝ｼ繝繝ｫ縺碁幕縺九↑縺・);
      } else {
        console.log('笨・隧ｳ邏ｰ繝懊ち繝ｳ縺梧ｭ｣蟶ｸ縺ｫ蜍穂ｽ・);
        
        // 繝｢繝ｼ繝繝ｫ蜀・ｮｹ縺ｮ遒ｺ隱・
        const modalTitle = modal.locator('h1, h2, h3').first();
        const titleExists = await modalTitle.isVisible();
        console.log(`繝｢繝ｼ繝繝ｫ繧ｿ繧､繝医Ν蟄伜惠: ${titleExists}`);
        
        if (titleExists) {
          const titleText = await modalTitle.textContent();
          console.log(`繝｢繝ｼ繝繝ｫ繧ｿ繧､繝医Ν: ${titleText}`);
        }
        
        // 繧ｿ繝匁ｩ溯・縺ｮ繝・せ繝・
        const tabs = modal.locator('button:has-text("隧ｳ邏ｰ"), button:has-text("螻･豁ｴ"), button:has-text("豺ｻ莉・)');
        const tabCount = await tabs.count();
        console.log(`繧ｿ繝匁焚: ${tabCount}蛟義);
        
        if (tabCount > 0) {
          for (let i = 0; i < tabCount; i++) {
            const tab = tabs.nth(i);
            const tabText = await tab.textContent();
            console.log(`繧ｿ繝・{i + 1}繧偵ユ繧ｹ繝・ "${tabText}"`);
            
            await tab.click();
            await page.waitForTimeout(1000);
            
            // 繧ｿ繝悶さ繝ｳ繝・Φ繝・′陦ｨ遉ｺ縺輔ｌ縺ｦ縺・ｋ縺狗｢ｺ隱・
            const tabContent = modal.locator('[role="tabpanel"], .tab-content');
            const contentVisible = await tabContent.isVisible();
            console.log(`繧ｿ繝・{i + 1}繧ｳ繝ｳ繝・Φ繝・｡ｨ遉ｺ: ${contentVisible}`);
          }
        }
        
        // 繝｢繝ｼ繝繝ｫ繧帝哩縺倥ｋ
        const closeButton = modal.locator('button:has-text("髢峨§繧・)').first();
        if (await closeButton.isVisible()) {
          await closeButton.click();
        } else {
          await page.keyboard.press('Escape');
        }
      }
    }
  });

  test('圷 霑泌刀邂｡逅・判髱｢ - 隧ｳ邏ｰ繝懊ち繝ｳ繝舌げ繝上Φ繝・ぅ繝ｳ繧ｰ', async ({ page }) => {
    console.log('=== 霑泌刀邂｡逅・判髱｢隧ｳ邏ｰ繝懊ち繝ｳ繝舌げ繝上Φ繝・ぅ繝ｳ繧ｰ髢句ｧ・===');
    
    // 繧ｻ繝ｩ繝ｼ繝ｭ繧ｰ繧､繝ｳ
    await page.click('[data-testid="seller-login"]');
    await page.click('button:has-text("繝ｭ繧ｰ繧､繝ｳ")');
    await page.waitForURL('/dashboard');
    
    // 霑泌刀邂｡逅・・繝ｼ繧ｸ縺ｸ
    await page.goto('/returns');
    await page.waitForTimeout(3000);
    
    // 霑泌刀隧ｳ邏ｰ繝懊ち繝ｳ縺ｮ遒ｺ隱搾ｼ郁､・焚縺ｮ蜿ｯ閭ｽ諤ｧ繧定ｪｿ譟ｻ・・
    const detailButtons = page.locator('button:has-text("隧ｳ邏ｰ"), button[aria-label*="隧ｳ邏ｰ"], svg[data-icon="eye"]').locator('..');
    const iconButtons = page.locator('button svg[data-icon="eye"]').locator('..');
    const allButtons = page.locator('button');
    
    const detailButtonCount = await detailButtons.count();
    const iconButtonCount = await iconButtons.count();
    const allButtonCount = await allButtons.count();
    
    console.log(`隧ｳ邏ｰ繝懊ち繝ｳ謨ｰ: ${detailButtonCount}蛟義);
    console.log(`繧｢繧､繧ｳ繝ｳ繝懊ち繝ｳ謨ｰ: ${iconButtonCount}蛟義);
    console.log(`蜈ｨ繝懊ち繝ｳ謨ｰ: ${allButtonCount}蛟義);
    
    // 蜈ｨ繝懊ち繝ｳ縺ｮ蜀・ｮｹ繧定ｪｿ譟ｻ
    for (let i = 0; i < Math.min(allButtonCount, 10); i++) {
      const button = allButtons.nth(i);
      const buttonText = await button.textContent();
      const buttonHTML = await button.innerHTML();
      console.log(`繝懊ち繝ｳ${i + 1}: 繝・く繧ｹ繝・"${buttonText}", HTML="${buttonHTML.substring(0, 50)}..."`);
    }
    
    if (detailButtonCount === 0 && iconButtonCount === 0) {
      console.log('圷 繝舌げ逋ｺ隕・ 霑泌刀隧ｳ邏ｰ繝懊ち繝ｳ縺・縺､繧ょｭ伜惠縺励↑縺・);
      
      // 繝・・繝悶Ν縺ｾ縺溘・繝ｪ繧ｹ繝医・蜀・ｮｹ繧定ｪｿ譟ｻ
      const tables = page.locator('table');
      const tableCount = await tables.count();
      console.log(`繝・・繝悶Ν謨ｰ: ${tableCount}蛟義);
      
      if (tableCount > 0) {
        const tableContent = await tables.first().textContent();
        console.log(`繝・・繝悶Ν蜀・ｮｹ: ${tableContent?.substring(0, 200)}...`);
      }
    } else {
      // 隧ｳ邏ｰ繝懊ち繝ｳ縺ｾ縺溘・繧｢繧､繧ｳ繝ｳ繝懊ち繝ｳ繧偵け繝ｪ繝・け
      const targetButton = detailButtonCount > 0 ? detailButtons.first() : iconButtons.first();
      
      await targetButton.click();
      await page.waitForTimeout(2000);
      
      const modal = page.locator('[role="dialog"]');
      const modalVisible = await modal.isVisible();
      console.log(`霑泌刀隧ｳ邏ｰ繝｢繝ｼ繝繝ｫ陦ｨ遉ｺ: ${modalVisible}`);
      
      if (!modalVisible) {
        console.log('圷 繝舌げ逋ｺ隕・ 霑泌刀隧ｳ邏ｰ繝懊ち繝ｳ繧偵け繝ｪ繝・け縺励※繧ゅΔ繝ｼ繝繝ｫ縺碁幕縺九↑縺・);
      } else {
        console.log('笨・霑泌刀隧ｳ邏ｰ繝懊ち繝ｳ縺梧ｭ｣蟶ｸ縺ｫ蜍穂ｽ・);
        
        // 繝｢繝ｼ繝繝ｫ蜀・ｮｹ縺ｮ遒ｺ隱・
        const modalContent = modal.locator('div').first();
        const contentExists = await modalContent.isVisible();
        console.log(`繝｢繝ｼ繝繝ｫ蜀・ｮｹ蟄伜惠: ${contentExists}`);
        
        if (contentExists) {
          const content = await modalContent.textContent();
          console.log(`繝｢繝ｼ繝繝ｫ蜀・ｮｹ: ${content?.substring(0, 100)}...`);
        }
        
        // 繝｢繝ｼ繝繝ｫ繧帝哩縺倥ｋ
        const closeButton = modal.locator('button:has-text("髢峨§繧・)').first();
        if (await closeButton.isVisible()) {
          await closeButton.click();
        } else {
          await page.keyboard.press('Escape');
        }
      }
    }
  });

  test('圷 險ｭ螳夂判髱｢ - 蜈ｨ讖溯・繝舌げ繝上Φ繝・ぅ繝ｳ繧ｰ', async ({ page }) => {
    console.log('=== 險ｭ螳夂判髱｢蜈ｨ讖溯・繝舌げ繝上Φ繝・ぅ繝ｳ繧ｰ髢句ｧ・===');
    
    // 繧ｻ繝ｩ繝ｼ繝ｭ繧ｰ繧､繝ｳ
    await page.click('[data-testid="seller-login"]');
    await page.click('button:has-text("繝ｭ繧ｰ繧､繝ｳ")');
    await page.waitForURL('/dashboard');
    
    // 險ｭ螳壹・繝ｼ繧ｸ縺ｸ
    await page.goto('/settings');
    await page.waitForTimeout(3000);
    
    // 蜈ｨ繝懊ち繝ｳ縺ｮ隧ｳ邏ｰ隱ｿ譟ｻ
    const allButtons = page.locator('button');
    const buttonCount = await allButtons.count();
    console.log(`險ｭ螳夂判髱｢繝懊ち繝ｳ邱乗焚: ${buttonCount}蛟義);
    
    const buttonTests = [
      { name: '驟埼∵･ｭ閠・ｨｭ螳・, selector: 'button:has-text("驟埼∵･ｭ閠・ｨｭ螳・), button:has-text("驟埼∬ｨｭ螳・)' },
      { name: '譴ｱ蛹・攝險ｭ螳・, selector: 'button:has-text("譴ｱ蛹・攝險ｭ螳・), button:has-text("譴ｱ蛹・ｨｭ螳・)' },
      { name: '繧ｨ繧ｯ繧ｹ繝昴・繝・, selector: 'button:has-text("繧ｨ繧ｯ繧ｹ繝昴・繝・)' },
      { name: '菫晏ｭ・, selector: 'button:has-text("菫晏ｭ・)' },
      { name: '譖ｴ譁ｰ', selector: 'button:has-text("譖ｴ譁ｰ")' }
    ];
    
    for (const buttonTest of buttonTests) {
      console.log(`--- ${buttonTest.name}繝懊ち繝ｳ繝・せ繝・---`);
      
      const button = page.locator(buttonTest.selector).first();
      const buttonExists = await button.isVisible();
      console.log(`${buttonTest.name}繝懊ち繝ｳ蟄伜惠: ${buttonExists}`);
      
      if (buttonExists) {
        const isEnabled = await button.isEnabled();
        console.log(`${buttonTest.name}繝懊ち繝ｳ譛牙柑: ${isEnabled}`);
        
        if (isEnabled) {
          await button.click();
          await page.waitForTimeout(2000);
          
          // 繝｢繝ｼ繝繝ｫ縺ｾ縺溘・繝繧ｦ繝ｳ繝ｭ繝ｼ繝峨・遒ｺ隱・
          const modal = page.locator('[role="dialog"]');
          const modalVisible = await modal.isVisible();
          
          if (modalVisible) {
            console.log(`笨・${buttonTest.name}繝懊ち繝ｳ縺後Δ繝ｼ繝繝ｫ繧呈ｭ｣蟶ｸ縺ｫ髢九＞縺歔);
            
            // 繝｢繝ｼ繝繝ｫ蜀・ｮｹ縺ｮ遒ｺ隱・
            const modalTitle = modal.locator('h1, h2, h3').first();
            if (await modalTitle.isVisible()) {
              const titleText = await modalTitle.textContent();
              console.log(`繝｢繝ｼ繝繝ｫ繧ｿ繧､繝医Ν: ${titleText}`);
            }
            
            // 繝｢繝ｼ繝繝ｫ蜀・・繝輔か繝ｼ繝隕∫ｴ遒ｺ隱・
            const inputs = modal.locator('input');
            const selects = modal.locator('select');
            const textareas = modal.locator('textarea');
            
            const inputCount = await inputs.count();
            const selectCount = await selects.count();
            const textareaCount = await textareas.count();
            
            console.log(`繝輔か繝ｼ繝隕∫ｴ - input:${inputCount}, select:${selectCount}, textarea:${textareaCount}`);
            
            // 蜈･蜉帙ユ繧ｹ繝・
            if (inputCount > 0) {
              const firstInput = inputs.first();
              const inputType = await firstInput.getAttribute('type');
              console.log(`譛蛻昴・蜈･蜉帙ヵ繧｣繝ｼ繝ｫ繝峨ち繧､繝・ ${inputType}`);
              
              if (inputType !== 'file') {
                await firstInput.fill('繝・せ繝亥・蜉・);
                const inputValue = await firstInput.inputValue();
                if (inputValue !== '繝・せ繝亥・蜉・) {
                  console.log('圷 繝舌げ逋ｺ隕・ 蜈･蜉帙ヵ繧｣繝ｼ繝ｫ繝峨′豁｣蟶ｸ縺ｫ蜍穂ｽ懊＠縺ｪ縺・);
                } else {
                  console.log('笨・蜈･蜉帙ヵ繧｣繝ｼ繝ｫ繝画ｭ｣蟶ｸ蜍穂ｽ・);
                }
              }
            }
            
            // 繝｢繝ｼ繝繝ｫ繧帝哩縺倥ｋ
            const closeButton = modal.locator('button:has-text("繧ｭ繝｣繝ｳ繧ｻ繝ｫ"), button:has-text("髢峨§繧・)').first();
            if (await closeButton.isVisible()) {
              await closeButton.click();
            } else {
              await page.keyboard.press('Escape');
            }
            await page.waitForTimeout(1000);
          } else {
            console.log(`笞・・${buttonTest.name}繝懊ち繝ｳ繧ｯ繝ｪ繝・け蠕後↓繝｢繝ｼ繝繝ｫ縺碁幕縺九↑縺・ｼ医ム繧ｦ繝ｳ繝ｭ繝ｼ繝峨∪縺溘・莉悶・蜃ｦ逅・ｼ荏);
          }
        } else {
          console.log(`圷 繝舌げ逋ｺ隕・ ${buttonTest.name}繝懊ち繝ｳ縺檎┌蜉ｹ迥ｶ諷義);
        }
      } else {
        console.log(`圷 繝舌げ逋ｺ隕・ ${buttonTest.name}繝懊ち繝ｳ縺悟ｭ伜惠縺励↑縺Я);
      }
    }
  });

  test('圷 蜈ｨ繝壹・繧ｸ繝翫ン繧ｲ繝ｼ繧ｷ繝ｧ繝ｳ - 螳滄圀縺ｮ繝舌げ逋ｺ隕九ユ繧ｹ繝・, async ({ page }) => {
    console.log('=== 蜈ｨ繝壹・繧ｸ繝翫ン繧ｲ繝ｼ繧ｷ繝ｧ繝ｳ繝舌げ繝上Φ繝・ぅ繝ｳ繧ｰ髢句ｧ・===');
    
    // 繧ｻ繝ｩ繝ｼ繝ｭ繧ｰ繧､繝ｳ
    await page.click('[data-testid="seller-login"]');
    await page.click('button:has-text("繝ｭ繧ｰ繧､繝ｳ")');
    await page.waitForURL('/dashboard');
    
    const pages = [
      { name: '繝繝・す繝･繝懊・繝・, url: '/dashboard' },
      { name: '蝨ｨ蠎ｫ邂｡逅・, url: '/inventory' },
      { name: '螢ｲ荳顔ｮ｡逅・, url: '/sales' },
      { name: '隲区ｱらｮ｡逅・, url: '/billing' },
      { name: '邏榊刀邂｡逅・, url: '/delivery' },
      { name: '霑泌刀邂｡逅・, url: '/returns' },
      { name: '繝励Ο繝輔ぅ繝ｼ繝ｫ', url: '/profile' },
      { name: '險ｭ螳・, url: '/settings' },
      { name: '繧ｿ繧､繝繝ｩ繧､繝ｳ', url: '/timeline' }
    ];
    
    for (const pageInfo of pages) {
      console.log(`--- ${pageInfo.name}繝壹・繧ｸ繝・せ繝・---`);
      
      try {
        await page.goto(pageInfo.url);
        await page.waitForTimeout(3000);
        
        // 繝壹・繧ｸ隱ｭ縺ｿ霎ｼ縺ｿ遒ｺ隱・
        const currentUrl = page.url();
        console.log(`迴ｾ蝨ｨURL: ${currentUrl}`);
        
        if (!currentUrl.includes(pageInfo.url)) {
          console.log(`圷 繝舌げ逋ｺ隕・ ${pageInfo.name}繝壹・繧ｸ縺ｫ豁｣縺励￥驕ｷ遘ｻ縺励※縺・↑縺Я);
          continue;
        }
        
        // 繝壹・繧ｸ繧ｿ繧､繝医Ν遒ｺ隱・
        const h1 = page.locator('h1');
        const h1Exists = await h1.isVisible();
        if (h1Exists) {
          const h1Text = await h1.textContent();
          console.log(`${pageInfo.name}繧ｿ繧､繝医Ν: ${h1Text}`);
        } else {
          console.log(`圷 繝舌げ逋ｺ隕・ ${pageInfo.name}繝壹・繧ｸ縺ｫh1繧ｿ繧､繝医Ν縺悟ｭ伜惠縺励↑縺Я);
        }
        
        // 繝懊ち繝ｳ謨ｰ遒ｺ隱・
        const buttons = page.locator('button');
        const buttonCount = await buttons.count();
        console.log(`${pageInfo.name}繝懊ち繝ｳ謨ｰ: ${buttonCount}蛟義);
        
        if (buttonCount === 0) {
          console.log(`圷 繝舌げ逋ｺ隕・ ${pageInfo.name}繝壹・繧ｸ縺ｫ繝懊ち繝ｳ縺・縺､繧ゅ↑縺Я);
        }
        
        // 繧ｨ繝ｩ繝ｼ繝｡繝・そ繝ｼ繧ｸ縺ｮ遒ｺ隱・
        const errorMessages = page.locator('[role="alert"], .error, .alert-error');
        const errorCount = await errorMessages.count();
        if (errorCount > 0) {
          console.log(`圷 繝舌げ逋ｺ隕・ ${pageInfo.name}繝壹・繧ｸ縺ｫ繧ｨ繝ｩ繝ｼ繝｡繝・そ繝ｼ繧ｸ縺瑚｡ｨ遉ｺ縺輔ｌ縺ｦ縺・ｋ`);
          for (let i = 0; i < errorCount; i++) {
            const errorText = await errorMessages.nth(i).textContent();
            console.log(`  繧ｨ繝ｩ繝ｼ${i + 1}: ${errorText}`);
          }
        }
        
        // JavaScript繧ｨ繝ｩ繝ｼ縺ｮ遒ｺ隱・
        const jsErrors: string[] = [];
        page.on('pageerror', error => {
          jsErrors.push(error.message);
        });
        
        await page.waitForTimeout(1000);
        
        if (jsErrors.length > 0) {
          console.log(`圷 JavaScript繧ｨ繝ｩ繝ｼ逋ｺ隕・in ${pageInfo.name}:`);
          jsErrors.forEach(error => console.log(`  - ${error}`));
        }
        
      } catch (error) {
        console.log(`圷 繝舌げ逋ｺ隕・ ${pageInfo.name}繝壹・繧ｸ縺ｧ繧ｨ繝ｩ繝ｼ: ${error}`);
      }
    }
  });
}); 
import { test, expect } from '@playwright/test';

test.describe('繧ｹ繧ｯ繝ｭ繝ｼ繝ｫ蛻ｶ蠕｡螳牙ｮ壽ｧ繝・せ繝・, () => {
  test.beforeEach(async ({ page }) => {
    // 繝ｭ繧ｰ繧､繝ｳ蜃ｦ逅・
    await page.goto('http://localhost:3002/login');
    await page.waitForLoadState('networkidle');
    
    // 繧ｹ繧ｿ繝・ヵ縺ｧ繝ｭ繧ｰ繧､繝ｳ
    await page.click('button[data-testid="staff-login"]');
    await page.waitForLoadState('networkidle');
    
    // 繝繝・す繝･繝懊・繝峨′陦ｨ遉ｺ縺輔ｌ繧九∪縺ｧ蠕・ｩ・
    await page.waitForSelector('[data-testid="dashboard-layout"]', { timeout: 10000 });
  });

  test('逕ｻ髱｢驕ｷ遘ｻ逶ｴ蠕後・讌ｭ蜍吶ヵ繝ｭ繝ｼ陦ｨ遉ｺ螳牙ｮ壽ｧ', async ({ page }) => {
    // 蛻晄悄迥ｶ諷九〒讌ｭ蜍吶ヵ繝ｭ繝ｼ縺瑚｡ｨ遉ｺ縺輔ｌ縺ｦ縺・ｋ縺薙→繧堤｢ｺ隱・
    await expect(page.locator('text=讌ｭ蜍吶ヵ繝ｭ繝ｼ')).toBeVisible();
    await expect(page.locator('text=繝輔Ν繝輔ぅ繝ｫ繝｡繝ｳ繝域･ｭ蜍吶ヵ繝ｭ繝ｼ')).toBeVisible();
    
    // 2遘貞ｾ・ｩ滂ｼ亥・譛溷ｮ牙ｮ壼喧譛滄俣・・
    await page.waitForTimeout(2000);
    
    // 讌ｭ蜍吶ヵ繝ｭ繝ｼ縺後∪縺陦ｨ遉ｺ縺輔ｌ縺ｦ縺・ｋ縺薙→繧堤｢ｺ隱・
    await expect(page.locator('text=讌ｭ蜍吶ヵ繝ｭ繝ｼ')).toBeVisible();
    await expect(page.locator('text=繝輔Ν繝輔ぅ繝ｫ繝｡繝ｳ繝域･ｭ蜍吶ヵ繝ｭ繝ｼ')).toBeVisible();
    
    console.log('笨・蛻晄悄陦ｨ遉ｺ譎ゅ・讌ｭ蜍吶ヵ繝ｭ繝ｼ螳牙ｮ壽ｧ: OK');
  });

  test('繧ｵ繧､繝峨Γ繝九Η繝ｼ縺九ｉ縺ｮ逕ｻ髱｢驕ｷ遘ｻ縺ｧ縺ｮ讌ｭ蜍吶ヵ繝ｭ繝ｼ螳牙ｮ壽ｧ', async ({ page }) => {
    // 蝨ｨ蠎ｫ邂｡逅・判髱｢縺ｫ驕ｷ遘ｻ
    await page.click('a[href="/staff/inventory"]');
    await page.waitForLoadState('networkidle');
    
    // 讌ｭ蜍吶ヵ繝ｭ繝ｼ縺瑚｡ｨ遉ｺ縺輔ｌ縺ｦ縺・ｋ縺薙→繧堤｢ｺ隱・
    await expect(page.locator('text=讌ｭ蜍吶ヵ繝ｭ繝ｼ')).toBeVisible();
    
    // 1遘剃ｻ･蜀・↓讌ｭ蜍吶ヵ繝ｭ繝ｼ縺梧ｶ医∴縺ｪ縺・％縺ｨ繧堤｢ｺ隱・
    await page.waitForTimeout(1000);
    await expect(page.locator('text=讌ｭ蜍吶ヵ繝ｭ繝ｼ')).toBeVisible();
    
    // 縺輔ｉ縺ｫ1遘貞ｾ・ｩ溘＠縺ｦ遒ｺ隱・
    await page.waitForTimeout(1000);
    await expect(page.locator('text=讌ｭ蜍吶ヵ繝ｭ繝ｼ')).toBeVisible();
    
    console.log('笨・蝨ｨ蠎ｫ邂｡逅・判髱｢縺ｧ縺ｮ讌ｭ蜍吶ヵ繝ｭ繝ｼ螳牙ｮ壽ｧ: OK');
    
    // 繧ｿ繧ｹ繧ｯ邂｡逅・判髱｢縺ｫ驕ｷ遘ｻ
    await page.click('a[href="/staff/tasks"]');
    await page.waitForLoadState('networkidle');
    
    // 讌ｭ蜍吶ヵ繝ｭ繝ｼ縺瑚｡ｨ遉ｺ縺輔ｌ縺ｦ縺・ｋ縺薙→繧堤｢ｺ隱・
    await expect(page.locator('text=讌ｭ蜍吶ヵ繝ｭ繝ｼ')).toBeVisible();
    
    // 1遘剃ｻ･蜀・↓讌ｭ蜍吶ヵ繝ｭ繝ｼ縺梧ｶ医∴縺ｪ縺・％縺ｨ繧堤｢ｺ隱・
    await page.waitForTimeout(1000);
    await expect(page.locator('text=讌ｭ蜍吶ヵ繝ｭ繝ｼ')).toBeVisible();
    
    console.log('笨・繧ｿ繧ｹ繧ｯ邂｡逅・判髱｢縺ｧ縺ｮ讌ｭ蜍吶ヵ繝ｭ繝ｼ螳牙ｮ壽ｧ: OK');
  });

  test('繧ｹ繧ｯ繝ｭ繝ｼ繝ｫ蛻ｶ蠕｡讖溯・縺ｮ豁｣蟶ｸ蜍穂ｽ・, async ({ page }) => {
    // 髟ｷ縺・さ繝ｳ繝・Φ繝・′縺ゅｋ逕ｻ髱｢縺ｫ遘ｻ蜍・
    await page.click('a[href="/staff/inventory"]');
    await page.waitForLoadState('networkidle');
    
    // 蛻晄悄螳牙ｮ壼喧譛滄俣繧貞ｾ・ｩ・
    await page.waitForTimeout(2500);
    
    // 繧ｹ繧ｯ繝ｭ繝ｼ繝ｫ蜿ｯ閭ｽ縺ｪ繧ｳ繝ｳ繝・リ繧貞叙蠕・
    const scrollContainer = page.locator('.page-scroll-container');
    
    // 荳九↓繧ｹ繧ｯ繝ｭ繝ｼ繝ｫ縺励※讌ｭ蜍吶ヵ繝ｭ繝ｼ縺梧釜繧翫◆縺溘∪繧後ｋ縺薙→繧堤｢ｺ隱・
    await scrollContainer.evaluate(el => el.scrollTop = 100);
    await page.waitForTimeout(500);
    
    // 讌ｭ蜍吶ヵ繝ｭ繝ｼ縺梧釜繧翫◆縺溘∪繧後※縺・ｋ縺狗｢ｺ隱・
    const flowCollapsed = await page.locator('text=繝輔Ν繝輔ぅ繝ｫ繝｡繝ｳ繝域･ｭ蜍吶ヵ繝ｭ繝ｼ').isVisible();
    if (!flowCollapsed) {
      console.log('笨・荳九せ繧ｯ繝ｭ繝ｼ繝ｫ縺ｧ讌ｭ蜍吶ヵ繝ｭ繝ｼ謚倥ｊ縺溘◆縺ｿ: OK');
    }
    
    // 荳翫↓繧ｹ繧ｯ繝ｭ繝ｼ繝ｫ縺励※讌ｭ蜍吶ヵ繝ｭ繝ｼ縺悟ｱ暮幕縺輔ｌ繧九％縺ｨ繧堤｢ｺ隱・
    await scrollContainer.evaluate(el => el.scrollTop = 0);
    await page.waitForTimeout(500);
    
    // 讌ｭ蜍吶ヵ繝ｭ繝ｼ縺悟ｱ暮幕縺輔ｌ縺ｦ縺・ｋ縺狗｢ｺ隱・
    await expect(page.locator('text=繝輔Ν繝輔ぅ繝ｫ繝｡繝ｳ繝域･ｭ蜍吶ヵ繝ｭ繝ｼ')).toBeVisible();
    
    console.log('笨・荳翫せ繧ｯ繝ｭ繝ｼ繝ｫ縺ｧ讌ｭ蜍吶ヵ繝ｭ繝ｼ螻暮幕: OK');
  });

  test('隍・焚逕ｻ髱｢驕ｷ遘ｻ縺ｧ縺ｮ螳牙ｮ壽ｧ', async ({ page }) => {
    const screens = [
      { name: '蝨ｨ蠎ｫ邂｡逅・, href: '/staff/inventory' },
      { name: '繧ｿ繧ｹ繧ｯ邂｡逅・, href: '/staff/tasks' },
      { name: '蜃ｺ闕ｷ邂｡逅・, href: '/staff/shipping' },
      { name: '霑泌刀邂｡逅・, href: '/staff/returns' }
    ];
    
    for (const screen of screens) {
      // 逕ｻ髱｢驕ｷ遘ｻ
      await page.click(`a[href="${screen.href}"]`);
      await page.waitForLoadState('networkidle');
      
      // 讌ｭ蜍吶ヵ繝ｭ繝ｼ縺瑚｡ｨ遉ｺ縺輔ｌ縺ｦ縺・ｋ縺薙→繧堤｢ｺ隱・
      await expect(page.locator('text=讌ｭ蜍吶ヵ繝ｭ繝ｼ')).toBeVisible();
      
      // 1遘剃ｻ･蜀・↓讌ｭ蜍吶ヵ繝ｭ繝ｼ縺梧ｶ医∴縺ｪ縺・％縺ｨ繧堤｢ｺ隱・
      await page.waitForTimeout(1000);
      await expect(page.locator('text=讌ｭ蜍吶ヵ繝ｭ繝ｼ')).toBeVisible();
      
      console.log(`笨・${screen.name}逕ｻ髱｢縺ｧ縺ｮ讌ｭ蜍吶ヵ繝ｭ繝ｼ螳牙ｮ壽ｧ: OK`);
    }
  });

  test('謇句虚謚倥ｊ縺溘◆縺ｿ讖溯・縺ｮ蜍穂ｽ・, async ({ page }) => {
    // 讌ｭ蜍吶ヵ繝ｭ繝ｼ縺ｮ謚倥ｊ縺溘◆縺ｿ繝懊ち繝ｳ繧偵け繝ｪ繝・け
    await page.click('button[title*="繝輔Ο繝ｼ繧呈釜繧翫◆縺溘・"]');
    await page.waitForTimeout(300);
    
    // 讌ｭ蜍吶ヵ繝ｭ繝ｼ縺梧釜繧翫◆縺溘∪繧後※縺・ｋ縺薙→繧堤｢ｺ隱・
    const flowVisible = await page.locator('text=繝輔Ν繝輔ぅ繝ｫ繝｡繝ｳ繝域･ｭ蜍吶ヵ繝ｭ繝ｼ').isVisible();
    expect(flowVisible).toBe(false);
    
    // 螻暮幕繝懊ち繝ｳ繧偵け繝ｪ繝・け
    await page.click('button[title*="繝輔Ο繝ｼ繧貞ｱ暮幕"]');
    await page.waitForTimeout(300);
    
    // 讌ｭ蜍吶ヵ繝ｭ繝ｼ縺悟ｱ暮幕縺輔ｌ縺ｦ縺・ｋ縺薙→繧堤｢ｺ隱・
    await expect(page.locator('text=繝輔Ν繝輔ぅ繝ｫ繝｡繝ｳ繝域･ｭ蜍吶ヵ繝ｭ繝ｼ')).toBeVisible();
    
    console.log('笨・謇句虚謚倥ｊ縺溘◆縺ｿ讖溯・: OK');
  });
}); 
import { test, expect } from '@playwright/test';

/**
 * 讌ｭ蜍吶ヵ繝ｭ繝ｼ蜈ｨ菴薙・繝・ΔE2E繝・せ繝・
 * 蜈･蠎ｫ 竊・讀懷刀 竊・菫晉ｮ｡ 竊・蜃ｺ蜩・竊・螢ｲ邏・ｸ医∩ 縺ｮ豬√ｌ繧堤｢ｺ隱・
 */

// 繝ｭ繧ｰ繧､繝ｳ逕ｨ繝倥Ν繝代・髢｢謨ｰ
async function loginAsStaff(page: any) {
  await page.goto('/login');
  await page.fill('input[name="email"]', 'staff@example.com');
  await page.fill('input[name="password"]', 'password123');
  await page.click('button[type="submit"]');
  await expect(page).toHaveURL(/\/staff\/dashboard$/, { timeout: 10000 });
}

async function loginAsSeller(page: any) {
  await page.goto('/login');
  await page.fill('input[name="email"]', 'seller@example.com');
  await page.fill('input[name="password"]', 'password123');
  await page.click('button[type="submit"]');
  await expect(page).toHaveURL(/\/dashboard$/, { timeout: 10000 });
}

test.describe('讌ｭ蜍吶ヵ繝ｭ繝ｼ繝・Δ E2E繝・せ繝・, () => {
  test('1. 繧ｻ繝ｩ繝ｼ繝繝・す繝･繝懊・繝・- 蜈ｨ菴捺ｦりｦ∫｢ｺ隱・, async ({ page }) => {
    await loginAsSeller(page);
    
    // 繝繝・す繝･繝懊・繝峨・蝓ｺ譛ｬ隕∫ｴ遒ｺ隱・
    await expect(page.locator('h1:has-text("繧ｻ繝ｩ繝ｼ繝繝・す繝･繝懊・繝・)')).toBeVisible();
    
    // 蝨ｨ蠎ｫ謨ｰ縺ｮ遒ｺ隱・
    await expect(page.locator('text=20')).toBeVisible();
    
    // 蜷・せ繝・・繧ｿ繧ｹ縺ｮ陦ｨ遉ｺ遒ｺ隱・
    await expect(page.locator('body')).toContainText('蜈･蠎ｫ');
    await expect(page.locator('body')).toContainText('讀懷刀');
    await expect(page.locator('body')).toContainText('菫晉ｮ｡');
    await expect(page.locator('body')).toContainText('蜃ｺ蜩・);
    
    console.log('笨・繧ｻ繝ｩ繝ｼ繝繝・す繝･繝懊・繝臥｢ｺ隱榊ｮ御ｺ・);
  });

  test('2. 繧ｻ繝ｩ繝ｼ蝨ｨ蠎ｫ逕ｻ髱｢ - 蝠・刀荳隕ｧ遒ｺ隱・, async ({ page }) => {
    await loginAsSeller(page);
    
    // 蝨ｨ蠎ｫ繝壹・繧ｸ縺ｫ遘ｻ蜍・
    await page.goto('/inventory');
    await expect(page).toHaveURL(/\/inventory$/);
    
    // 蝠・刀荳隕ｧ縺ｮ遒ｺ隱・
    await page.waitForSelector('table tbody tr', { timeout: 10000 });
    const productRows = page.locator('table tbody tr');
    const rowCount = await productRows.count();
    expect(rowCount).toBeGreaterThan(0);
    
    // 譁ｰ縺励＞蝠・刀蜷阪′陦ｨ遉ｺ縺輔ｌ繧九％縺ｨ繧堤｢ｺ隱・
    await expect(page.locator('text=Sony')).toBeVisible();
    await expect(page.locator('text=Canon')).toBeVisible();
    
    console.log(`笨・繧ｻ繝ｩ繝ｼ蝨ｨ蠎ｫ逕ｻ髱｢遒ｺ隱榊ｮ御ｺ・(${rowCount}莉ｶ縺ｮ蝠・刀)`);
  });

  test('3. 繧ｹ繧ｿ繝・ヵ繝繝・す繝･繝懊・繝・- 繧ｿ繧ｹ繧ｯ邂｡逅・｢ｺ隱・, async ({ page }) => {
    await loginAsStaff(page);
    
    // 繧ｹ繧ｿ繝・ヵ繝繝・す繝･繝懊・繝峨・蝓ｺ譛ｬ隕∫ｴ遒ｺ隱・
    await expect(page.locator('h1:has-text("繧ｹ繧ｿ繝・ヵ繝繝・す繝･繝懊・繝・)')).toBeVisible();
    
    // 繧ｿ繧ｹ繧ｯ髢｢騾｣縺ｮ遒ｺ隱・
    await expect(page.locator('body')).toContainText('繧ｿ繧ｹ繧ｯ');
    
    // 諡・ｽ楢・′螻ｱ譛ｬ 驕比ｹ溘↓縺ｪ縺｣縺ｦ縺・ｋ縺薙→繧堤｢ｺ隱・
    await expect(page.locator('text=螻ｱ譛ｬ 驕比ｹ・)).toBeVisible();
    
    console.log('笨・繧ｹ繧ｿ繝・ヵ繝繝・す繝･繝懊・繝臥｢ｺ隱榊ｮ御ｺ・);
  });

  test('4. 繧ｹ繧ｿ繝・ヵ蝨ｨ蠎ｫ逕ｻ髱｢ - 蝠・刀邂｡逅・｢ｺ隱・, async ({ page }) => {
    await loginAsStaff(page);
    
    // 繧ｹ繧ｿ繝・ヵ蝨ｨ蠎ｫ繝壹・繧ｸ縺ｫ遘ｻ蜍・
    await page.goto('/staff/inventory');
    await expect(page).toHaveURL(/\/staff\/inventory$/);
    
    // 蝠・刀荳隕ｧ縺ｮ遒ｺ隱・
    await page.waitForSelector('table tbody tr', { timeout: 10000 });
    const productRows = page.locator('table tbody tr');
    const rowCount = await productRows.count();
    expect(rowCount).toBeGreaterThan(0);
    
    // 繝輔ぅ繝ｫ繧ｿ讖溯・縺後≠繧九°繝√ぉ繝・け
    const statusFilter = page.locator('select').first();
    if (await statusFilter.isVisible()) {
      console.log('繝輔ぅ繝ｫ繧ｿ讖溯・遒ｺ隱・);
    }
    
    console.log(`笨・繧ｹ繧ｿ繝・ヵ蝨ｨ蠎ｫ逕ｻ髱｢遒ｺ隱榊ｮ御ｺ・(${rowCount}莉ｶ縺ｮ蝠・刀)`);
  });

  test('5. 讌ｭ蜍吶ヵ繝ｭ繝ｼ蜈ｨ菴・- 繧ｹ繝・・繧ｿ繧ｹ驕ｷ遘ｻ繧ｷ繝溘Η繝ｬ繝ｼ繧ｷ繝ｧ繝ｳ', async ({ page }) => {
    await loginAsStaff(page);
    await page.goto('/staff/inventory');
    
    // 讀懃ｴ｢讖溯・縺後≠繧九°繝√ぉ繝・け
    const searchInput = page.locator('input[placeholder*="讀懃ｴ｢"], input[type="search"]');
    if (await searchInput.isVisible()) {
      await searchInput.fill('Canon');
      await page.waitForTimeout(1000);
      
      // Canon陬ｽ蜩√′陦ｨ遉ｺ縺輔ｌ繧九％縺ｨ繧堤｢ｺ隱・
      await expect(page.locator('text=Canon')).toBeVisible();
    }
    
    // 蝠・刀隧ｳ邏ｰ繝懊ち繝ｳ縺後≠繧九°繝√ぉ繝・け
    const detailButton = page.locator('button:has-text("隧ｳ邏ｰ"), button:has-text("Detail")').first();
    if (await detailButton.isVisible()) {
      await detailButton.click();
      await page.waitForTimeout(1000);
      
      // 繝｢繝ｼ繝繝ｫ繧帝哩縺倥ｋ
      await page.keyboard.press('Escape');
    }
    
    console.log('笨・讌ｭ蜍吶ヵ繝ｭ繝ｼ遒ｺ隱榊ｮ御ｺ・);
  });

  test('6. 螢ｲ荳翫・繝ｬ繝昴・繝育判髱｢遒ｺ隱・, async ({ page }) => {
    await loginAsSeller(page);
    
    // 螢ｲ荳翫・繝ｼ繧ｸ縺ｫ遘ｻ蜍・
    await page.goto('/sales');
    await expect(page).toHaveURL(/\/sales$/);
    await expect(page.locator('body')).toBeVisible();
    
    // 繝ｬ繝昴・繝医・繝ｼ繧ｸ縺ｫ遘ｻ蜍・
    await page.goto('/reports');
    await expect(page).toHaveURL(/\/reports$/);
    await expect(page.locator('body')).toBeVisible();
    
    console.log('笨・螢ｲ荳翫・繝ｬ繝昴・繝育判髱｢遒ｺ隱榊ｮ御ｺ・);
  });

  test('7. 讌ｭ蜍吶ヵ繝ｭ繝ｼ邨ｱ蜷育｢ｺ隱・- 繧ｻ繝ｩ繝ｼ繝ｻ繧ｹ繧ｿ繝・ヵ騾｣謳ｺ', async ({ page }) => {
    // 繧ｻ繝ｩ繝ｼ隕也せ縺ｧ縺ｮ遒ｺ隱・
    await loginAsSeller(page);
    await page.goto('/inventory');
    
    // 蝠・刀繝・・繧ｿ縺ｮ遒ｺ隱搾ｼ亥句挨縺ｫ遒ｺ隱搾ｼ・
    await expect(page.locator('text=Sony')).toBeVisible();
    await expect(page.locator('text=Canon')).toBeVisible();
    
    // 繧ｹ繧ｿ繝・ヵ隕也せ縺ｧ縺ｮ遒ｺ隱・
    await loginAsStaff(page);
    await page.goto('/staff/dashboard');
    
    // 繝繝・す繝･繝懊・繝峨′陦ｨ遉ｺ縺輔ｌ繧九％縺ｨ繧堤｢ｺ隱・
    await expect(page.locator('body')).toBeVisible();
    
    console.log('笨・讌ｭ蜍吶ヵ繝ｭ繝ｼ邨ｱ蜷育｢ｺ隱榊ｮ御ｺ・);
  });

  test('8. 繝翫ン繧ｲ繝ｼ繧ｷ繝ｧ繝ｳ繝ｻUI荳雋ｫ諤ｧ遒ｺ隱・, async ({ page }) => {
    await loginAsSeller(page);
    
    // 荳ｻ隕√・繝ｼ繧ｸ縺ｮ驕ｷ遘ｻ遒ｺ隱・
    const pages = [
      { path: '/dashboard', name: '繝繝・す繝･繝懊・繝・ },
      { path: '/inventory', name: '蝨ｨ蠎ｫ邂｡逅・ },
      { path: '/sales', name: '螢ｲ荳顔ｮ｡逅・ },
      { path: '/reports', name: '繝ｬ繝昴・繝・ },
      { path: '/delivery', name: '邏榊刀' }
    ];
    
    for (const pageInfo of pages) {
      await page.goto(pageInfo.path);
      await expect(page).toHaveURL(new RegExp(pageInfo.path + '$'));
      await expect(page.locator('body')).toBeVisible();
      
      // 繝倥ャ繝繝ｼ縺ｾ縺溘・繝翫ン繧ｲ繝ｼ繧ｷ繝ｧ繝ｳ縺瑚｡ｨ遉ｺ縺輔ｌ繧九％縺ｨ繧堤｢ｺ隱・
      const headerExists = await page.locator('header').count() > 0;
      const navExists = await page.locator('nav').count() > 0;
      expect(headerExists || navExists).toBeTruthy();
      
      console.log(`笨・${pageInfo.name} 繝壹・繧ｸ遒ｺ隱榊ｮ御ｺ・);
    }
    
    // 繧ｹ繧ｿ繝・ヵ繝壹・繧ｸ縺ｮ遒ｺ隱・
    await loginAsStaff(page);
    
    const staffPages = [
      { path: '/staff/dashboard', name: '繧ｹ繧ｿ繝・ヵ繝繝・す繝･繝懊・繝・ },
      { path: '/staff/inventory', name: '繧ｹ繧ｿ繝・ヵ蝨ｨ蠎ｫ' }
    ];
    
    for (const pageInfo of staffPages) {
      await page.goto(pageInfo.path);
      await expect(page).toHaveURL(new RegExp(pageInfo.path + '$'));
      await expect(page.locator('body')).toBeVisible();
      
      console.log(`笨・${pageInfo.name} 繝壹・繧ｸ遒ｺ隱榊ｮ御ｺ・);
    }
  });

  test('9. 讌ｭ蜍吶ヵ繝ｭ繝ｼ邱丞粋繝・Δ遒ｺ隱・, async ({ page }) => {
    console.log('識 讌ｭ蜍吶ヵ繝ｭ繝ｼ邱丞粋繝・Δ髢句ｧ・);
    
    // 1. 繧ｻ繝ｩ繝ｼ繝ｭ繧ｰ繧､繝ｳ 竊・繝繝・す繝･繝懊・繝臥｢ｺ隱・
    await loginAsSeller(page);
    await expect(page.locator('h1:has-text("繧ｻ繝ｩ繝ｼ繝繝・す繝･繝懊・繝・)')).toBeVisible();
    console.log('投 繧ｻ繝ｩ繝ｼ繝繝・す繝･繝懊・繝芽｡ｨ遉ｺ遒ｺ隱・);
    
    // 2. 蝨ｨ蠎ｫ迥ｶ豕∫｢ｺ隱・
    await page.goto('/inventory');
    await page.waitForSelector('table tbody tr', { timeout: 5000 });
    const sellerInventoryCount = await page.locator('table tbody tr').count();
    console.log(`逃 繧ｻ繝ｩ繝ｼ蝨ｨ蠎ｫ遒ｺ隱・ ${sellerInventoryCount}莉ｶ`);
    
    // 3. 繧ｹ繧ｿ繝・ヵ繝ｭ繧ｰ繧､繝ｳ 竊・繝繝・す繝･繝懊・繝臥｢ｺ隱・
    await loginAsStaff(page);
    await expect(page.locator('h1:has-text("繧ｹ繧ｿ繝・ヵ繝繝・す繝･繝懊・繝・)')).toBeVisible();
    console.log('捉窶昨汳ｼ 繧ｹ繧ｿ繝・ヵ繝繝・す繝･繝懊・繝芽｡ｨ遉ｺ遒ｺ隱・);
    
    // 4. 繧ｹ繧ｿ繝・ヵ蝨ｨ蠎ｫ邂｡逅・｢ｺ隱・
    await page.goto('/staff/inventory');
    await page.waitForSelector('table tbody tr', { timeout: 5000 });
    const staffInventoryCount = await page.locator('table tbody tr').count();
    console.log(`肌 繧ｹ繧ｿ繝・ヵ蝨ｨ蠎ｫ遒ｺ隱・ ${staffInventoryCount}莉ｶ`);
    
    // 5. 讌ｭ蜍吶ヵ繝ｭ繝ｼ螳御ｺ・｢ｺ隱・
    expect(sellerInventoryCount).toBeGreaterThan(0);
    expect(staffInventoryCount).toBeGreaterThan(0);
    
    console.log('笨・讌ｭ蜍吶ヵ繝ｭ繝ｼ邱丞粋繝・Δ螳御ｺ・);
    console.log('脂 蜈ｨ縺ｦ縺ｮ讌ｭ蜍吶ヵ繝ｭ繝ｼ縺梧ｭ｣蟶ｸ縺ｫ蜍穂ｽ懊＠縺ｦ縺・∪縺・);
  });
}); 
import { test, expect } from '@playwright/test';

/**
 * 蝨ｨ蠎ｫ莉ｶ謨ｰ遒ｺ隱阪ユ繧ｹ繝・
 * 20莉ｶ縺ｮ蝠・刀縺梧ｭ｣縺励￥陦ｨ遉ｺ縺輔ｌ繧九°繧堤｢ｺ隱・
 */

// 繝ｭ繧ｰ繧､繝ｳ逕ｨ繝倥Ν繝代・髢｢謨ｰ
async function loginAsStaff(page: any) {
  await page.goto('/login');
  await page.fill('input[name="email"]', 'staff@example.com');
  await page.fill('input[name="password"]', 'password123');
  await page.click('button[type="submit"]');
  await expect(page).toHaveURL(/\/staff\/dashboard$/, { timeout: 10000 });
}

async function loginAsSeller(page: any) {
  await page.goto('/login');
  await page.fill('input[name="email"]', 'seller@example.com');
  await page.fill('input[name="password"]', 'password123');
  await page.click('button[type="submit"]');
  await expect(page).toHaveURL(/\/dashboard$/, { timeout: 10000 });
}

test.describe('蝨ｨ蠎ｫ莉ｶ謨ｰ遒ｺ隱阪ユ繧ｹ繝・, () => {
  test('繧ｻ繝ｩ繝ｼ蝨ｨ蠎ｫ繝壹・繧ｸ - 20莉ｶ陦ｨ遉ｺ遒ｺ隱・, async ({ page }) => {
    await loginAsSeller(page);
    
    // 蝨ｨ蠎ｫ繝壹・繧ｸ縺ｫ遘ｻ蜍・
    await page.goto('/inventory');
    await expect(page).toHaveURL(/\/inventory$/);
    
    // 繝・・繝悶Ν縺ｮ隱ｭ縺ｿ霎ｼ縺ｿ螳御ｺ・ｒ蠕・▽
    await page.waitForSelector('table tbody tr', { timeout: 15000 });
    
    // 蝠・刀陦梧焚繧偵き繧ｦ繝ｳ繝・
    const productRows = page.locator('table tbody tr');
    const rowCount = await productRows.count();
    
    console.log(`逃 繧ｻ繝ｩ繝ｼ蝨ｨ蠎ｫ陦ｨ遉ｺ莉ｶ謨ｰ: ${rowCount}莉ｶ`);
    
    // 20莉ｶ縺ｮ蝠・刀縺瑚｡ｨ遉ｺ縺輔ｌ繧九％縺ｨ繧堤｢ｺ隱・
    expect(rowCount).toBeGreaterThanOrEqual(15); // 譛菴・5莉ｶ莉･荳・
    
    // 譁ｰ縺励＞繧ｫ繝｡繝ｩ蝠・刀縺瑚｡ｨ遉ｺ縺輔ｌ繧九％縺ｨ繧堤｢ｺ隱・
    await expect(page.locator('text=Canon')).toBeVisible();
    await expect(page.locator('text=Sony')).toBeVisible();
    await expect(page.locator('text=Nikon')).toBeVisible();
    
    // 邨ｱ險医ョ繝ｼ繧ｿ縺ｮ遒ｺ隱・
    const totalItemsText = await page.locator('text=/\\d+轤ｹ/').first().textContent();
    console.log(`投 邨ｱ險郁｡ｨ遉ｺ: ${totalItemsText}`);
  });

  test('繧ｹ繧ｿ繝・ヵ蝨ｨ蠎ｫ繝壹・繧ｸ - 20莉ｶ陦ｨ遉ｺ遒ｺ隱・, async ({ page }) => {
    await loginAsStaff(page);
    
    // 繧ｹ繧ｿ繝・ヵ蝨ｨ蠎ｫ繝壹・繧ｸ縺ｫ遘ｻ蜍・
    await page.goto('/staff/inventory');
    await expect(page).toHaveURL(/\/staff\/inventory$/);
    
    // 繝・・繝悶Ν縺ｮ隱ｭ縺ｿ霎ｼ縺ｿ螳御ｺ・ｒ蠕・▽
    await page.waitForSelector('table tbody tr', { timeout: 15000 });
    
    // 蝠・刀陦梧焚繧偵き繧ｦ繝ｳ繝・
    const productRows = page.locator('table tbody tr');
    const rowCount = await productRows.count();
    
    console.log(`肌 繧ｹ繧ｿ繝・ヵ蝨ｨ蠎ｫ陦ｨ遉ｺ莉ｶ謨ｰ: ${rowCount}莉ｶ`);
    
    // 20莉ｶ縺ｮ蝠・刀縺瑚｡ｨ遉ｺ縺輔ｌ繧九％縺ｨ繧堤｢ｺ隱・
    expect(rowCount).toBeGreaterThanOrEqual(15); // 譛菴・5莉ｶ莉･荳・
    
    // 譁ｰ縺励＞繧ｫ繝｡繝ｩ蝠・刀縺瑚｡ｨ遉ｺ縺輔ｌ繧九％縺ｨ繧堤｢ｺ隱・
    await expect(page.locator('text=Canon')).toBeVisible();
    await expect(page.locator('text=Sony')).toBeVisible();
    await expect(page.locator('text=Nikon')).toBeVisible();
    
    // 繝壹・繧ｸ繝阪・繧ｷ繝ｧ繝ｳ諠・ｱ縺ｮ遒ｺ隱・
    const paginationInfo = page.locator('text=/\\d+莉ｶ荳ｭ/');
    if (await paginationInfo.isVisible()) {
      const paginationText = await paginationInfo.textContent();
      console.log(`塘 繝壹・繧ｸ繝阪・繧ｷ繝ｧ繝ｳ: ${paginationText}`);
    }
  });

  test('API逶ｴ謗･遒ｺ隱・- 繝・・繧ｿ莉ｶ謨ｰ繝√ぉ繝・け', async ({ page }) => {
    // API繝ｬ繧ｹ繝昴Φ繧ｹ繧堤峩謗･遒ｺ隱・
    const response = await page.request.get('/api/inventory');
    expect(response.status()).toBe(200);
    
    const data = await response.json();
    const itemCount = data.data ? data.data.length : 0;
    
    console.log(`伯 API霑泌唆莉ｶ謨ｰ: ${itemCount}莉ｶ`);
    expect(itemCount).toBeGreaterThanOrEqual(15);
    
    // 繝・・繧ｿ讒矩縺ｮ遒ｺ隱・
    if (data.data && data.data.length > 0) {
      const firstItem = data.data[0];
      console.log(`搭 蝠・刀萓・ ${firstItem.name} (${firstItem.sku})`);
      
      // 蠢・ｦ√ヵ繧｣繝ｼ繝ｫ繝峨・蟄伜惠遒ｺ隱・
      expect(firstItem).toHaveProperty('id');
      expect(firstItem).toHaveProperty('name');
      expect(firstItem).toHaveProperty('sku');
      expect(firstItem).toHaveProperty('category');
      expect(firstItem).toHaveProperty('status');
    }
  });

  test('繝壹・繧ｸ繝阪・繧ｷ繝ｧ繝ｳ蜍穂ｽ懃｢ｺ隱・, async ({ page }) => {
    await loginAsStaff(page);
    await page.goto('/staff/inventory');
    
    // 繝・・繝悶Ν縺ｮ隱ｭ縺ｿ霎ｼ縺ｿ螳御ｺ・ｒ蠕・▽
    await page.waitForSelector('table tbody tr', { timeout: 15000 });
    
    const totalRows = await page.locator('table tbody tr').count();
    console.log(`投 陦ｨ遉ｺ陦梧焚: ${totalRows}莉ｶ`);
    
    // 繝壹・繧ｸ繝阪・繧ｷ繝ｧ繝ｳ繧ｳ繝ｳ繝医Ο繝ｼ繝ｫ縺ｮ遒ｺ隱・
    const paginationExists = await page.locator('[data-testid="pagination"], .pagination, text=繝壹・繧ｸ').isVisible();
    
    if (paginationExists) {
      console.log('笨・繝壹・繧ｸ繝阪・繧ｷ繝ｧ繝ｳ讖溯・縺悟ｮ溯｣・＆繧後※縺・∪縺・);
      
      // 谺｡繝壹・繧ｸ繝懊ち繝ｳ縺後≠繧九°繝√ぉ繝・け
      const nextButton = page.locator('button:has-text("谺｡"), button:has-text("Next"), button[aria-label*="谺｡"]');
      if (await nextButton.isVisible()) {
        await nextButton.click();
        await page.waitForTimeout(1000);
        
        const newRowCount = await page.locator('table tbody tr').count();
        console.log(`塘 谺｡繝壹・繧ｸ陦ｨ遉ｺ莉ｶ謨ｰ: ${newRowCount}莉ｶ`);
      }
    } else {
      console.log('笞・・繝壹・繧ｸ繝阪・繧ｷ繝ｧ繝ｳ讖溯・縺ｯ陦ｨ遉ｺ縺輔ｌ縺ｦ縺・∪縺帙ｓ・亥・莉ｶ陦ｨ遉ｺ縺ｮ蜿ｯ閭ｽ諤ｧ・・);
    }
  });
}); 
import { test, expect } from '@playwright/test';

test.describe('繝ｭ繧ｱ繝ｼ繧ｷ繝ｧ繝ｳ邂｡逅・判髱｢縺ｮ陦ｨ遉ｺ遒ｺ隱・, () => {
  // 莠句燕縺ｫ繧ｹ繧ｿ繝・ヵ縺ｨ縺励※繝ｭ繧ｰ繧､繝ｳ
  test.beforeEach(async ({ page }) => {
    await page.goto('/login');
    
    // 繝ｭ繧ｰ繧､繝ｳ繝輔か繝ｼ繝縺瑚｡ｨ遉ｺ縺輔ｌ繧九・繧貞ｾ・▽
    await expect(page.getByRole('heading', { name: 'THE WORLD DOOR' })).toBeVisible({ timeout: 20000 });
    
    // 繝ｭ繧ｰ繧､繝ｳ繝懊ち繝ｳ縺梧怏蜉ｹ縺ｫ縺ｪ繧九∪縺ｧ蠕・▽ (繝壹・繧ｸ縺ｮ貅門ｙ縺悟ｮ御ｺ・＠縺溘→隕九↑縺・
    await expect(page.getByTestId('login-button')).toBeEnabled({ timeout: 20000 });

    await page.fill('input[name="email"]', 'staff@example.com');
    await page.fill('input[name="password"]', 'password123');
    await page.click('button[type="submit"]');
    await expect(page).toHaveURL('/staff/dashboard', { timeout: 15000 });
  });

  test('繝ｭ繧ｱ繝ｼ繧ｷ繝ｧ繝ｳ荳隕ｧ縺ｫ繝・・繧ｿ縺瑚｡ｨ遉ｺ縺輔ｌ繧九％縺ｨ', async ({ page }) => {
    // 繝ｭ繧ｱ繝ｼ繧ｷ繝ｧ繝ｳ邂｡逅・・繝ｼ繧ｸ縺ｫ驕ｷ遘ｻ
    await page.goto('/staff/location');
    await expect(page).toHaveURL('/staff/location');

    // 繝壹・繧ｸ繧ｿ繧､繝医Ν縺瑚｡ｨ遉ｺ縺輔ｌ繧九％縺ｨ繧堤｢ｺ隱・
    await expect(page.getByRole('heading', { name: '繝ｭ繧ｱ繝ｼ繧ｷ繝ｧ繝ｳ邂｡逅・ })).toBeVisible();

    // 繧ｰ繝ｪ繝・ラ繝薙Η繝ｼ縺ｫ繝ｭ繧ｱ繝ｼ繧ｷ繝ｧ繝ｳ縺瑚｡ｨ遉ｺ縺輔ｌ繧九・繧貞ｾ・▽
    // 'STD-A-01' 縺ｨ縺・≧繝・く繧ｹ繝医ｒ謖√▽隕∫ｴ縺瑚｡ｨ遉ｺ縺輔ｌ繧九∪縺ｧ蠕・ｩ・
    await expect(page.getByText('STD-A-01')).toBeVisible({ timeout: 15000 });

    // seed.ts縺ｧ霑ｽ蜉縺励◆繝・・繧ｿ縺後＞縺上▽縺玖｡ｨ遉ｺ縺輔ｌ縺ｦ縺・ｋ縺薙→繧堤｢ｺ隱・
    await expect(page.getByText('讓呎ｺ匁｣・A-01')).toBeVisible();
    await expect(page.getByText('髦ｲ貉ｿ蠎ｫ 01')).toBeVisible();
    await expect(page.getByText('驥大ｺｫ螳､ 01')).toBeVisible();

    // 繝ｭ繧ｱ繝ｼ繧ｷ繝ｧ繝ｳ荳隕ｧ縺ｮ繧ｳ繝ｳ繝・リ隕∫ｴ繧貞叙蠕・
    const locationListContainer = page.locator('.intelligence-card.oceania').first();
    
    // 繧ｹ繧ｯ繝ｪ繝ｼ繝ｳ繧ｷ繝ｧ繝・ヨ繧呈聴蠖ｱ縺励※遒ｺ隱・
    await expect(locationListContainer).toBeVisible();
    await page.screenshot({ path: 'e2e/screenshots/location-list-verification.png', fullPage: true });

    console.log('笨・E2E繝・せ繝・ 繝ｭ繧ｱ繝ｼ繧ｷ繝ｧ繝ｳ荳隕ｧ縺梧ｭ｣縺励￥陦ｨ遉ｺ縺輔ｌ縺ｾ縺励◆縲・);
  });
}); 
import { test, expect } from '@playwright/test';

test.describe('繝ｭ繧ｰ繧､繝ｳ讖溯・縺ｮ髮・ｸｭ讀懆ｨｼ', () => {

  test('繧ｹ繧ｿ繝・ヵ繧｢繧ｫ繧ｦ繝ｳ繝医〒豁｣蟶ｸ縺ｫ繝ｭ繧ｰ繧､繝ｳ縺ｧ縺阪ｋ縺薙→', async ({ page }) => {
    // 繝ｭ繧ｰ繧､繝ｳ繝壹・繧ｸ縺ｫ繧｢繧ｯ繧ｻ繧ｹ
    await page.goto('/login');
    
    // 繝壹・繧ｸ縺ｮ荳ｻ隕√↑隕∫ｴ縺瑚｡ｨ遉ｺ縺輔ｌ繧九・繧貞ｾ・▽
    await expect(page.getByRole('heading', { name: 'THE WORLD DOOR' })).toBeVisible({ timeout: 30000 });
    await expect(page.getByTestId('login-button')).toBeEnabled({ timeout: 30000 });

    // 繝ｭ繧ｰ繧､繝ｳ諠・ｱ繧貞・蜉・
    await page.fill('input[name="email"]', 'staff@example.com');
    await page.fill('input[name="password"]', 'password123');

    // 繝ｭ繧ｰ繧､繝ｳ繝懊ち繝ｳ繧偵け繝ｪ繝・け
    await page.click('button[type="submit"]');

    // 繝繝・す繝･繝懊・繝峨∈縺ｮ繝ｪ繝繧､繝ｬ繧ｯ繝医ｒ蠕・ｩ溘＠縲ゞRL繧呈､懆ｨｼ
    await page.waitForURL('/staff/dashboard', { timeout: 15000 });
    await expect(page).toHaveURL('/staff/dashboard');

    // 繝繝・す繝･繝懊・繝峨・繧ｿ繧､繝医Ν縺瑚｡ｨ遉ｺ縺輔ｌ繧九％縺ｨ繧堤｢ｺ隱阪＠縺ｦ縲√Ο繧ｰ繧､繝ｳ謌仙粥繧堤｢ｺ螳溘↓縺吶ｋ
    await expect(page.getByRole('heading', { name: '繧ｹ繧ｿ繝・ヵ繝繝・す繝･繝懊・繝・ })).toBeVisible();

    console.log('笨・E2E繝・せ繝・ 繧ｹ繧ｿ繝・ヵ繧｢繧ｫ繧ｦ繝ｳ繝医〒縺ｮ繝ｭ繧ｰ繧､繝ｳ縺梧ｭ｣蟶ｸ縺ｫ螳御ｺ・＠縺ｾ縺励◆縲・);
  });
}); 
import { test, expect } from '@playwright/test';

test.describe('蜈ｨ逕ｻ髱｢讓ｪ蟷・ｵｱ荳讀懆ｨｼ', () => {
  const screens = [
    // 繧ｻ繝ｩ繝ｼ逕ｻ髱｢
    { path: '/dashboard', name: '逕ｻ髱｢1: 繧ｻ繝ｩ繝ｼ - 繝繝・す繝･繝懊・繝・, expected: '豺ｷ蝨ｨ蝙・p-8,p-3)', needsFix: true },
    { path: '/delivery', name: '逕ｻ髱｢2: 繧ｻ繝ｩ繝ｼ - 邏榊刀邂｡逅・, expected: '邨ｱ荳蝙・p-8)', needsFix: false },
    { path: '/inventory', name: '逕ｻ髱｢3: 繧ｻ繝ｩ繝ｼ - 蝨ｨ蠎ｫ邂｡逅・, expected: '豺ｷ蝨ｨ蝙・繝ｬ繧ｹ繝昴Φ繧ｷ繝門宛髯・', needsFix: true },
    { path: '/sales', name: '逕ｻ髱｢4: 繧ｻ繝ｩ繝ｼ - 雋ｩ螢ｲ邂｡逅・, expected: '豺ｷ蝨ｨ蝙・p-8,p-6)', needsFix: true },
    { path: '/returns', name: '逕ｻ髱｢5: 繧ｻ繝ｩ繝ｼ - 霑泌刀邂｡逅・, expected: '豺ｷ蝨ｨ蝙・p-8,p-6)', needsFix: true },
    { path: '/billing', name: '逕ｻ髱｢6: 繧ｻ繝ｩ繝ｼ - 隲区ｱゅ・邊ｾ邂・, expected: '豺ｷ蝨ｨ蝙・p-8,p-6)', needsFix: true },
    { path: '/timeline', name: '逕ｻ髱｢7: 繧ｻ繝ｩ繝ｼ - 蝠・刀螻･豁ｴ', expected: '螟壽ｮｵ髫主梛(3縺､縺ｮ繝代ョ繧｣繝ｳ繧ｰ)', needsFix: true },
    { path: '/profile', name: '逕ｻ髱｢16: 繝励Ο繝輔ぅ繝ｼ繝ｫ險ｭ螳・, expected: '隕∫｢ｺ隱・, needsFix: false },
    { path: '/settings', name: '逕ｻ髱｢17: 繧｢繧ｫ繧ｦ繝ｳ繝郁ｨｭ螳・, expected: '隕∫｢ｺ隱・, needsFix: false },
    
    // 繧ｹ繧ｿ繝・ヵ逕ｻ髱｢
    { path: '/staff/dashboard', name: '逕ｻ髱｢8: 繧ｹ繧ｿ繝・ヵ - 繝繝・す繝･繝懊・繝・, expected: '隕∫｢ｺ隱・, needsFix: false },
    { path: '/staff/tasks', name: '逕ｻ髱｢9: 繧ｹ繧ｿ繝・ヵ - 繧ｿ繧ｹ繧ｯ邂｡逅・, expected: '隕∫｢ｺ隱・, needsFix: false },
    { path: '/staff/inventory', name: '逕ｻ髱｢10: 繧ｹ繧ｿ繝・ヵ - 蝨ｨ蠎ｫ邂｡逅・, expected: '隕∫｢ｺ隱・, needsFix: false },
    { path: '/staff/inspection', name: '逕ｻ髱｢11: 繧ｹ繧ｿ繝・ヵ - 讀懷刀繝ｻ謦ｮ蠖ｱ', expected: '隕∫｢ｺ隱・, needsFix: false },
    { path: '/staff/location', name: '逕ｻ髱｢12: 繧ｹ繧ｿ繝・ヵ - 繝ｭ繧ｱ繝ｼ繧ｷ繝ｧ繝ｳ邂｡逅・, expected: '隕∫｢ｺ隱・, needsFix: false },
    { path: '/staff/shipping', name: '逕ｻ髱｢13: 繧ｹ繧ｿ繝・ヵ - 蜃ｺ闕ｷ邂｡逅・, expected: '隕∫｢ｺ隱・, needsFix: false },
    { path: '/staff/returns', name: '逕ｻ髱｢14: 繧ｹ繧ｿ繝・ヵ - 霑泌刀蜃ｦ逅・, expected: '豺ｷ蝨ｨ蝙・p-8,p-4)', needsFix: true },
    { path: '/staff/reports', name: '逕ｻ髱｢15: 繧ｹ繧ｿ繝・ヵ - 讌ｭ蜍吶Ξ繝昴・繝・, expected: '隕∫｢ｺ隱・, needsFix: false },
  ];

  test('蜈ｨ逕ｻ髱｢縺ｮ繝代ョ繧｣繝ｳ繧ｰ迥ｶ豕∫｢ｺ隱・, async ({ page }) => {
    console.log('\n=== 蜈ｨ逕ｻ髱｢讓ｪ蟷・ｵｱ荳讀懆ｨｼ髢句ｧ・===\n');
    
    const results = [];
    
    for (const screen of screens) {
      try {
        await page.goto(`http://localhost:3002${screen.path}`);
        await page.waitForLoadState('domcontentloaded');
        
        // intelligence-card隕∫ｴ縺ｮ遒ｺ隱・
        const cards = page.locator('.intelligence-card');
        const cardCount = await cards.count();
        
        const paddingAnalysis = [];
        
        if (cardCount > 0) {
          for (let i = 0; i < cardCount; i++) {
            const card = cards.nth(i);
            const cardContent = card.locator('> div').first();
            const className = await cardContent.getAttribute('class');
            
            // 繝代ョ繧｣繝ｳ繧ｰ繧ｯ繝ｩ繧ｹ縺ｮ遒ｺ隱・
            let paddingType = 'unknown';
            if (className?.includes('p-8')) paddingType = 'p-8';
            else if (className?.includes('p-6')) paddingType = 'p-6';
            else if (className?.includes('p-4')) paddingType = 'p-4';
            else if (className?.includes('p-3')) paddingType = 'p-3';
            else if (className?.match(/p-\d+/)) paddingType = className.match(/p-\d+/)?.[0] || 'unknown';
            
            paddingAnalysis.push(paddingType);
          }
        }
        
        const uniquePaddings = Array.from(new Set(paddingAnalysis));
        const isUnified = uniquePaddings.length <= 1;
        const status = isUnified ? '笨・邨ｱ荳' : '笨・豺ｷ蝨ｨ';
        
        results.push({
          screen: screen.name,
          path: screen.path,
          cardCount,
          paddings: paddingAnalysis,
          uniquePaddings,
          isUnified,
          needsFix: screen.needsFix,
          expected: screen.expected
        });
        
        console.log(`${status} ${screen.name}`);
        console.log(`  繝代せ: ${screen.path}`);
        console.log(`  繧ｫ繝ｼ繝画焚: ${cardCount}`);
        console.log(`  繝代ョ繧｣繝ｳ繧ｰ: [${paddingAnalysis.join(', ')}]`);
        console.log(`  繝ｦ繝九・繧ｯ: [${uniquePaddings.join(', ')}]`);
        console.log(`  譛溷ｾ・､: ${screen.expected}`);
        console.log(`  菫ｮ豁｣隕∝凄: ${screen.needsFix ? '隕∽ｿｮ豁｣' : '豁｣蟶ｸ'}`);
        console.log('');
        
      } catch (error) {
        const errorMessage = error instanceof Error ? error.message : String(error);
        console.log(`笨・繧ｨ繝ｩ繝ｼ ${screen.name}: ${errorMessage}`);
        results.push({
          screen: screen.name,
          path: screen.path,
          error: errorMessage,
          needsFix: screen.needsFix
        });
      }
    }
    
    // 菫ｮ豁｣縺悟ｿ・ｦ√↑逕ｻ髱｢縺ｮ繝ｪ繧ｹ繝・
    const needsFixScreens = results.filter(r => r.needsFix && !r.isUnified);
    
    console.log('\n=== 菫ｮ豁｣縺悟ｿ・ｦ√↑逕ｻ髱｢ ===');
    needsFixScreens.forEach(screen => {
      console.log(`- ${screen.screen}: ${screen.uniquePaddings?.join(', ') || '繧ｨ繝ｩ繝ｼ'}`);
    });
    
    console.log('\n=== 讀懆ｨｼ螳御ｺ・===');
  });

  test('菫ｮ豁｣蟇ｾ雎｡逕ｻ髱｢縺ｮ繧ｹ繧ｯ繝ｪ繝ｼ繝ｳ繧ｷ繝ｧ繝・ヨ謦ｮ蠖ｱ', async ({ page }) => {
    const fixTargets = [
      '/dashboard',
      '/inventory', 
      '/sales',
      '/returns',
      '/billing',
      '/timeline',
      '/staff/returns'
    ];
    
    for (const path of fixTargets) {
      try {
        await page.goto(`http://localhost:3002${path}`);
        await page.waitForLoadState('networkidle');
        
        const screenshotPath = `test-results/菫ｮ豁｣蜑・${path.replace(/\//g, '-')}.png`;
        await page.screenshot({ 
          path: screenshotPath,
          fullPage: true 
        });
        
        console.log(`菫ｮ豁｣蜑阪せ繧ｯ繝ｪ繝ｼ繝ｳ繧ｷ繝ｧ繝・ヨ: ${screenshotPath}`);
      } catch (error) {
        const errorMessage = error instanceof Error ? error.message : String(error);
        console.log(`繧ｹ繧ｯ繝ｪ繝ｼ繝ｳ繧ｷ繝ｧ繝・ヨ螟ｱ謨・${path}: ${errorMessage}`);
      }
    }
  });
}); 
import { test, expect } from '@playwright/test';

test.describe('剥 菫ｮ豁｣貂医∩繝｢繝ｼ繝繝ｫ讖溯・繝・せ繝・, () => {
  
  test('識 繝繝・す繝･繝懊・繝画悄髢馴∈謚槭Δ繝ｼ繝繝ｫ', async ({ page }) => {
    console.log('=== 繝繝・す繝･繝懊・繝画悄髢馴∈謚槭Δ繝ｼ繝繝ｫ繝・せ繝・===');
    
    // 繝ｭ繧ｰ繧､繝ｳ
    await page.goto('http://localhost:3002/login');
    await page.waitForTimeout(3000);
    await page.fill('input[name="username"]', 'seller');
    await page.fill('input[name="password"]', 'password');
    await page.click('button[type="submit"]');
    await page.waitForTimeout(3000);
    
    // 繝繝・す繝･繝懊・繝峨↓遘ｻ蜍・
    await page.goto('http://localhost:3002/dashboard');
    await page.waitForTimeout(3000);
    
    // 豁｣遒ｺ縺ｪ繝懊ち繝ｳ繝・く繧ｹ繝医〒譛滄俣驕ｸ謚槭・繧ｿ繝ｳ繧呈爾縺・
    const periodButton = page.locator('button:has-text("繝ｬ繝昴・繝域悄髢薙ｒ驕ｸ謚・)');
    const buttonExists = await periodButton.isVisible();
    console.log(`繝ｬ繝昴・繝域悄髢薙ｒ驕ｸ謚槭・繧ｿ繝ｳ蟄伜惠: ${buttonExists ? '笨・ : '笶・}`);
    
    if (buttonExists) {
      await periodButton.click();
      await page.waitForTimeout(2000);
      
      // 繝｢繝ｼ繝繝ｫ縺碁幕縺・◆縺九メ繧ｧ繝・け
      const modal = page.locator('[role="dialog"]');
      const modalOpen = await modal.isVisible();
      console.log(`譛滄俣驕ｸ謚槭Δ繝ｼ繝繝ｫ髢矩哩: ${modalOpen ? '笨・螳溯｣・ｸ医∩' : '笶・譛ｪ螳溯｣・}`);
      
      if (modalOpen) {
        // DateRangePicker縺ｮ蟄伜惠遒ｺ隱・
        const dateRangePicker = page.locator('.rdrCalendarWrapper');
        const pickerExists = await dateRangePicker.isVisible();
        console.log(`DateRangePicker陦ｨ遉ｺ: ${pickerExists ? '笨・螳溯｣・ｸ医∩' : '笶・譛ｪ螳溯｣・}`);
        
        // 驕ｩ逕ｨ繝懊ち繝ｳ縺ｮ蟄伜惠遒ｺ隱・
        const applyButton = page.locator('button:has-text("驕ｩ逕ｨ")');
        const applyExists = await applyButton.isVisible();
        console.log(`驕ｩ逕ｨ繝懊ち繝ｳ蟄伜惠: ${applyExists ? '笨・螳溯｣・ｸ医∩' : '笶・譛ｪ螳溯｣・}`);
        
        if (applyExists) {
          await applyButton.click();
          await page.waitForTimeout(1000);
          
          // 繝｢繝ｼ繝繝ｫ縺碁哩縺倥◆縺九メ繧ｧ繝・け
          const modalClosed = !(await modal.isVisible());
          console.log(`繝｢繝ｼ繝繝ｫ髢峨§繧・ ${modalClosed ? '笨・螳溯｣・ｸ医∩' : '笶・譛ｪ螳溯｣・}`);
          
          if (modalClosed) {
            console.log('脂 繝繝・す繝･繝懊・繝画悄髢馴∈謚槭Δ繝ｼ繝繝ｫ: 螳悟・螳溯｣・ｸ医∩');
          } else {
            console.log('笶・繝繝・す繝･繝懊・繝画悄髢馴∈謚槭Δ繝ｼ繝繝ｫ: 驛ｨ蛻・悴螳溯｣・);
          }
        } else {
          console.log('笶・繝繝・す繝･繝懊・繝画悄髢馴∈謚槭Δ繝ｼ繝繝ｫ: 驛ｨ蛻・悴螳溯｣・);
        }
      } else {
        console.log('笶・繝繝・す繝･繝懊・繝画悄髢馴∈謚槭Δ繝ｼ繝繝ｫ: 譛ｪ螳溯｣・);
      }
    } else {
      console.log('笶・繝繝・す繝･繝懊・繝画悄髢馴∈謚槭・繧ｿ繝ｳ: 譛ｪ螳溯｣・);
    }
  });
}); 
import { test, expect } from '@playwright/test';

// webServer繧堤┌蜉ｹ縺ｫ縺励※逶ｴ謗･繝・せ繝・
test.use({ 
  baseURL: undefined
});

test.describe('剥 譛邨６I謫堺ｽ懃｢ｺ隱・, () => {
  
  test('識 蜈ｨ繝｢繝ｼ繝繝ｫ讖溯・邱丞粋繝・せ繝・, async ({ page }) => {
    console.log('=== 譛邨６I謫堺ｽ懃｢ｺ隱阪ユ繧ｹ繝磯幕蟋・===');
    
    try {
      // 逶ｴ謗･繝ｭ繧ｰ繧､繝ｳ繝壹・繧ｸ縺ｫ繧｢繧ｯ繧ｻ繧ｹ
      console.log('繝ｭ繧ｰ繧､繝ｳ繝壹・繧ｸ縺ｫ繧｢繧ｯ繧ｻ繧ｹ荳ｭ...');
      await page.goto('http://localhost:3002/login', { 
        waitUntil: 'domcontentloaded',
        timeout: 60000 
      });
      
      console.log('繝ｭ繧ｰ繧､繝ｳ蜃ｦ逅・幕蟋・..');
      await page.fill('input[name="username"]', 'seller');
      await page.fill('input[name="password"]', 'password');
      await page.click('button[type="submit"]');
      
      // 繝繝・す繝･繝懊・繝峨↓遘ｻ蜍輔☆繧九∪縺ｧ蠕・ｩ・
      await page.waitForURL('**/dashboard', { timeout: 30000 });
      console.log('笨・繝ｭ繧ｰ繧､繝ｳ謌仙粥');
      
      // 1. 繝繝・す繝･繝懊・繝画悄髢馴∈謚槭Δ繝ｼ繝繝ｫ繝・せ繝・
      console.log('--- 繝繝・す繝･繝懊・繝画悄髢馴∈謚槭Δ繝ｼ繝繝ｫ繝・せ繝・---');
      await page.goto('http://localhost:3002/dashboard', { waitUntil: 'domcontentloaded' });
      
      const periodButton = page.locator('button:has-text("繝ｬ繝昴・繝域悄髢薙ｒ驕ｸ謚・)');
      if (await periodButton.isVisible({ timeout: 5000 })) {
        console.log('笨・繝ｬ繝昴・繝域悄髢薙ｒ驕ｸ謚槭・繧ｿ繝ｳ: 陦ｨ遉ｺ遒ｺ隱・);
        
        await periodButton.click();
        await page.waitForTimeout(2000);
        
        const modal1 = page.locator('[role="dialog"]');
        if (await modal1.isVisible({ timeout: 3000 })) {
          console.log('笨・繝繝・す繝･繝懊・繝画悄髢馴∈謚槭Δ繝ｼ繝繝ｫ: UI謫堺ｽ懊〒蜍穂ｽ懃｢ｺ隱肴ｸ医∩');
          
          const applyButton = page.locator('button:has-text("驕ｩ逕ｨ")');
          if (await applyButton.isVisible({ timeout: 3000 })) {
            await applyButton.click();
            console.log('笨・驕ｩ逕ｨ繝懊ち繝ｳ: 蜍穂ｽ懃｢ｺ隱・);
          }
        } else {
          console.log('笶・繝繝・す繝･繝懊・繝画悄髢馴∈謚槭Δ繝ｼ繝繝ｫ: 譛ｪ蜍穂ｽ・);
        }
      } else {
        console.log('笶・繝ｬ繝昴・繝域悄髢薙ｒ驕ｸ謚槭・繧ｿ繝ｳ: 譛ｪ陦ｨ遉ｺ');
      }
      
      // 2. 蝨ｨ蠎ｫ邂｡逅・膚蜩∫匳骭ｲ繝｢繝ｼ繝繝ｫ繝・せ繝・
      console.log('--- 蝨ｨ蠎ｫ邂｡逅・膚蜩∫匳骭ｲ繝｢繝ｼ繝繝ｫ繝・せ繝・---');
      await page.goto('http://localhost:3002/inventory', { waitUntil: 'domcontentloaded' });
      
      const addButton = page.locator('button:has-text("譁ｰ隕丞膚蜩∫匳骭ｲ")');
      if (await addButton.isVisible({ timeout: 5000 })) {
        console.log('笨・譁ｰ隕丞膚蜩∫匳骭ｲ繝懊ち繝ｳ: 陦ｨ遉ｺ遒ｺ隱・);
        
        await addButton.click();
        await page.waitForTimeout(2000);
        
        const modal2 = page.locator('[role="dialog"]');
        if (await modal2.isVisible({ timeout: 3000 })) {
          console.log('笨・蝨ｨ蠎ｫ邂｡逅・膚蜩∫匳骭ｲ繝｢繝ｼ繝繝ｫ: UI謫堺ｽ懊〒蜍穂ｽ懃｢ｺ隱肴ｸ医∩');
          
          const nameInput = page.locator('input[name="name"]');
          if (await nameInput.isVisible({ timeout: 3000 })) {
            await nameInput.fill('繝・せ繝亥膚蜩・);
            console.log('笨・蝠・刀蜷榊・蜉・ 蜍穂ｽ懃｢ｺ隱・);
          }
          
          const cancelButton = page.locator('button:has-text("繧ｭ繝｣繝ｳ繧ｻ繝ｫ")');
          if (await cancelButton.isVisible({ timeout: 3000 })) {
            await cancelButton.click();
          }
        } else {
          console.log('笶・蝨ｨ蠎ｫ邂｡逅・膚蜩∫匳骭ｲ繝｢繝ｼ繝繝ｫ: 譛ｪ蜍穂ｽ・);
        }
      } else {
        console.log('笶・譁ｰ隕丞膚蜩∫匳骭ｲ繝懊ち繝ｳ: 譛ｪ陦ｨ遉ｺ');
      }
      
      // 3. 螢ｲ荳顔ｮ｡逅・・蜩∬ｨｭ螳壹Δ繝ｼ繝繝ｫ繝・せ繝・
      console.log('--- 螢ｲ荳顔ｮ｡逅・・蜩∬ｨｭ螳壹Δ繝ｼ繝繝ｫ繝・せ繝・---');
      await page.goto('http://localhost:3002/sales', { waitUntil: 'domcontentloaded' });
      
      const settingsButton = page.locator('button:has-text("蜃ｺ蜩∬ｨｭ螳・)');
      if (await settingsButton.isVisible({ timeout: 5000 })) {
        console.log('笨・蜃ｺ蜩∬ｨｭ螳壹・繧ｿ繝ｳ: 陦ｨ遉ｺ遒ｺ隱・);
        
        await settingsButton.click();
        await page.waitForTimeout(2000);
        
        const modal3 = page.locator('[role="dialog"]');
        if (await modal3.isVisible({ timeout: 3000 })) {
          console.log('笨・螢ｲ荳顔ｮ｡逅・・蜩∬ｨｭ螳壹Δ繝ｼ繝繝ｫ: UI謫堺ｽ懊〒蜍穂ｽ懃｢ｺ隱肴ｸ医∩');
          
          const profitInput = page.locator('input[type="number"]');
          if (await profitInput.isVisible({ timeout: 3000 })) {
            await profitInput.fill('25');
            console.log('笨・蛻ｩ逶顔紫蜈･蜉・ 蜍穂ｽ懃｢ｺ隱・);
          }
          
          const cancelButton = page.locator('button:has-text("繧ｭ繝｣繝ｳ繧ｻ繝ｫ")');
          if (await cancelButton.isVisible({ timeout: 3000 })) {
            await cancelButton.click();
          }
        } else {
          console.log('笶・螢ｲ荳顔ｮ｡逅・・蜩∬ｨｭ螳壹Δ繝ｼ繝繝ｫ: 譛ｪ蜍穂ｽ・);
        }
      } else {
        console.log('笶・蜃ｺ蜩∬ｨｭ螳壹・繧ｿ繝ｳ: 譛ｪ陦ｨ遉ｺ');
      }
      
      // 4. 霑泌刀邂｡逅・ｿ泌刀逕ｳ隲九Δ繝ｼ繝繝ｫ繝・せ繝・
      console.log('--- 霑泌刀邂｡逅・ｿ泌刀逕ｳ隲九Δ繝ｼ繝繝ｫ繝・せ繝・---');
      await page.goto('http://localhost:3002/returns', { waitUntil: 'domcontentloaded' });
      
      const returnButton = page.locator('button:has-text("霑泌刀逕ｳ隲・)');
      if (await returnButton.isVisible({ timeout: 5000 })) {
        console.log('笨・霑泌刀逕ｳ隲九・繧ｿ繝ｳ: 陦ｨ遉ｺ遒ｺ隱・);
        
        await returnButton.click();
        await page.waitForTimeout(2000);
        
        const modal4 = page.locator('[role="dialog"]');
        if (await modal4.isVisible({ timeout: 3000 })) {
          console.log('笨・霑泌刀邂｡逅・ｿ泌刀逕ｳ隲九Δ繝ｼ繝繝ｫ: UI謫堺ｽ懊〒蜍穂ｽ懃｢ｺ隱肴ｸ医∩');
          
          const orderInput = page.locator('input[type="text"]').first();
          if (await orderInput.isVisible({ timeout: 3000 })) {
            await orderInput.fill('ORD-000123');
            console.log('笨・豕ｨ譁・分蜿ｷ蜈･蜉・ 蜍穂ｽ懃｢ｺ隱・);
          }
          
          // 繝｢繝ｼ繝繝ｫ繧帝哩縺倥ｋ
          const closeButton = page.locator('[role="dialog"] button').first();
          if (await closeButton.isVisible({ timeout: 3000 })) {
            await closeButton.click();
          }
        } else {
          console.log('笶・霑泌刀邂｡逅・ｿ泌刀逕ｳ隲九Δ繝ｼ繝繝ｫ: 譛ｪ蜍穂ｽ・);
        }
      } else {
        console.log('笶・霑泌刀逕ｳ隲九・繧ｿ繝ｳ: 譛ｪ陦ｨ遉ｺ');
      }
      
      // 5. 邏榊刀繝励Λ繝ｳ繧ｦ繧｣繧ｶ繝ｼ繝峨ユ繧ｹ繝・
      console.log('--- 邏榊刀繝励Λ繝ｳ繧ｦ繧｣繧ｶ繝ｼ繝峨ユ繧ｹ繝・---');
      await page.goto('http://localhost:3002/delivery-plan', { waitUntil: 'domcontentloaded' });
      
      const wizard = page.locator('.max-w-4xl');
      if (await wizard.isVisible({ timeout: 5000 })) {
        console.log('笨・邏榊刀繝励Λ繝ｳ繧ｦ繧｣繧ｶ繝ｼ繝・ UI謫堺ｽ懊〒蜍穂ｽ懃｢ｺ隱肴ｸ医∩');
        
        const stepIndicator = page.locator('[data-testid="step-1-label"]');
        if (await stepIndicator.isVisible({ timeout: 3000 })) {
          console.log('笨・繧ｹ繝・ャ繝励う繝ｳ繧ｸ繧ｱ繝ｼ繧ｿ繝ｼ: 陦ｨ遉ｺ遒ｺ隱・);
        }
        
        const inputs = page.locator('input[type="text"]');
        const inputCount = await inputs.count();
        if (inputCount > 0) {
          console.log(`笨・蜈･蜉帙ヵ繧｣繝ｼ繝ｫ繝・ ${inputCount}蛟狗｢ｺ隱港);
        }
      } else {
        console.log('笶・邏榊刀繝励Λ繝ｳ繧ｦ繧｣繧ｶ繝ｼ繝・ 譛ｪ陦ｨ遉ｺ');
      }
      
      console.log('=== 譛邨６I謫堺ｽ懃｢ｺ隱阪ユ繧ｹ繝亥ｮ御ｺ・===');
      
    } catch (error) {
      console.error('繝・せ繝亥ｮ溯｡御ｸｭ縺ｫ繧ｨ繝ｩ繝ｼ:', error);
    }
  });
}); 
import { test, expect } from '@playwright/test';

test.describe('識 譛邨６I蜍穂ｽ懃｢ｺ隱・, () => {
  test('繧ｹ繝・・繧ｿ繧ｹ螟画峩繝｡繝九Η繝ｼ縺ｮ螳悟・蜍穂ｽ懊ユ繧ｹ繝・, async ({ page }) => {
    console.log('=== 譛邨６I蜍穂ｽ懃｢ｺ隱埼幕蟋・===');

    // 繝壹・繧ｸ縺ｫ遘ｻ蜍・
    await page.goto('/staff/shipping');
    await page.waitForLoadState('networkidle');
    await page.waitForSelector('.holo-table', { timeout: 10000 });

    // 1. 繧ｹ繝・・繧ｿ繧ｹ螟画峩繝懊ち繝ｳ縺ｮ蟄伜惠遒ｺ隱・
    const statusButtons = page.locator('[role="button"]').filter({ hasText: '繧ｹ繝・・繧ｿ繧ｹ螟画峩' });
    const buttonCount = await statusButtons.count();
    console.log(`笨・繧ｹ繝・・繧ｿ繧ｹ螟画峩繝懊ち繝ｳ謨ｰ: ${buttonCount}`);
    expect(buttonCount).toBeGreaterThan(0);

    // 2. 繝懊ち繝ｳ繧ｯ繝ｪ繝・け縺ｧ繝峨Ο繝・・繝繧ｦ繝ｳ陦ｨ遉ｺ
    const firstButton = statusButtons.first();
    await firstButton.click();
    
    const dropdown = page.locator('[data-testid="unified-status-dropdown"]');
    await expect(dropdown).toBeVisible({ timeout: 5000 });
    console.log('笨・繝峨Ο繝・・繝繧ｦ繝ｳ縺梧ｭ｣蟶ｸ縺ｫ陦ｨ遉ｺ');

    // 3. z-index縺梧ｭ｣縺励￥險ｭ螳壹＆繧後※縺・ｋ
    const zIndex = await dropdown.evaluate((el) => window.getComputedStyle(el).zIndex);
    expect(parseInt(zIndex)).toBe(10000);
    console.log(`笨・z-index: ${zIndex}`);

    // 4. 繧ｹ繝・・繧ｿ繧ｹ繧ｪ繝励す繝ｧ繝ｳ縺ｮ陦ｨ遉ｺ遒ｺ隱・
    const statusOptions = dropdown.locator('.unified-status-option');
    const optionCount = await statusOptions.count();
    console.log(`笨・繧ｹ繝・・繧ｿ繧ｹ繧ｪ繝励す繝ｧ繝ｳ謨ｰ: ${optionCount}`);
    expect(optionCount).toBeGreaterThan(0);

    // 5. 繧ｹ繝・・繧ｿ繧ｹ螟画峩縺ｮ螳溯｡・
    if (optionCount > 0) {
      const firstOption = statusOptions.first();
      const optionText = await firstOption.locator('.unified-status-option-label').textContent();
      console.log(`売 繧ｹ繝・・繧ｿ繧ｹ螟画峩螳溯｡・ ${optionText}`);
      
      await firstOption.click();
      
      // 繝峨Ο繝・・繝繧ｦ繝ｳ縺碁哩縺倥ｋ縺薙→繧堤｢ｺ隱・
      await expect(dropdown).not.toBeVisible({ timeout: 3000 });
      console.log('笨・繧ｹ繝・・繧ｿ繧ｹ螟画峩蠕後↓繝峨Ο繝・・繝繧ｦ繝ｳ縺碁哩縺倥◆');
      
      // 繝医・繧ｹ繝医Γ繝・そ繝ｼ繧ｸ縺ｮ遒ｺ隱・
      const toast = page.locator('.toast, [role="alert"]').first();
      if (await toast.isVisible({ timeout: 2000 })) {
        const toastText = await toast.textContent();
        console.log(`笨・繝医・繧ｹ繝医Γ繝・そ繝ｼ繧ｸ: ${toastText}`);
      }
    }

    // 6. 螟門・繧ｯ繝ｪ繝・け縺ｧ繝峨Ο繝・・繝繧ｦ繝ｳ縺碁哩縺倥ｋ
    await firstButton.click(); // 蜀榊ｺｦ髢九￥
    await expect(dropdown).toBeVisible({ timeout: 3000 });
    
    await page.click('body', { position: { x: 50, y: 50 } });
    await expect(dropdown).not.toBeVisible({ timeout: 3000 });
    console.log('笨・螟門・繧ｯ繝ｪ繝・け縺ｧ繝峨Ο繝・・繝繧ｦ繝ｳ縺碁哩縺倥◆');

    // 7. 隍・焚縺ｮ繝懊ち繝ｳ縺ｮ蜍穂ｽ懃｢ｺ隱・
    if (buttonCount > 1) {
      await statusButtons.nth(0).click();
      await expect(dropdown).toBeVisible({ timeout: 3000 });
      
      await statusButtons.nth(1).click();
      await page.waitForTimeout(500);
      
      const visibleDropdowns = page.locator('[data-testid="unified-status-dropdown"]:visible');
      const visibleCount = await visibleDropdowns.count();
      console.log(`笨・蜷梧凾縺ｫ髢九＞縺ｦ縺・ｋ繝峨Ο繝・・繝繧ｦ繝ｳ謨ｰ: ${visibleCount}`);
      expect(visibleCount).toBeLessThanOrEqual(1);
    }

    console.log('脂 縺吶∋縺ｦ縺ｮ繝・せ繝医′謌仙粥縺励∪縺励◆・・);
  });

  test('UI荳雋ｫ諤ｧ縺ｮ譛邨ら｢ｺ隱・, async ({ page }) => {
    console.log('=== UI荳雋ｫ諤ｧ縺ｮ譛邨ら｢ｺ隱・===');

    await page.goto('/staff/shipping');
    await page.waitForLoadState('networkidle');
    await page.waitForSelector('.holo-table', { timeout: 10000 });

    // 繧ｹ繝・・繧ｿ繧ｹ螟画峩繝懊ち繝ｳ縺ｮ繧ｹ繧ｿ繧､繝ｫ遒ｺ隱・
    const statusButton = page.locator('[role="button"]').filter({ hasText: '繧ｹ繝・・繧ｿ繧ｹ螟画峩' }).first();
    await statusButton.click();

    const dropdown = page.locator('[data-testid="unified-status-dropdown"]');
    await expect(dropdown).toBeVisible({ timeout: 3000 });

    // 邨ｱ荳縺輔ｌ縺櫃SS繧ｯ繝ｩ繧ｹ縺ｮ遒ｺ隱・
    const hasUnifiedClass = await dropdown.evaluate((el) => el.classList.contains('unified-status-menu'));
    console.log(`笨・邨ｱ荳CSS繧ｯ繝ｩ繧ｹ驕ｩ逕ｨ: ${hasUnifiedClass}`);
    expect(hasUnifiedClass).toBe(true);

    // 繧ｹ繝・・繧ｿ繧ｹ繧ｪ繝励す繝ｧ繝ｳ縺ｮ繧ｹ繧ｿ繧､繝ｫ遒ｺ隱・
    const statusOptions = dropdown.locator('.unified-status-option');
    const firstOption = statusOptions.first();
    
    if (await firstOption.isVisible()) {
      const optionClasses = await firstOption.getAttribute('class');
      console.log(`笨・繧ｪ繝励す繝ｧ繝ｳCSS繧ｯ繝ｩ繧ｹ: ${optionClasses}`);
      expect(optionClasses).toContain('unified-status-option');
    }

    console.log('耳 UI荳雋ｫ諤ｧ遒ｺ隱榊ｮ御ｺ・);
  });
}); 
import { test, expect } from '@playwright/test';

// webServer繧剃ｽｿ繧上★縺ｫ謇句虚縺ｧ襍ｷ蜍輔＠縺溘し繝ｼ繝舌・繧偵ユ繧ｹ繝医☆繧・
test.use({ 
  baseURL: 'http://localhost:3002'
});

test.describe('剥 謇句虚繧ｵ繝ｼ繝舌・繝｢繝ｼ繝繝ｫ讖溯・繝・せ繝・, () => {
  
  test('識 繝繝・す繝･繝懊・繝画悄髢馴∈謚槭Δ繝ｼ繝繝ｫ', async ({ page }) => {
    console.log('=== 繝繝・す繝･繝懊・繝画悄髢馴∈謚槭Δ繝ｼ繝繝ｫ繝・せ繝磯幕蟋・===');
    
    try {
      // 繝ｭ繧ｰ繧､繝ｳ繝壹・繧ｸ縺ｫ遘ｻ蜍・
      console.log('繝ｭ繧ｰ繧､繝ｳ繝壹・繧ｸ縺ｫ遘ｻ蜍穂ｸｭ...');
      await page.goto('/login', { waitUntil: 'networkidle' });
      console.log('繝ｭ繧ｰ繧､繝ｳ繝壹・繧ｸ隱ｭ縺ｿ霎ｼ縺ｿ螳御ｺ・);
      
      // 繝ｭ繧ｰ繧､繝ｳ蜃ｦ逅・
      console.log('繝ｭ繧ｰ繧､繝ｳ蜃ｦ逅・幕蟋・..');
      await page.fill('input[name="username"]', 'seller');
      await page.fill('input[name="password"]', 'password');
      await page.click('button[type="submit"]');
      await page.waitForURL('/dashboard', { timeout: 10000 });
      console.log('繝ｭ繧ｰ繧､繝ｳ螳御ｺ・√ム繝・す繝･繝懊・繝峨↓遘ｻ蜍・);
      
      // 繝繝・す繝･繝懊・繝峨・繝ｼ繧ｸ縺ｮ遒ｺ隱・
      await page.waitForTimeout(2000);
      
      // 譛滄俣驕ｸ謚槭・繧ｿ繝ｳ繧呈爾縺・
      console.log('譛滄俣驕ｸ謚槭・繧ｿ繝ｳ繧呈爾縺励※縺・∪縺・..');
      const periodButton = page.locator('button:has-text("繝ｬ繝昴・繝域悄髢薙ｒ驕ｸ謚・)');
      
      const buttonExists = await periodButton.isVisible({ timeout: 5000 });
      console.log(`繝ｬ繝昴・繝域悄髢薙ｒ驕ｸ謚槭・繧ｿ繝ｳ蟄伜惠: ${buttonExists ? '笨・逋ｺ隕・ : '笶・譛ｪ逋ｺ隕・}`);
      
      if (buttonExists) {
        console.log('繝懊ち繝ｳ繧偵け繝ｪ繝・け荳ｭ...');
        await periodButton.click();
        await page.waitForTimeout(2000);
        
        // 繝｢繝ｼ繝繝ｫ縺碁幕縺・◆縺九メ繧ｧ繝・け
        console.log('繝｢繝ｼ繝繝ｫ陦ｨ遉ｺ遒ｺ隱堺ｸｭ...');
        const modal = page.locator('[role="dialog"]');
        const modalOpen = await modal.isVisible({ timeout: 5000 });
        console.log(`譛滄俣驕ｸ謚槭Δ繝ｼ繝繝ｫ髢矩哩: ${modalOpen ? '笨・螳溯｣・ｸ医∩' : '笶・譛ｪ螳溯｣・}`);
        
        if (modalOpen) {
          // DateRangePicker縺ｮ蟄伜惠遒ｺ隱・
          console.log('DateRangePicker遒ｺ隱堺ｸｭ...');
          const dateRangePicker = page.locator('.rdrCalendarWrapper');
          const pickerExists = await dateRangePicker.isVisible({ timeout: 3000 });
          console.log(`DateRangePicker陦ｨ遉ｺ: ${pickerExists ? '笨・螳溯｣・ｸ医∩' : '笶・譛ｪ螳溯｣・}`);
          
          // 驕ｩ逕ｨ繝懊ち繝ｳ縺ｮ蟄伜惠遒ｺ隱・
          console.log('驕ｩ逕ｨ繝懊ち繝ｳ遒ｺ隱堺ｸｭ...');
          const applyButton = page.locator('button:has-text("驕ｩ逕ｨ")');
          const applyExists = await applyButton.isVisible({ timeout: 3000 });
          console.log(`驕ｩ逕ｨ繝懊ち繝ｳ蟄伜惠: ${applyExists ? '笨・螳溯｣・ｸ医∩' : '笶・譛ｪ螳溯｣・}`);
          
          if (applyExists) {
            console.log('驕ｩ逕ｨ繝懊ち繝ｳ繧偵け繝ｪ繝・け荳ｭ...');
            await applyButton.click();
            await page.waitForTimeout(1000);
            
            // 繝｢繝ｼ繝繝ｫ縺碁哩縺倥◆縺九メ繧ｧ繝・け
            console.log('繝｢繝ｼ繝繝ｫ髢峨§繧狗｢ｺ隱堺ｸｭ...');
            const modalClosed = !(await modal.isVisible({ timeout: 3000 }));
            console.log(`繝｢繝ｼ繝繝ｫ髢峨§繧・ ${modalClosed ? '笨・螳溯｣・ｸ医∩' : '笶・譛ｪ螳溯｣・}`);
            
            if (modalClosed && pickerExists) {
              console.log('脂 繝繝・す繝･繝懊・繝画悄髢馴∈謚槭Δ繝ｼ繝繝ｫ: 螳悟・螳溯｣・ｸ医∩');
              expect(true).toBe(true); // 繝・せ繝域・蜉・
            } else {
              console.log('笶・繝繝・す繝･繝懊・繝画悄髢馴∈謚槭Δ繝ｼ繝繝ｫ: 驛ｨ蛻・悴螳溯｣・);
              expect(false).toBe(true); // 繝・せ繝亥､ｱ謨・
            }
          } else {
            console.log('笶・繝繝・す繝･繝懊・繝画悄髢馴∈謚槭Δ繝ｼ繝繝ｫ: 驕ｩ逕ｨ繝懊ち繝ｳ譛ｪ螳溯｣・);
            expect(false).toBe(true); // 繝・せ繝亥､ｱ謨・
          }
        } else {
          console.log('笶・繝繝・す繝･繝懊・繝画悄髢馴∈謚槭Δ繝ｼ繝繝ｫ: 繝｢繝ｼ繝繝ｫ譛ｪ螳溯｣・);
          expect(false).toBe(true); // 繝・せ繝亥､ｱ謨・
        }
      } else {
        console.log('笶・繝繝・す繝･繝懊・繝画悄髢馴∈謚槭・繧ｿ繝ｳ: 繝懊ち繝ｳ譛ｪ螳溯｣・);
        expect(false).toBe(true); // 繝・せ繝亥､ｱ謨・
      }
    } catch (error) {
      console.error('繝・せ繝亥ｮ溯｡御ｸｭ縺ｫ繧ｨ繝ｩ繝ｼ縺檎匱逕・', error);
      expect(false).toBe(true); // 繝・せ繝亥､ｱ謨・
    }
  });

  test('逃 蝨ｨ蠎ｫ邂｡逅・膚蜩∫匳骭ｲ繝｢繝ｼ繝繝ｫ', async ({ page }) => {
    console.log('=== 蝨ｨ蠎ｫ邂｡逅・膚蜩∫匳骭ｲ繝｢繝ｼ繝繝ｫ繝・せ繝磯幕蟋・===');
    
    try {
      // 繝ｭ繧ｰ繧､繝ｳ繝壹・繧ｸ縺ｫ遘ｻ蜍・
      console.log('繝ｭ繧ｰ繧､繝ｳ繝壹・繧ｸ縺ｫ遘ｻ蜍穂ｸｭ...');
      await page.goto('/login', { waitUntil: 'networkidle' });
      console.log('繝ｭ繧ｰ繧､繝ｳ繝壹・繧ｸ隱ｭ縺ｿ霎ｼ縺ｿ螳御ｺ・);
      
      // 繝ｭ繧ｰ繧､繝ｳ蜃ｦ逅・
      console.log('繝ｭ繧ｰ繧､繝ｳ蜃ｦ逅・幕蟋・..');
      await page.fill('input[name="username"]', 'seller');
      await page.fill('input[name="password"]', 'password');
      await page.click('button[type="submit"]');
      await page.waitForURL('/dashboard', { timeout: 10000 });
      console.log('繝ｭ繧ｰ繧､繝ｳ螳御ｺ・);
      
      // 蝨ｨ蠎ｫ邂｡逅・・繝ｼ繧ｸ縺ｫ遘ｻ蜍・
      console.log('蝨ｨ蠎ｫ邂｡逅・・繝ｼ繧ｸ縺ｫ遘ｻ蜍穂ｸｭ...');
      await page.goto('/inventory', { waitUntil: 'networkidle' });
      await page.waitForTimeout(2000);
      console.log('蝨ｨ蠎ｫ邂｡逅・・繝ｼ繧ｸ隱ｭ縺ｿ霎ｼ縺ｿ螳御ｺ・);
      
      // 譁ｰ隕丞膚蜩∫匳骭ｲ繝懊ち繝ｳ繧呈爾縺・
      console.log('蝠・刀逋ｻ骭ｲ繝懊ち繝ｳ繧呈爾縺励※縺・∪縺・..');
      const addButton = page.locator('button:has-text("譁ｰ隕丞膚蜩∫匳骭ｲ"), button:has-text("譁ｰ隕・)').first();
      
      const buttonExists = await addButton.isVisible({ timeout: 5000 });
      console.log(`譁ｰ隕丞膚蜩∫匳骭ｲ繝懊ち繝ｳ蟄伜惠: ${buttonExists ? '笨・逋ｺ隕・ : '笶・譛ｪ逋ｺ隕・}`);
      
      if (buttonExists) {
        console.log('繝懊ち繝ｳ繧偵け繝ｪ繝・け荳ｭ...');
        await addButton.click();
        await page.waitForTimeout(2000);
        
        // 繝｢繝ｼ繝繝ｫ縺碁幕縺・◆縺九メ繧ｧ繝・け
        console.log('繝｢繝ｼ繝繝ｫ陦ｨ遉ｺ遒ｺ隱堺ｸｭ...');
        const modal = page.locator('[role="dialog"]');
        const modalOpen = await modal.isVisible({ timeout: 5000 });
        console.log(`蝠・刀逋ｻ骭ｲ繝｢繝ｼ繝繝ｫ髢矩哩: ${modalOpen ? '笨・螳溯｣・ｸ医∩' : '笶・譛ｪ螳溯｣・}`);
        
        if (modalOpen) {
          // 繝輔か繝ｼ繝隕∫ｴ縺ｮ蟄伜惠遒ｺ隱・
          console.log('繝輔か繝ｼ繝隕∫ｴ遒ｺ隱堺ｸｭ...');
          const nameInput = page.locator('input[name="name"]');
          const nameExists = await nameInput.isVisible({ timeout: 3000 });
          console.log(`蝠・刀蜷榊・蜉帙ヵ繧｣繝ｼ繝ｫ繝・ ${nameExists ? '笨・螳溯｣・ｸ医∩' : '笶・譛ｪ螳溯｣・}`);
          
          const skuInput = page.locator('input[name="sku"]');
          const skuExists = await skuInput.isVisible({ timeout: 3000 });
          console.log(`SKU蜈･蜉帙ヵ繧｣繝ｼ繝ｫ繝・ ${skuExists ? '笨・螳溯｣・ｸ医∩' : '笶・譛ｪ螳溯｣・}`);
          
          if (nameExists && skuExists) {
            // 螳滄圀縺ｫ蜈･蜉帙ユ繧ｹ繝・
            console.log('蜈･蜉帙ユ繧ｹ繝亥ｮ溯｡御ｸｭ...');
            await nameInput.fill('繝・せ繝亥膚蜩・);
            await skuInput.fill('TEST-001');
            
            const nameValue = await nameInput.inputValue();
            const skuValue = await skuInput.inputValue();
            
            console.log(`蜈･蜉帶ｩ溯・繝・せ繝・ ${nameValue === '繝・せ繝亥膚蜩・ && skuValue === 'TEST-001' ? '笨・螳溯｣・ｸ医∩' : '笶・譛ｪ螳溯｣・}`);
            
            // 騾∽ｿ｡繝懊ち繝ｳ縺ｮ蟄伜惠遒ｺ隱・
            console.log('騾∽ｿ｡繝懊ち繝ｳ遒ｺ隱堺ｸｭ...');
            const submitButton = page.locator('button:has-text("逋ｻ骭ｲ"), button:has-text("菫晏ｭ・)').first();
            const submitExists = await submitButton.isVisible({ timeout: 3000 });
            console.log(`騾∽ｿ｡繝懊ち繝ｳ蟄伜惠: ${submitExists ? '笨・螳溯｣・ｸ医∩' : '笶・譛ｪ螳溯｣・}`);
            
            if (submitExists && nameValue === '繝・せ繝亥膚蜩・ && skuValue === 'TEST-001') {
              console.log('脂 蝨ｨ蠎ｫ邂｡逅・膚蜩∫匳骭ｲ繝｢繝ｼ繝繝ｫ: 螳悟・螳溯｣・ｸ医∩');
              expect(true).toBe(true); // 繝・せ繝域・蜉・
            } else {
              console.log('笶・蝨ｨ蠎ｫ邂｡逅・膚蜩∫匳骭ｲ繝｢繝ｼ繝繝ｫ: 驛ｨ蛻・悴螳溯｣・);
              expect(false).toBe(true); // 繝・せ繝亥､ｱ謨・
            }
          } else {
            console.log('笶・蝨ｨ蠎ｫ邂｡逅・膚蜩∫匳骭ｲ繝｢繝ｼ繝繝ｫ: 繝輔か繝ｼ繝隕∫ｴ譛ｪ螳溯｣・);
            expect(false).toBe(true); // 繝・せ繝亥､ｱ謨・
          }
        } else {
          console.log('笶・蝨ｨ蠎ｫ邂｡逅・膚蜩∫匳骭ｲ繝｢繝ｼ繝繝ｫ: 繝｢繝ｼ繝繝ｫ譛ｪ螳溯｣・);
          expect(false).toBe(true); // 繝・せ繝亥､ｱ謨・
        }
      } else {
        console.log('笶・蝨ｨ蠎ｫ邂｡逅・膚蜩∫匳骭ｲ繝懊ち繝ｳ: 繝懊ち繝ｳ譛ｪ螳溯｣・);
        expect(false).toBe(true); // 繝・せ繝亥､ｱ謨・
      }
    } catch (error) {
      console.error('繝・せ繝亥ｮ溯｡御ｸｭ縺ｫ繧ｨ繝ｩ繝ｼ縺檎匱逕・', error);
      expect(false).toBe(true); // 繝・せ繝亥､ｱ謨・
    }
  });
}); 
import { test, expect } from '@playwright/test';

test('噫 繧ｯ繧､繝・け繧ｹ繝・・繧ｿ繧ｹ螟画峩繝・せ繝・, async ({ page }) => {
  // 繧ｳ繝ｳ繧ｽ繝ｼ繝ｫ繝ｭ繧ｰ繧堤屮隕・
  page.on('console', msg => console.log('PAGE LOG:', msg.text()));

  await page.goto('/staff/shipping');
  await page.waitForLoadState('networkidle');
  await page.waitForSelector('.holo-table', { timeout: 10000 });

  console.log('=== 繧ｯ繧､繝・け繝・せ繝磯幕蟋・===');

  // 繧ｹ繝・・繧ｿ繧ｹ螟画峩繝懊ち繝ｳ繧偵け繝ｪ繝・け
  const statusButton = page.locator('[role="button"]').filter({ hasText: '繧ｹ繝・・繧ｿ繧ｹ螟画峩' }).first();
  await expect(statusButton).toBeVisible();
  
  console.log('繝懊ち繝ｳ繧偵け繝ｪ繝・け...');
  await statusButton.click();

  // 繝峨Ο繝・・繝繧ｦ繝ｳ縺瑚｡ｨ遉ｺ縺輔ｌ繧九％縺ｨ繧堤｢ｺ隱・
  const dropdown = page.locator('[data-testid="unified-status-dropdown"]');
  await expect(dropdown).toBeVisible({ timeout: 5000 });
  console.log('繝峨Ο繝・・繝繧ｦ繝ｳ陦ｨ遉ｺ遒ｺ隱・);

  // 繧ｹ繝・・繧ｿ繧ｹ繧ｪ繝励す繝ｧ繝ｳ繧貞叙蠕・
  const statusOptions = dropdown.locator('.unified-status-option');
  const optionCount = await statusOptions.count();
  console.log(`繧ｪ繝励す繝ｧ繝ｳ謨ｰ: ${optionCount}`);

  if (optionCount > 0) {
    const firstOption = statusOptions.first();
    
    // 繧ｪ繝励す繝ｧ繝ｳ縺瑚ｦ九∴繧狗憾諷九↓縺ｪ繧九∪縺ｧ蠕・ｩ・
    await expect(firstOption).toBeVisible({ timeout: 3000 });
    
    // 繧ｪ繝励す繝ｧ繝ｳ繧偵け繝ｪ繝・け
    console.log('繧ｪ繝励す繝ｧ繝ｳ繧偵け繝ｪ繝・け...');
    await firstOption.click({ force: true });
    
    // 蟆代＠蠕・ｩ・
    await page.waitForTimeout(1000);
    
    // 繝峨Ο繝・・繝繧ｦ繝ｳ縺ｮ迥ｶ諷九ｒ遒ｺ隱・
    const isVisible = await dropdown.isVisible();
    console.log(`繝峨Ο繝・・繝繧ｦ繝ｳ陦ｨ遉ｺ迥ｶ諷・ ${isVisible}`);
    
    if (!isVisible) {
      console.log('笨・謌仙粥: 繝峨Ο繝・・繝繧ｦ繝ｳ縺碁哩縺倥∪縺励◆');
    } else {
      console.log('笶・螟ｱ謨・ 繝峨Ο繝・・繝繧ｦ繝ｳ縺後∪縺髢九＞縺ｦ縺・∪縺・);
    }
  }

  console.log('=== 繝・せ繝亥ｮ御ｺ・===');
}); 
import { test, expect } from '@playwright/test';

test.describe('囹 蜃ｺ闕ｷ邂｡逅・判髱｢ - 隧ｳ邏ｰ繝｢繝ｼ繝繝ｫ讖溯・繝・せ繝・, () => {
  
  test.beforeEach(async ({ page }) => {
    // 繝ｭ繧ｰ繧､繝ｳ蜃ｦ逅・
    await page.goto('/login');
    await page.waitForTimeout(2000);
    
    // 繧ｻ繝ｩ繝ｼ繝ｭ繧ｰ繧､繝ｳ繝懊ち繝ｳ繧偵け繝ｪ繝・け
    const sellerButton = page.locator('[data-testid="seller-login"]');
    if (await sellerButton.isVisible()) {
      await sellerButton.click();
      await page.waitForTimeout(1000);
    }
    
    // 繝ｭ繧ｰ繧､繝ｳ繝懊ち繝ｳ繧偵け繝ｪ繝・け
    const loginButton = page.locator('button:has-text("繝ｭ繧ｰ繧､繝ｳ")');
    if (await loginButton.isVisible()) {
      await loginButton.click();
      await page.waitForTimeout(3000);
    }
  });

  test('剥 蜃ｺ闕ｷ邂｡逅・判髱｢ - 隧ｳ邏ｰ繝懊ち繝ｳ縺ｨ繝｢繝ｼ繝繝ｫ陦ｨ遉ｺ繝・せ繝・, async ({ page }) => {
    console.log('=== 蜃ｺ闕ｷ邂｡逅・判髱｢隧ｳ邏ｰ繝｢繝ｼ繝繝ｫ繝・せ繝磯幕蟋・===');
    
    // 蜃ｺ闕ｷ邂｡逅・判髱｢縺ｫ遘ｻ蜍・
    await page.goto('/staff/shipping');
    await page.waitForTimeout(3000);
    
    // 繝壹・繧ｸ縺梧ｭ｣縺励￥隱ｭ縺ｿ霎ｼ縺ｾ繧後◆縺狗｢ｺ隱・
    const pageTitle = await page.textContent('h1');
    console.log(`繝壹・繧ｸ繧ｿ繧､繝医Ν: ${pageTitle}`);
    
    // 隧ｳ邏ｰ繝懊ち繝ｳ繧呈爾縺・
    const detailButtons = page.locator('button:has-text("隧ｳ邏ｰ")');
    const detailButtonCount = await detailButtons.count();
    console.log(`隧ｳ邏ｰ繝懊ち繝ｳ謨ｰ: ${detailButtonCount}`);
    
    if (detailButtonCount > 0) {
      // 譛蛻昴・隧ｳ邏ｰ繝懊ち繝ｳ繧偵け繝ｪ繝・け
      console.log('隧ｳ邏ｰ繝懊ち繝ｳ繧偵け繝ｪ繝・け荳ｭ...');
      await detailButtons.first().click();
      await page.waitForTimeout(2000);
      
      // 繝｢繝ｼ繝繝ｫ縺瑚｡ｨ遉ｺ縺輔ｌ縺溘°遒ｺ隱・
      const modal = page.locator('[role="dialog"]');
      const isModalVisible = await modal.isVisible();
      console.log(`繝｢繝ｼ繝繝ｫ陦ｨ遉ｺ迥ｶ諷・ ${isModalVisible}`);
      
      if (isModalVisible) {
        // 繝｢繝ｼ繝繝ｫ蜀・ｮｹ繧堤｢ｺ隱・
        const modalTitle = await page.textContent('[role="dialog"] h2');
        console.log(`繝｢繝ｼ繝繝ｫ繧ｿ繧､繝医Ν: ${modalTitle}`);
        
        // 繧ｹ繝・・繧ｿ繧ｹ螟画峩繝懊ち繝ｳ繧堤｢ｺ隱・
        const statusButtons = page.locator('[role="dialog"] button:has-text("騾ｲ繧√ｋ")');
        const statusButtonCount = await statusButtons.count();
        console.log(`繧ｹ繝・・繧ｿ繧ｹ螟画峩繝懊ち繝ｳ謨ｰ: ${statusButtonCount}`);
        
        // 謫堺ｽ懊・繧ｿ繝ｳ繧堤｢ｺ隱・
        const actionButtons = page.locator('[role="dialog"] button:has-text("驟埼√Λ繝吶Ν"), [role="dialog"] button:has-text("譴ｱ蛹・欠遉ｺ")');
        const actionButtonCount = await actionButtons.count();
        console.log(`謫堺ｽ懊・繧ｿ繝ｳ謨ｰ: ${actionButtonCount}`);
        
        // 讌ｭ蜍吶ヵ繝ｭ繝ｼ縺ｮ迥ｶ諷九ｒ遒ｺ隱・
        const businessFlow = page.locator('.intelligence-card');
        const isBusinessFlowVisible = await businessFlow.isVisible();
        console.log(`讌ｭ蜍吶ヵ繝ｭ繝ｼ陦ｨ遉ｺ迥ｶ諷・ ${isBusinessFlowVisible}`);
        
        // 繝｢繝ｼ繝繝ｫ繧帝哩縺倥ｋ
        const closeButton = page.locator('[role="dialog"] button:has-text("髢峨§繧・), [role="dialog"] button[aria-label="Close"]');
        if (await closeButton.isVisible()) {
          await closeButton.click();
          await page.waitForTimeout(1000);
        }
        
        // 繝｢繝ｼ繝繝ｫ縺碁哩縺倥ｉ繧後◆縺狗｢ｺ隱・
        const isModalClosed = !(await modal.isVisible());
        console.log(`繝｢繝ｼ繝繝ｫ髢峨§迥ｶ諷・ ${isModalClosed}`);
        
        expect(isModalVisible).toBe(true);
        expect(modalTitle).toContain('隧ｳ邏ｰ');
        expect(statusButtonCount).toBeGreaterThan(0);
        expect(isModalClosed).toBe(true);
      } else {
        console.log('笶・繝｢繝ｼ繝繝ｫ縺瑚｡ｨ遉ｺ縺輔ｌ縺ｾ縺帙ｓ縺ｧ縺励◆');
        expect(isModalVisible).toBe(true);
      }
    } else {
      console.log('笶・隧ｳ邏ｰ繝懊ち繝ｳ縺瑚ｦ九▽縺九ｊ縺ｾ縺帙ｓ縺ｧ縺励◆');
      expect(detailButtonCount).toBeGreaterThan(0);
    }
  });

  test('識 繧ｹ繝・・繧ｿ繧ｹ螟画峩繝懊ち繝ｳ讖溯・繝・せ繝・, async ({ page }) => {
    console.log('=== 繧ｹ繝・・繧ｿ繧ｹ螟画峩繝懊ち繝ｳ讖溯・繝・せ繝磯幕蟋・===');
    
    // 蜃ｺ闕ｷ邂｡逅・判髱｢縺ｫ遘ｻ蜍・
    await page.goto('/staff/shipping');
    await page.waitForTimeout(3000);
    
    // 隧ｳ邏ｰ繝懊ち繝ｳ繧偵け繝ｪ繝・け
    const detailButtons = page.locator('button:has-text("隧ｳ邏ｰ")');
    if (await detailButtons.count() > 0) {
      await detailButtons.first().click();
      await page.waitForTimeout(2000);
      
      // 繝｢繝ｼ繝繝ｫ蜀・・繧ｹ繝・・繧ｿ繧ｹ螟画峩繝懊ち繝ｳ繧偵ユ繧ｹ繝・
      const statusButtons = page.locator('[role="dialog"] button:has-text("騾ｲ繧√ｋ")');
      const buttonCount = await statusButtons.count();
      
      for (let i = 0; i < Math.min(buttonCount, 3); i++) {
        const button = statusButtons.nth(i);
        const buttonText = await button.textContent();
        console.log(`繧ｹ繝・・繧ｿ繧ｹ螟画峩繝懊ち繝ｳ ${i + 1}: ${buttonText}`);
        
        // 繝懊ち繝ｳ縺後け繝ｪ繝・け蜿ｯ閭ｽ縺狗｢ｺ隱・
        const isEnabled = await button.isEnabled();
        console.log(`繝懊ち繝ｳ譛牙柑迥ｶ諷・ ${isEnabled}`);
        
        if (isEnabled) {
          // 繝懊ち繝ｳ繧偵け繝ｪ繝・け・亥ｮ滄圀縺ｮ蜃ｦ逅・・陦後ｏ縺ｪ縺・ｼ・
          console.log(`繝懊ち繝ｳ "${buttonText}" 繧偵け繝ｪ繝・け蜿ｯ閭ｽ`);
        }
      }
      
      expect(buttonCount).toBeGreaterThan(0);
    }
  });

  test('導 繝ｬ繧ｹ繝昴Φ繧ｷ繝悶ョ繧ｶ繧､繝ｳ繝・せ繝・, async ({ page }) => {
    console.log('=== 繝ｬ繧ｹ繝昴Φ繧ｷ繝悶ョ繧ｶ繧､繝ｳ繝・せ繝磯幕蟋・===');
    
    // 蜃ｺ闕ｷ邂｡逅・判髱｢縺ｫ遘ｻ蜍・
    await page.goto('/staff/shipping');
    await page.waitForTimeout(3000);
    
    // 逡ｰ縺ｪ繧狗判髱｢繧ｵ繧､繧ｺ縺ｧ繝・せ繝・
    const viewports = [
      { width: 1920, height: 1080, name: '繝・せ繧ｯ繝医ャ繝・ },
      { width: 1024, height: 768, name: '繧ｿ繝悶Ξ繝・ヨ' },
      { width: 375, height: 667, name: '繝｢繝舌う繝ｫ' }
    ];
    
    for (const viewport of viewports) {
      console.log(`--- ${viewport.name}繧ｵ繧､繧ｺ繝・せ繝・(${viewport.width}x${viewport.height}) ---`);
      
      await page.setViewportSize({ width: viewport.width, height: viewport.height });
      await page.waitForTimeout(1000);
      
      // 隧ｳ邏ｰ繝懊ち繝ｳ縺瑚｡ｨ遉ｺ縺輔ｌ縺ｦ縺・ｋ縺狗｢ｺ隱・
      const detailButtons = page.locator('button:has-text("隧ｳ邏ｰ")');
      const isVisible = await detailButtons.first().isVisible();
      console.log(`隧ｳ邏ｰ繝懊ち繝ｳ陦ｨ遉ｺ迥ｶ諷・ ${isVisible}`);
      
      if (isVisible) {
        // 繝｢繝ｼ繝繝ｫ繧帝幕縺・
        await detailButtons.first().click();
        await page.waitForTimeout(2000);
        
        // 繝｢繝ｼ繝繝ｫ縺碁←蛻・↓陦ｨ遉ｺ縺輔ｌ縺ｦ縺・ｋ縺狗｢ｺ隱・
        const modal = page.locator('[role="dialog"]');
        const modalVisible = await modal.isVisible();
        console.log(`繝｢繝ｼ繝繝ｫ陦ｨ遉ｺ迥ｶ諷・ ${modalVisible}`);
        
        if (modalVisible) {
          // 繝｢繝ｼ繝繝ｫ縺ｮ繧ｵ繧､繧ｺ縺碁←蛻・°遒ｺ隱・
          const modalBox = await modal.boundingBox();
          if (modalBox) {
            console.log(`繝｢繝ｼ繝繝ｫ繧ｵ繧､繧ｺ: ${modalBox.width}x${modalBox.height}`);
            
            // 逕ｻ髱｢縺九ｉ縺ｯ縺ｿ蜃ｺ縺励※縺・↑縺・°遒ｺ隱・
            const isWithinViewport = modalBox.x >= 0 && 
                                   modalBox.y >= 0 && 
                                   modalBox.x + modalBox.width <= viewport.width &&
                                   modalBox.y + modalBox.height <= viewport.height;
            console.log(`逕ｻ髱｢蜀・庶縺ｾ繧顔憾諷・ ${isWithinViewport}`);
          }
          
          // 繝｢繝ｼ繝繝ｫ繧帝哩縺倥ｋ
          const closeButton = page.locator('[role="dialog"] button:has-text("髢峨§繧・), [role="dialog"] button[aria-label="Close"]');
          if (await closeButton.isVisible()) {
            await closeButton.click();
            await page.waitForTimeout(1000);
          }
        }
        
        expect(modalVisible).toBe(true);
      }
    }
  });
}); 
import { test, expect } from '@playwright/test';

test.describe('肌 繧ｷ繝ｳ繝励Ν繝峨Ο繝・・繝繧ｦ繝ｳ繝・せ繝・, () => {
  test('繝峨Ο繝・・繝繧ｦ繝ｳ縺ｮ蝓ｺ譛ｬ蜍穂ｽ懃｢ｺ隱・, async ({ page }) => {
    // 繧ｳ繝ｳ繧ｽ繝ｼ繝ｫ繝ｭ繧ｰ繧堤屮隕・
    page.on('console', msg => console.log('PAGE LOG:', msg.text()));

    await page.goto('/staff/shipping');
    await page.waitForLoadState('networkidle');
    await page.waitForSelector('.holo-table', { timeout: 10000 });

    console.log('=== 繝・せ繝磯幕蟋・===');

    // 繧ｹ繝・・繧ｿ繧ｹ螟画峩繝懊ち繝ｳ繧偵け繝ｪ繝・け
    const statusButton = page.locator('[role="button"]').filter({ hasText: '繧ｹ繝・・繧ｿ繧ｹ螟画峩' }).first();
    await expect(statusButton).toBeVisible();
    
    console.log('繝懊ち繝ｳ繧偵け繝ｪ繝・け縺励∪縺・..');
    await statusButton.click();

    // 繝峨Ο繝・・繝繧ｦ繝ｳ縺瑚｡ｨ遉ｺ縺輔ｌ繧九％縺ｨ繧堤｢ｺ隱・
    const dropdown = page.locator('[data-testid="unified-status-dropdown"]');
    await expect(dropdown).toBeVisible({ timeout: 5000 });
    console.log('繝峨Ο繝・・繝繧ｦ繝ｳ縺瑚｡ｨ遉ｺ縺輔ｌ縺ｾ縺励◆');

    // 2遘貞ｾ・ｩ・
    await page.waitForTimeout(2000);

    // 繝懊ち繝ｳ繧貞・繧ｯ繝ｪ繝・け
    console.log('繝懊ち繝ｳ繧貞・繧ｯ繝ｪ繝・け縺励∪縺・..');
    await statusButton.click();

    // 2遘貞ｾ・ｩ溘＠縺ｦ繝峨Ο繝・・繝繧ｦ繝ｳ縺ｮ迥ｶ諷九ｒ遒ｺ隱・
    await page.waitForTimeout(2000);
    
    const isVisible = await dropdown.isVisible();
    console.log('繝峨Ο繝・・繝繧ｦ繝ｳ縺ｮ陦ｨ遉ｺ迥ｶ諷・', isVisible);

    if (isVisible) {
      console.log('繝峨Ο繝・・繝繧ｦ繝ｳ縺後∪縺陦ｨ遉ｺ縺輔ｌ縺ｦ縺・∪縺・- 螟門・繧偵け繝ｪ繝・け縺励※髢峨§縺ｾ縺・);
      await page.click('body', { position: { x: 50, y: 50 } });
      await page.waitForTimeout(1000);
      
      const isStillVisible = await dropdown.isVisible();
      console.log('螟門・繧ｯ繝ｪ繝・け蠕後・陦ｨ遉ｺ迥ｶ諷・', isStillVisible);
    }
  });
}); 
import { test, expect } from '@playwright/test';

test.describe('剥 繧ｷ繝ｳ繝励Ν繝｢繝ｼ繝繝ｫ讖溯・繝・せ繝・, () => {
  
  test('識 繝繝・す繝･繝懊・繝画悄髢馴∈謚槭Δ繝ｼ繝繝ｫ', async ({ page }) => {
    console.log('=== 繝繝・す繝･繝懊・繝画悄髢馴∈謚槭Δ繝ｼ繝繝ｫ繝・せ繝・===');
    
    // 繝ｭ繧ｰ繧､繝ｳ
    await page.goto('http://localhost:3002/login');
    await page.waitForTimeout(3000);
    await page.fill('input[name="username"]', 'seller');
    await page.fill('input[name="password"]', 'password');
    await page.click('button[type="submit"]');
    await page.waitForTimeout(3000);
    
    // 繝繝・す繝･繝懊・繝峨↓遘ｻ蜍・
    await page.goto('http://localhost:3002/dashboard');
    await page.waitForTimeout(3000);
    
    // 譛滄俣驕ｸ謚槭・繧ｿ繝ｳ繧呈爾縺・
    const periodButton = page.locator('button:has-text("譛滄俣驕ｸ謚・), button:has-text("繝ｬ繝昴・繝域悄髢・)').first();
    const buttonExists = await periodButton.isVisible();
    console.log(`譛滄俣驕ｸ謚槭・繧ｿ繝ｳ蟄伜惠: ${buttonExists ? '笨・ : '笶・}`);
    
    if (buttonExists) {
      await periodButton.click();
      await page.waitForTimeout(2000);
      
      // 繝｢繝ｼ繝繝ｫ縺碁幕縺・◆縺九メ繧ｧ繝・け
      const modal = page.locator('[role="dialog"]');
      const modalOpen = await modal.isVisible();
      console.log(`繝｢繝ｼ繝繝ｫ髢矩哩: ${modalOpen ? '笨・螳溯｣・ｸ医∩' : '笶・譛ｪ螳溯｣・}`);
      
      if (modalOpen) {
        // DateRangePicker縺ｮ蟄伜惠遒ｺ隱・
        const dateRangePicker = page.locator('.rdrCalendarWrapper');
        const pickerExists = await dateRangePicker.isVisible();
        console.log(`DateRangePicker陦ｨ遉ｺ: ${pickerExists ? '笨・螳溯｣・ｸ医∩' : '笶・譛ｪ螳溯｣・}`);
        
        // 驕ｩ逕ｨ繝懊ち繝ｳ縺ｮ蟄伜惠遒ｺ隱・
        const applyButton = page.locator('button:has-text("驕ｩ逕ｨ")');
        const applyExists = await applyButton.isVisible();
        console.log(`驕ｩ逕ｨ繝懊ち繝ｳ蟄伜惠: ${applyExists ? '笨・螳溯｣・ｸ医∩' : '笶・譛ｪ螳溯｣・}`);
        
        if (applyExists) {
          await applyButton.click();
          await page.waitForTimeout(1000);
          
          // 繝｢繝ｼ繝繝ｫ縺碁哩縺倥◆縺九メ繧ｧ繝・け
          const modalClosed = !(await modal.isVisible());
          console.log(`繝｢繝ｼ繝繝ｫ髢峨§繧・ ${modalClosed ? '笨・螳溯｣・ｸ医∩' : '笶・譛ｪ螳溯｣・}`);
          
          if (modalClosed) {
            console.log('脂 繝繝・す繝･繝懊・繝画悄髢馴∈謚槭Δ繝ｼ繝繝ｫ: 螳悟・螳溯｣・ｸ医∩');
          } else {
            console.log('笶・繝繝・す繝･繝懊・繝画悄髢馴∈謚槭Δ繝ｼ繝繝ｫ: 驛ｨ蛻・悴螳溯｣・);
          }
        } else {
          console.log('笶・繝繝・す繝･繝懊・繝画悄髢馴∈謚槭Δ繝ｼ繝繝ｫ: 驛ｨ蛻・悴螳溯｣・);
        }
      } else {
        console.log('笶・繝繝・す繝･繝懊・繝画悄髢馴∈謚槭Δ繝ｼ繝繝ｫ: 譛ｪ螳溯｣・);
      }
    } else {
      console.log('笶・繝繝・す繝･繝懊・繝画悄髢馴∈謚槭・繧ｿ繝ｳ: 譛ｪ螳溯｣・);
    }
  });

  test('逃 蝨ｨ蠎ｫ邂｡逅・膚蜩∫匳骭ｲ繝｢繝ｼ繝繝ｫ', async ({ page }) => {
    console.log('=== 蝨ｨ蠎ｫ邂｡逅・膚蜩∫匳骭ｲ繝｢繝ｼ繝繝ｫ繝・せ繝・===');
    
    // 繝ｭ繧ｰ繧､繝ｳ
    await page.goto('http://localhost:3002/login');
    await page.waitForTimeout(3000);
    await page.fill('input[name="username"]', 'seller');
    await page.fill('input[name="password"]', 'password');
    await page.click('button[type="submit"]');
    await page.waitForTimeout(3000);
    
    // 蝨ｨ蠎ｫ邂｡逅・・繝ｼ繧ｸ縺ｫ遘ｻ蜍・
    await page.goto('http://localhost:3002/inventory');
    await page.waitForTimeout(3000);
    
    // 譁ｰ隕丞膚蜩∫匳骭ｲ繝懊ち繝ｳ繧呈爾縺・
    const addButton = page.locator('button:has-text("譁ｰ隕丞膚蜩∫匳骭ｲ"), button:has-text("譁ｰ隕・)').first();
    const buttonExists = await addButton.isVisible();
    console.log(`譁ｰ隕丞膚蜩∫匳骭ｲ繝懊ち繝ｳ蟄伜惠: ${buttonExists ? '笨・ : '笶・}`);
    
    if (buttonExists) {
      await addButton.click();
      await page.waitForTimeout(2000);
      
      // 繝｢繝ｼ繝繝ｫ縺碁幕縺・◆縺九メ繧ｧ繝・け
      const modal = page.locator('[role="dialog"]');
      const modalOpen = await modal.isVisible();
      console.log(`蝠・刀逋ｻ骭ｲ繝｢繝ｼ繝繝ｫ髢矩哩: ${modalOpen ? '笨・螳溯｣・ｸ医∩' : '笶・譛ｪ螳溯｣・}`);
      
      if (modalOpen) {
        // 繝輔か繝ｼ繝隕∫ｴ縺ｮ蟄伜惠遒ｺ隱・
        const nameInput = page.locator('input[name="name"]');
        const nameExists = await nameInput.isVisible();
        console.log(`蝠・刀蜷榊・蜉帙ヵ繧｣繝ｼ繝ｫ繝・ ${nameExists ? '笨・螳溯｣・ｸ医∩' : '笶・譛ｪ螳溯｣・}`);
        
        const skuInput = page.locator('input[name="sku"]');
        const skuExists = await skuInput.isVisible();
        console.log(`SKU蜈･蜉帙ヵ繧｣繝ｼ繝ｫ繝・ ${skuExists ? '笨・螳溯｣・ｸ医∩' : '笶・譛ｪ螳溯｣・}`);
        
        if (nameExists && skuExists) {
          // 螳滄圀縺ｫ蜈･蜉帙ユ繧ｹ繝・
          await nameInput.fill('繝・せ繝亥膚蜩・);
          await skuInput.fill('TEST-001');
          
          const nameValue = await nameInput.inputValue();
          const skuValue = await skuInput.inputValue();
          
          console.log(`蜈･蜉帶ｩ溯・繝・せ繝・ ${nameValue === '繝・せ繝亥膚蜩・ && skuValue === 'TEST-001' ? '笨・螳溯｣・ｸ医∩' : '笶・譛ｪ螳溯｣・}`);
          
          // 騾∽ｿ｡繝懊ち繝ｳ縺ｮ蟄伜惠遒ｺ隱・
          const submitButton = page.locator('button:has-text("逋ｻ骭ｲ"), button:has-text("菫晏ｭ・)').first();
          const submitExists = await submitButton.isVisible();
          console.log(`騾∽ｿ｡繝懊ち繝ｳ蟄伜惠: ${submitExists ? '笨・螳溯｣・ｸ医∩' : '笶・譛ｪ螳溯｣・}`);
          
          if (submitExists) {
            console.log('脂 蝨ｨ蠎ｫ邂｡逅・膚蜩∫匳骭ｲ繝｢繝ｼ繝繝ｫ: 螳悟・螳溯｣・ｸ医∩');
          } else {
            console.log('笶・蝨ｨ蠎ｫ邂｡逅・膚蜩∫匳骭ｲ繝｢繝ｼ繝繝ｫ: 驛ｨ蛻・悴螳溯｣・);
          }
        } else {
          console.log('笶・蝨ｨ蠎ｫ邂｡逅・膚蜩∫匳骭ｲ繝｢繝ｼ繝繝ｫ: 驛ｨ蛻・悴螳溯｣・);
        }
      } else {
        console.log('笶・蝨ｨ蠎ｫ邂｡逅・膚蜩∫匳骭ｲ繝｢繝ｼ繝繝ｫ: 譛ｪ螳溯｣・);
      }
    } else {
      console.log('笶・蝨ｨ蠎ｫ邂｡逅・膚蜩∫匳骭ｲ繝懊ち繝ｳ: 譛ｪ螳溯｣・);
    }
  });

  test('腸 螢ｲ荳顔ｮ｡逅・・蜩∬ｨｭ螳壹Δ繝ｼ繝繝ｫ', async ({ page }) => {
    console.log('=== 螢ｲ荳顔ｮ｡逅・・蜩∬ｨｭ螳壹Δ繝ｼ繝繝ｫ繝・せ繝・===');
    
    // 繝ｭ繧ｰ繧､繝ｳ
    await page.goto('http://localhost:3002/login');
    await page.waitForTimeout(3000);
    await page.fill('input[name="username"]', 'seller');
    await page.fill('input[name="password"]', 'password');
    await page.click('button[type="submit"]');
    await page.waitForTimeout(3000);
    
    // 螢ｲ荳顔ｮ｡逅・・繝ｼ繧ｸ縺ｫ遘ｻ蜍・
    await page.goto('http://localhost:3002/sales');
    await page.waitForTimeout(3000);
    
    // 蜃ｺ蜩∬ｨｭ螳壹・繧ｿ繝ｳ繧呈爾縺・
    const settingsButton = page.locator('button:has-text("蜃ｺ蜩∬ｨｭ螳・)').first();
    const buttonExists = await settingsButton.isVisible();
    console.log(`蜃ｺ蜩∬ｨｭ螳壹・繧ｿ繝ｳ蟄伜惠: ${buttonExists ? '笨・ : '笶・}`);
    
    if (buttonExists) {
      await settingsButton.click();
      await page.waitForTimeout(2000);
      
      // 繝｢繝ｼ繝繝ｫ縺碁幕縺・◆縺九メ繧ｧ繝・け
      const modal = page.locator('[role="dialog"]');
      const modalOpen = await modal.isVisible();
      console.log(`蜃ｺ蜩∬ｨｭ螳壹Δ繝ｼ繝繝ｫ髢矩哩: ${modalOpen ? '笨・螳溯｣・ｸ医∩' : '笶・譛ｪ螳溯｣・}`);
      
      if (modalOpen) {
        // 險ｭ螳夐・岼縺ｮ蟄伜惠遒ｺ隱・
        const profitInput = page.locator('input[type="number"]');
        const profitExists = await profitInput.isVisible();
        console.log(`蛻ｩ逶顔紫蜈･蜉帙ヵ繧｣繝ｼ繝ｫ繝・ ${profitExists ? '笨・螳溯｣・ｸ医∩' : '笶・譛ｪ螳溯｣・}`);
        
        const checkbox = page.locator('input[type="checkbox"]');
        const checkboxExists = await checkbox.isVisible();
        console.log(`繝√ぉ繝・け繝懊ャ繧ｯ繧ｹ: ${checkboxExists ? '笨・螳溯｣・ｸ医∩' : '笶・譛ｪ螳溯｣・}`);
        
        if (profitExists && checkboxExists) {
          // 螳滄圀縺ｫ謫堺ｽ懊ユ繧ｹ繝・
          await profitInput.fill('25');
          await checkbox.check();
          
          const profitValue = await profitInput.inputValue();
          const isChecked = await checkbox.isChecked();
          
          console.log(`險ｭ螳壽桃菴懊ユ繧ｹ繝・ ${profitValue === '25' && isChecked ? '笨・螳溯｣・ｸ医∩' : '笶・譛ｪ螳溯｣・}`);
          
          // 菫晏ｭ倥・繧ｿ繝ｳ縺ｮ蟄伜惠遒ｺ隱・
          const saveButton = page.locator('button:has-text("菫晏ｭ・)').first();
          const saveExists = await saveButton.isVisible();
          console.log(`菫晏ｭ倥・繧ｿ繝ｳ蟄伜惠: ${saveExists ? '笨・螳溯｣・ｸ医∩' : '笶・譛ｪ螳溯｣・}`);
          
          if (saveExists) {
            console.log('脂 螢ｲ荳顔ｮ｡逅・・蜩∬ｨｭ螳壹Δ繝ｼ繝繝ｫ: 螳悟・螳溯｣・ｸ医∩');
          } else {
            console.log('笶・螢ｲ荳顔ｮ｡逅・・蜩∬ｨｭ螳壹Δ繝ｼ繝繝ｫ: 驛ｨ蛻・悴螳溯｣・);
          }
        } else {
          console.log('笶・螢ｲ荳顔ｮ｡逅・・蜩∬ｨｭ螳壹Δ繝ｼ繝繝ｫ: 驛ｨ蛻・悴螳溯｣・);
        }
      } else {
        console.log('笶・螢ｲ荳顔ｮ｡逅・・蜩∬ｨｭ螳壹Δ繝ｼ繝繝ｫ: 譛ｪ螳溯｣・);
      }
    } else {
      console.log('笶・螢ｲ荳顔ｮ｡逅・・蜩∬ｨｭ螳壹・繧ｿ繝ｳ: 譛ｪ螳溯｣・);
    }
  });

  test('売 霑泌刀邂｡逅・ｿ泌刀逕ｳ隲九Δ繝ｼ繝繝ｫ', async ({ page }) => {
    console.log('=== 霑泌刀邂｡逅・ｿ泌刀逕ｳ隲九Δ繝ｼ繝繝ｫ繝・せ繝・===');
    
    // 繝ｭ繧ｰ繧､繝ｳ
    await page.goto('http://localhost:3002/login');
    await page.waitForTimeout(3000);
    await page.fill('input[name="username"]', 'seller');
    await page.fill('input[name="password"]', 'password');
    await page.click('button[type="submit"]');
    await page.waitForTimeout(3000);
    
    // 霑泌刀邂｡逅・・繝ｼ繧ｸ縺ｫ遘ｻ蜍・
    await page.goto('http://localhost:3002/returns');
    await page.waitForTimeout(3000);
    
    // 霑泌刀逕ｳ隲九・繧ｿ繝ｳ繧呈爾縺・
    const returnButton = page.locator('button:has-text("霑泌刀逕ｳ隲・)').first();
    const buttonExists = await returnButton.isVisible();
    console.log(`霑泌刀逕ｳ隲九・繧ｿ繝ｳ蟄伜惠: ${buttonExists ? '笨・ : '笶・}`);
    
    if (buttonExists) {
      await returnButton.click();
      await page.waitForTimeout(2000);
      
      // 繝｢繝ｼ繝繝ｫ縺碁幕縺・◆縺九メ繧ｧ繝・け
      const modal = page.locator('[role="dialog"]');
      const modalOpen = await modal.isVisible();
      console.log(`霑泌刀逕ｳ隲九Δ繝ｼ繝繝ｫ髢矩哩: ${modalOpen ? '笨・螳溯｣・ｸ医∩' : '笶・譛ｪ螳溯｣・}`);
      
      if (modalOpen) {
        // 繝輔か繝ｼ繝隕∫ｴ縺ｮ蟄伜惠遒ｺ隱・
        const orderIdInput = page.locator('input[name="orderId"]');
        const orderIdExists = await orderIdInput.isVisible();
        console.log(`豕ｨ譁・分蜿ｷ蜈･蜉帙ヵ繧｣繝ｼ繝ｫ繝・ ${orderIdExists ? '笨・螳溯｣・ｸ医∩' : '笶・譛ｪ螳溯｣・}`);
        
        const productNameInput = page.locator('input[name="productName"]');
        const productNameExists = await productNameInput.isVisible();
        console.log(`蝠・刀蜷榊・蜉帙ヵ繧｣繝ｼ繝ｫ繝・ ${productNameExists ? '笨・螳溯｣・ｸ医∩' : '笶・譛ｪ螳溯｣・}`);
        
        const reasonRadio = page.locator('input[type="radio"]');
        const reasonExists = await reasonRadio.first().isVisible();
        console.log(`霑泌刀逅・罰驕ｸ謚・ ${reasonExists ? '笨・螳溯｣・ｸ医∩' : '笶・譛ｪ螳溯｣・}`);
        
        if (orderIdExists && productNameExists && reasonExists) {
          // 螳滄圀縺ｫ蜈･蜉帙ユ繧ｹ繝・
          await orderIdInput.fill('ORD-000123');
          await productNameInput.fill('繝・せ繝亥膚蜩・);
          await reasonRadio.first().check();
          
          const orderValue = await orderIdInput.inputValue();
          const productValue = await productNameInput.inputValue();
          const isChecked = await reasonRadio.first().isChecked();
          
          console.log(`蜈･蜉帶ｩ溯・繝・せ繝・ ${orderValue === 'ORD-000123' && productValue === '繝・せ繝亥膚蜩・ && isChecked ? '笨・螳溯｣・ｸ医∩' : '笶・譛ｪ螳溯｣・}`);
          
          // 騾∽ｿ｡繝懊ち繝ｳ縺ｮ蟄伜惠遒ｺ隱・
          const submitButton = page.locator('button:has-text("謠仙・"), button:has-text("逕ｳ隲・)').first();
          const submitExists = await submitButton.isVisible();
          console.log(`騾∽ｿ｡繝懊ち繝ｳ蟄伜惠: ${submitExists ? '笨・螳溯｣・ｸ医∩' : '笶・譛ｪ螳溯｣・}`);
          
          if (submitExists) {
            console.log('脂 霑泌刀邂｡逅・ｿ泌刀逕ｳ隲九Δ繝ｼ繝繝ｫ: 螳悟・螳溯｣・ｸ医∩');
          } else {
            console.log('笶・霑泌刀邂｡逅・ｿ泌刀逕ｳ隲九Δ繝ｼ繝繝ｫ: 驛ｨ蛻・悴螳溯｣・);
          }
        } else {
          console.log('笶・霑泌刀邂｡逅・ｿ泌刀逕ｳ隲九Δ繝ｼ繝繝ｫ: 驛ｨ蛻・悴螳溯｣・);
        }
      } else {
        console.log('笶・霑泌刀邂｡逅・ｿ泌刀逕ｳ隲九Δ繝ｼ繝繝ｫ: 譛ｪ螳溯｣・);
      }
    } else {
      console.log('笶・霑泌刀邂｡逅・ｿ泌刀逕ｳ隲九・繧ｿ繝ｳ: 譛ｪ螳溯｣・);
    }
  });

  test('囹 邏榊刀繝励Λ繝ｳ繧ｦ繧｣繧ｶ繝ｼ繝・, async ({ page }) => {
    console.log('=== 邏榊刀繝励Λ繝ｳ繧ｦ繧｣繧ｶ繝ｼ繝峨ユ繧ｹ繝・===');
    
    // 繝ｭ繧ｰ繧､繝ｳ
    await page.goto('http://localhost:3002/login');
    await page.waitForTimeout(3000);
    await page.fill('input[name="username"]', 'seller');
    await page.fill('input[name="password"]', 'password');
    await page.click('button[type="submit"]');
    await page.waitForTimeout(3000);
    
    // 邏榊刀繝励Λ繝ｳ繝壹・繧ｸ縺ｫ遘ｻ蜍・
    await page.goto('http://localhost:3002/delivery-plan');
    await page.waitForTimeout(3000);
    
    // 譁ｰ隕上・繝ｩ繝ｳ菴懈・繝懊ち繝ｳ繧呈爾縺・
    const createButton = page.locator('button:has-text("譁ｰ隕・), button:has-text("菴懈・")').first();
    const buttonExists = await createButton.isVisible();
    console.log(`譁ｰ隕上・繝ｩ繝ｳ菴懈・繝懊ち繝ｳ蟄伜惠: ${buttonExists ? '笨・ : '笶・}`);
    
    if (buttonExists) {
      await createButton.click();
      await page.waitForTimeout(2000);
      
      // 繧ｦ繧｣繧ｶ繝ｼ繝峨∪縺溘・繝｢繝ｼ繝繝ｫ縺碁幕縺・◆縺九メ繧ｧ繝・け
      const modal = page.locator('[role="dialog"]');
      const wizard = page.locator('.wizard, .step');
      
      const modalOpen = await modal.isVisible();
      const wizardOpen = await wizard.isVisible();
      
      console.log(`繧ｦ繧｣繧ｶ繝ｼ繝・繝｢繝ｼ繝繝ｫ髢矩哩: ${modalOpen || wizardOpen ? '笨・螳溯｣・ｸ医∩' : '笶・譛ｪ螳溯｣・}`);
      
      if (modalOpen || wizardOpen) {
        // 蜈･蜉帙ヵ繧｣繝ｼ繝ｫ繝峨・蟄伜惠遒ｺ隱・
        const inputs = await page.locator('input').all();
        const inputCount = inputs.length;
        console.log(`蜈･蜉帙ヵ繧｣繝ｼ繝ｫ繝画焚: ${inputCount}蛟義);
        
        if (inputCount > 0) {
          // 譛蛻昴・蜈･蜉帙ヵ繧｣繝ｼ繝ｫ繝峨〒蜍穂ｽ懊ユ繧ｹ繝・
          const firstInput = inputs[0];
          if (await firstInput.isVisible()) {
            await firstInput.fill('繝・せ繝亥・蜉・);
            const inputValue = await firstInput.inputValue();
            console.log(`蜈･蜉帶ｩ溯・繝・せ繝・ ${inputValue === '繝・せ繝亥・蜉・ ? '笨・螳溯｣・ｸ医∩' : '笶・譛ｪ螳溯｣・}`);
          }
          
          // 谺｡縺ｸ繝懊ち繝ｳ縺ｮ蟄伜惠遒ｺ隱・
          const nextButton = page.locator('button:has-text("谺｡縺ｸ"), button:has-text("邯夊｡・)').first();
          const nextExists = await nextButton.isVisible();
          console.log(`谺｡縺ｸ繝懊ち繝ｳ蟄伜惠: ${nextExists ? '笨・螳溯｣・ｸ医∩' : '笶・譛ｪ螳溯｣・}`);
          
          if (nextExists && inputCount > 0) {
            console.log('脂 邏榊刀繝励Λ繝ｳ繧ｦ繧｣繧ｶ繝ｼ繝・ 螳悟・螳溯｣・ｸ医∩');
          } else {
            console.log('笶・邏榊刀繝励Λ繝ｳ繧ｦ繧｣繧ｶ繝ｼ繝・ 驛ｨ蛻・悴螳溯｣・);
          }
        } else {
          console.log('笶・邏榊刀繝励Λ繝ｳ繧ｦ繧｣繧ｶ繝ｼ繝・ 驛ｨ蛻・悴螳溯｣・);
        }
      } else {
        console.log('笶・邏榊刀繝励Λ繝ｳ繧ｦ繧｣繧ｶ繝ｼ繝・ 譛ｪ螳溯｣・);
      }
    } else {
      console.log('笶・邏榊刀繝励Λ繝ｳ菴懈・繝懊ち繝ｳ: 譛ｪ螳溯｣・);
    }
  });
}); 
import { test, expect } from '@playwright/test';

test.describe('剥 蛹・峡逧ФI繧ｳ繝ｳ繝昴・繝阪Φ繝域ｩ溯・繝・せ繝・, () => {
  
  test.beforeEach(async ({ page }) => {
    await page.goto('/login');
    await page.click('[data-testid="seller-login"]');
    await page.click('button:has-text("繝ｭ繧ｰ繧､繝ｳ")');
    await page.waitForURL('/dashboard');
    await page.waitForTimeout(2000);
  });

  // 蜈ｨ逕ｻ髱｢縺ｮ繧ｵ繧､繝峨Γ繝九Η繝ｼ繝・せ繝・
  test('搭 繧ｵ繧､繝峨Γ繝九Η繝ｼ - 蜈ｨ逕ｻ髱｢繝翫ン繧ｲ繝ｼ繧ｷ繝ｧ繝ｳ讖溯・繝・せ繝・, async ({ page }) => {
    console.log('=== 繧ｵ繧､繝峨Γ繝九Η繝ｼ蛹・峡繝・せ繝磯幕蟋・===');
    
    const sideMenuItems = [
      { text: '繝繝・す繝･繝懊・繝・, url: '/dashboard' },
      { text: '蝨ｨ蠎ｫ邂｡逅・, url: '/inventory' },
      { text: '蝠・刀蜃ｺ蜩・, url: '/sales' },
      { text: '驟埼∫ｮ｡逅・, url: '/delivery' },
      { text: '霑泌刀邂｡逅・, url: '/returns' },
      { text: '繝ｬ繝昴・繝・, url: '/reports' },
      { text: '險ｭ螳・, url: '/settings' },
      { text: '繝励Ο繝輔ぅ繝ｼ繝ｫ', url: '/profile' },
      { text: '繧ｹ繧ｿ繝・ヵ', url: '/staff' }
    ];
    
    const results = [];
    
    for (const item of sideMenuItems) {
      console.log(`繝・せ繝井ｸｭ: ${item.text}`);
      
      // 繧ｵ繧､繝峨Γ繝九Η繝ｼ縺ｮ繝ｪ繝ｳ繧ｯ/繝懊ち繝ｳ繧呈爾縺・
      const menuLink = page.locator(`a:has-text("${item.text}"), button:has-text("${item.text}")`);
      const isVisible = await menuLink.isVisible();
      
      if (isVisible) {
        try {
          await menuLink.first().click();
          await page.waitForTimeout(2000);
          
          const currentUrl = page.url();
          const isWorking = currentUrl.includes(item.url);
          
          results.push({
            component: `繧ｵ繧､繝峨Γ繝九Η繝ｼ: ${item.text}`,
            visible: true,
            clickable: true,
            functional: isWorking,
            url: currentUrl,
            status: isWorking ? '笨・蜍穂ｽ應ｸｭ' : '笶・髱樊ｩ溯・'
          });
          
          console.log(`${item.text}: ${isWorking ? '笨・蜍穂ｽ應ｸｭ' : '笶・髱樊ｩ溯・'} - URL: ${currentUrl}`);
        } catch (error) {
          results.push({
            component: `繧ｵ繧､繝峨Γ繝九Η繝ｼ: ${item.text}`,
            visible: true,
            clickable: false,
            functional: false,
            error: error.message,
            status: '笶・繧ｯ繝ｪ繝・け荳榊庄'
          });
          console.log(`${item.text}: 笶・繧ｯ繝ｪ繝・け荳榊庄 - 繧ｨ繝ｩ繝ｼ: ${error.message}`);
        }
      } else {
        results.push({
          component: `繧ｵ繧､繝峨Γ繝九Η繝ｼ: ${item.text}`,
          visible: false,
          clickable: false,
          functional: false,
          status: '笶・髱櫁｡ｨ遉ｺ'
        });
        console.log(`${item.text}: 笶・髱櫁｡ｨ遉ｺ`);
      }
    }
    
    console.log('\n=== 繧ｵ繧､繝峨Γ繝九Η繝ｼ繝・せ繝育ｵ先棡 ===');
    results.forEach(result => {
      console.log(`${result.component}: ${result.status}`);
    });
    
    // 邨先棡繧偵ヵ繧｡繧､繝ｫ縺ｫ菫晏ｭ・
    console.log('\n' + JSON.stringify(results, null, 2));
  });

  // 繝倥ャ繝繝ｼ繝｡繝九Η繝ｼ繝・せ繝・
  test('識 繝倥ャ繝繝ｼ繝｡繝九Η繝ｼ - 蜈ｨ繝｡繝九Η繝ｼ讖溯・繝・せ繝・, async ({ page }) => {
    console.log('=== 繝倥ャ繝繝ｼ繝｡繝九Η繝ｼ蛹・峡繝・せ繝磯幕蟋・===');
    
    const results = [];
    
    // 繝励Ο繝輔ぅ繝ｼ繝ｫ繝｡繝九Η繝ｼ繝・せ繝・
    const profileButton = page.locator('button[aria-label*="繝励Ο繝輔ぅ繝ｼ繝ｫ"], button:has-text("繝励Ο繝輔ぅ繝ｼ繝ｫ"), .profile-menu');
    if (await profileButton.isVisible()) {
      try {
        await profileButton.first().click();
        await page.waitForTimeout(1000);
        
        const dropdown = page.locator('[role="menu"], .dropdown-menu');
        const isDropdownVisible = await dropdown.isVisible();
        
        results.push({
          component: '繝倥ャ繝繝ｼ: 繝励Ο繝輔ぅ繝ｼ繝ｫ繝｡繝九Η繝ｼ',
          visible: true,
          clickable: true,
          functional: isDropdownVisible,
          status: isDropdownVisible ? '笨・蜍穂ｽ應ｸｭ' : '笶・髱樊ｩ溯・'
        });
        
        console.log(`繝励Ο繝輔ぅ繝ｼ繝ｫ繝｡繝九Η繝ｼ: ${isDropdownVisible ? '笨・蜍穂ｽ應ｸｭ' : '笶・髱樊ｩ溯・'}`);
      } catch (error) {
        results.push({
          component: '繝倥ャ繝繝ｼ: 繝励Ο繝輔ぅ繝ｼ繝ｫ繝｡繝九Η繝ｼ',
          visible: true,
          clickable: false,
          functional: false,
          error: error.message,
          status: '笶・繧ｯ繝ｪ繝・け荳榊庄'
        });
      }
    }
    
    // 騾夂衍繝懊ち繝ｳ繝・せ繝・
    const notificationButton = page.locator('button[aria-label*="騾夂衍"], button:has-text("騾夂衍"), .notification-button');
    if (await notificationButton.isVisible()) {
      try {
        await notificationButton.first().click();
        await page.waitForTimeout(1000);
        
        const notificationPanel = page.locator('.notification-panel, [role="dialog"]');
        const isPanelVisible = await notificationPanel.isVisible();
        
        results.push({
          component: '繝倥ャ繝繝ｼ: 騾夂衍繝懊ち繝ｳ',
          visible: true,
          clickable: true,
          functional: isPanelVisible,
          status: isPanelVisible ? '笨・蜍穂ｽ應ｸｭ' : '笶・髱樊ｩ溯・'
        });
        
        console.log(`騾夂衍繝懊ち繝ｳ: ${isPanelVisible ? '笨・蜍穂ｽ應ｸｭ' : '笶・髱樊ｩ溯・'}`);
      } catch (error) {
        results.push({
          component: '繝倥ャ繝繝ｼ: 騾夂衍繝懊ち繝ｳ',
          visible: true,
          clickable: false,
          functional: false,
          error: error.message,
          status: '笶・繧ｯ繝ｪ繝・け荳榊庄'
        });
      }
    }
    
    // 讀懃ｴ｢繝懊ち繝ｳ繝・せ繝・
    const searchButton = page.locator('button[aria-label*="讀懃ｴ｢"], button:has-text("讀懃ｴ｢"), .search-button');
    if (await searchButton.isVisible()) {
      try {
        await searchButton.first().click();
        await page.waitForTimeout(1000);
        
        const searchModal = page.locator('.search-modal, [role="dialog"]');
        const isSearchVisible = await searchModal.isVisible();
        
        results.push({
          component: '繝倥ャ繝繝ｼ: 讀懃ｴ｢繝懊ち繝ｳ',
          visible: true,
          clickable: true,
          functional: isSearchVisible,
          status: isSearchVisible ? '笨・蜍穂ｽ應ｸｭ' : '笶・髱樊ｩ溯・'
        });
        
        console.log(`讀懃ｴ｢繝懊ち繝ｳ: ${isSearchVisible ? '笨・蜍穂ｽ應ｸｭ' : '笶・髱樊ｩ溯・'}`);
      } catch (error) {
        results.push({
          component: '繝倥ャ繝繝ｼ: 讀懃ｴ｢繝懊ち繝ｳ',
          visible: true,
          clickable: false,
          functional: false,
          error: error.message,
          status: '笶・繧ｯ繝ｪ繝・け荳榊庄'
        });
      }
    }
    
    console.log('\n=== 繝倥ャ繝繝ｼ繝｡繝九Η繝ｼ繝・せ繝育ｵ先棡 ===');
    results.forEach(result => {
      console.log(`${result.component}: ${result.status}`);
    });
    
    console.log('\n' + JSON.stringify(results, null, 2));
  });

  // 蜷・判髱｢縺ｮ繝懊ョ繧｣繧ｳ繝ｳ繝昴・繝阪Φ繝医ユ繧ｹ繝・
  test('肌 繝繝・す繝･繝懊・繝・- 繝懊ョ繧｣繧ｳ繝ｳ繝昴・繝阪Φ繝域ｩ溯・繝・せ繝・, async ({ page }) => {
    console.log('=== 繝繝・す繝･繝懊・繝・繝懊ョ繧｣繧ｳ繝ｳ繝昴・繝阪Φ繝医ユ繧ｹ繝磯幕蟋・===');
    
    await page.goto('/dashboard');
    await page.waitForTimeout(2000);
    
    const results = [];
    
    // 蜈ｨ繝懊ち繝ｳ繧偵ユ繧ｹ繝・
    const allButtons = page.locator('button');
    const buttonCount = await allButtons.count();
    console.log(`繝繝・す繝･繝懊・繝臥ｷ上・繧ｿ繝ｳ謨ｰ: ${buttonCount}`);
    
    for (let i = 0; i < buttonCount; i++) {
      const button = allButtons.nth(i);
      const buttonText = await button.textContent();
      const isVisible = await button.isVisible();
      const isEnabled = await button.isEnabled();
      
      if (isVisible && isEnabled) {
        try {
          const originalUrl = page.url();
          await button.click();
          await page.waitForTimeout(1500);
          
          const newUrl = page.url();
          const hasModal = await page.locator('[role="dialog"]').isVisible();
          const hasChanges = originalUrl !== newUrl || hasModal;
          
          results.push({
            component: `繝繝・す繝･繝懊・繝峨・繧ｿ繝ｳ: "${buttonText}"`,
            visible: true,
            clickable: true,
            functional: hasChanges,
            status: hasChanges ? '笨・蜍穂ｽ應ｸｭ' : '笶・髱樊ｩ溯・'
          });
          
          console.log(`繝懊ち繝ｳ "${buttonText}": ${hasChanges ? '笨・蜍穂ｽ應ｸｭ' : '笶・髱樊ｩ溯・'}`);
          
          // 繝｢繝ｼ繝繝ｫ縺碁幕縺・◆蝣ｴ蜷医・髢峨§繧・
          if (hasModal) {
            const closeButton = page.locator('button:has-text("繧ｭ繝｣繝ｳ繧ｻ繝ｫ"), button:has-text("髢峨§繧・), button:has-text("ﾃ・)');
            if (await closeButton.first().isVisible()) {
              await closeButton.first().click();
              await page.waitForTimeout(1000);
            }
          }
          
          // URL縺悟､峨ｏ縺｣縺溷ｴ蜷医・蜈・↓謌ｻ繧・
          if (originalUrl !== newUrl) {
            await page.goto('/dashboard');
            await page.waitForTimeout(1000);
          }
        } catch (error) {
          results.push({
            component: `繝繝・す繝･繝懊・繝峨・繧ｿ繝ｳ: "${buttonText}"`,
            visible: true,
            clickable: false,
            functional: false,
            error: error.message,
            status: '笶・繧ｯ繝ｪ繝・け荳榊庄'
          });
          console.log(`繝懊ち繝ｳ "${buttonText}": 笶・繧ｯ繝ｪ繝・け荳榊庄`);
        }
      } else {
        results.push({
          component: `繝繝・す繝･繝懊・繝峨・繧ｿ繝ｳ: "${buttonText}"`,
          visible: isVisible,
          clickable: false,
          functional: false,
          status: '笶・髱櫁｡ｨ遉ｺ縺ｾ縺溘・辟｡蜉ｹ'
        });
      }
    }
    
    // 繝励Ν繝繧ｦ繝ｳ・医そ繝ｬ繧ｯ繝茨ｼ峨ユ繧ｹ繝・
    const selects = page.locator('select');
    const selectCount = await selects.count();
    console.log(`繝繝・す繝･繝懊・繝臥ｷ上・繝ｫ繝繧ｦ繝ｳ謨ｰ: ${selectCount}`);
    
    for (let i = 0; i < selectCount; i++) {
      const select = selects.nth(i);
      const isVisible = await select.isVisible();
      const isEnabled = await select.isEnabled();
      
      if (isVisible && isEnabled) {
        try {
          const options = await select.locator('option').count();
          if (options > 1) {
            await select.selectOption({ index: 1 });
            const selectedValue = await select.inputValue();
            
            results.push({
              component: `繝繝・す繝･繝懊・繝峨・繝ｫ繝繧ｦ繝ｳ ${i + 1}`,
              visible: true,
              clickable: true,
              functional: true,
              selectedValue,
              status: '笨・蜍穂ｽ應ｸｭ'
            });
            
            console.log(`繝励Ν繝繧ｦ繝ｳ ${i + 1}: 笨・蜍穂ｽ應ｸｭ - 驕ｸ謚槫､: ${selectedValue}`);
          }
        } catch (error) {
          results.push({
            component: `繝繝・す繝･繝懊・繝峨・繝ｫ繝繧ｦ繝ｳ ${i + 1}`,
            visible: true,
            clickable: false,
            functional: false,
            error: error.message,
            status: '笶・驕ｸ謚樔ｸ榊庄'
          });
        }
      }
    }
    
    // 繝√ぉ繝・け繝懊ャ繧ｯ繧ｹ繝・せ繝・
    const checkboxes = page.locator('input[type="checkbox"]');
    const checkboxCount = await checkboxes.count();
    console.log(`繝繝・す繝･繝懊・繝臥ｷ上メ繧ｧ繝・け繝懊ャ繧ｯ繧ｹ謨ｰ: ${checkboxCount}`);
    
    for (let i = 0; i < checkboxCount; i++) {
      const checkbox = checkboxes.nth(i);
      const isVisible = await checkbox.isVisible();
      const isEnabled = await checkbox.isEnabled();
      
      if (isVisible && isEnabled) {
        try {
          const originalState = await checkbox.isChecked();
          await checkbox.click();
          await page.waitForTimeout(500);
          const newState = await checkbox.isChecked();
          
          results.push({
            component: `繝繝・す繝･繝懊・繝峨メ繧ｧ繝・け繝懊ャ繧ｯ繧ｹ ${i + 1}`,
            visible: true,
            clickable: true,
            functional: originalState !== newState,
            status: originalState !== newState ? '笨・蜍穂ｽ應ｸｭ' : '笶・髱樊ｩ溯・'
          });
          
          console.log(`繝√ぉ繝・け繝懊ャ繧ｯ繧ｹ ${i + 1}: ${originalState !== newState ? '笨・蜍穂ｽ應ｸｭ' : '笶・髱樊ｩ溯・'}`);
        } catch (error) {
          results.push({
            component: `繝繝・す繝･繝懊・繝峨メ繧ｧ繝・け繝懊ャ繧ｯ繧ｹ ${i + 1}`,
            visible: true,
            clickable: false,
            functional: false,
            error: error.message,
            status: '笶・繧ｯ繝ｪ繝・け荳榊庄'
          });
        }
      }
    }
    
    // 繝ｪ繝ｳ繧ｯ繝・せ繝・
    const links = page.locator('a[href]');
    const linkCount = await links.count();
    console.log(`繝繝・す繝･繝懊・繝臥ｷ上Μ繝ｳ繧ｯ謨ｰ: ${linkCount}`);
    
    for (let i = 0; i < Math.min(linkCount, 10); i++) { // 譛蛻昴・10蛟九ｒ繝・せ繝・
      const link = links.nth(i);
      const isVisible = await link.isVisible();
      const href = await link.getAttribute('href');
      
      if (isVisible && href) {
        try {
          const originalUrl = page.url();
          await link.click();
          await page.waitForTimeout(1500);
          
          const newUrl = page.url();
          const hasNavigation = originalUrl !== newUrl;
          
          results.push({
            component: `繝繝・す繝･繝懊・繝峨Μ繝ｳ繧ｯ ${i + 1}`,
            visible: true,
            clickable: true,
            functional: hasNavigation,
            href,
            status: hasNavigation ? '笨・蜍穂ｽ應ｸｭ' : '笶・髱樊ｩ溯・'
          });
          
          console.log(`繝ｪ繝ｳ繧ｯ ${i + 1} (${href}): ${hasNavigation ? '笨・蜍穂ｽ應ｸｭ' : '笶・髱樊ｩ溯・'}`);
          
          // 蜈・↓謌ｻ繧・
          if (hasNavigation) {
            await page.goto('/dashboard');
            await page.waitForTimeout(1000);
          }
        } catch (error) {
          results.push({
            component: `繝繝・す繝･繝懊・繝峨Μ繝ｳ繧ｯ ${i + 1}`,
            visible: true,
            clickable: false,
            functional: false,
            href,
            error: error.message,
            status: '笶・繧ｯ繝ｪ繝・け荳榊庄'
          });
        }
      }
    }
    
    console.log('\n=== 繝繝・す繝･繝懊・繝・繝懊ョ繧｣繧ｳ繝ｳ繝昴・繝阪Φ繝医ユ繧ｹ繝育ｵ先棡 ===');
    results.forEach(result => {
      console.log(`${result.component}: ${result.status}`);
    });
    
    console.log('\n' + JSON.stringify(results, null, 2));
  });

  // 蝨ｨ蠎ｫ邂｡逅・判髱｢縺ｮ繝懊ョ繧｣繧ｳ繝ｳ繝昴・繝阪Φ繝医ユ繧ｹ繝・
  test('逃 蝨ｨ蠎ｫ邂｡逅・- 繝懊ョ繧｣繧ｳ繝ｳ繝昴・繝阪Φ繝域ｩ溯・繝・せ繝・, async ({ page }) => {
    console.log('=== 蝨ｨ蠎ｫ邂｡逅・繝懊ョ繧｣繧ｳ繝ｳ繝昴・繝阪Φ繝医ユ繧ｹ繝磯幕蟋・===');
    
    await page.goto('/inventory');
    await page.waitForTimeout(2000);
    
    const results = [];
    
    // 蜈ｨ繝懊ち繝ｳ繧偵ユ繧ｹ繝・
    const allButtons = page.locator('button');
    const buttonCount = await allButtons.count();
    console.log(`蝨ｨ蠎ｫ邂｡逅・ｷ上・繧ｿ繝ｳ謨ｰ: ${buttonCount}`);
    
    for (let i = 0; i < buttonCount; i++) {
      const button = allButtons.nth(i);
      const buttonText = await button.textContent();
      const isVisible = await button.isVisible();
      const isEnabled = await button.isEnabled();
      
      if (isVisible && isEnabled) {
        try {
          const originalUrl = page.url();
          await button.click();
          await page.waitForTimeout(1500);
          
          const newUrl = page.url();
          const hasModal = await page.locator('[role="dialog"]').isVisible();
          const hasChanges = originalUrl !== newUrl || hasModal;
          
          results.push({
            component: `蝨ｨ蠎ｫ邂｡逅・・繧ｿ繝ｳ: "${buttonText}"`,
            visible: true,
            clickable: true,
            functional: hasChanges,
            status: hasChanges ? '笨・蜍穂ｽ應ｸｭ' : '笶・髱樊ｩ溯・'
          });
          
          console.log(`繝懊ち繝ｳ "${buttonText}": ${hasChanges ? '笨・蜍穂ｽ應ｸｭ' : '笶・髱樊ｩ溯・'}`);
          
          // 繝｢繝ｼ繝繝ｫ縺碁幕縺・◆蝣ｴ蜷医・髢峨§繧・
          if (hasModal) {
            const closeButton = page.locator('button:has-text("繧ｭ繝｣繝ｳ繧ｻ繝ｫ"), button:has-text("髢峨§繧・), button:has-text("ﾃ・)');
            if (await closeButton.first().isVisible()) {
              await closeButton.first().click();
              await page.waitForTimeout(1000);
            }
          }
          
          // URL縺悟､峨ｏ縺｣縺溷ｴ蜷医・蜈・↓謌ｻ繧・
          if (originalUrl !== newUrl) {
            await page.goto('/inventory');
            await page.waitForTimeout(1000);
          }
        } catch (error) {
          results.push({
            component: `蝨ｨ蠎ｫ邂｡逅・・繧ｿ繝ｳ: "${buttonText}"`,
            visible: true,
            clickable: false,
            functional: false,
            error: error.message,
            status: '笶・繧ｯ繝ｪ繝・け荳榊庄'
          });
          console.log(`繝懊ち繝ｳ "${buttonText}": 笶・繧ｯ繝ｪ繝・け荳榊庄`);
        }
      }
    }
    
    console.log('\n=== 蝨ｨ蠎ｫ邂｡逅・繝懊ョ繧｣繧ｳ繝ｳ繝昴・繝阪Φ繝医ユ繧ｹ繝育ｵ先棡 ===');
    results.forEach(result => {
      console.log(`${result.component}: ${result.status}`);
    });
    
    console.log('\n' + JSON.stringify(results, null, 2));
  });

  // 繝｢繝ｼ繝繝ｫ繝・せ繝・
  test('鹿 繝｢繝ｼ繝繝ｫ讖溯・繝・せ繝・, async ({ page }) => {
    console.log('=== 繝｢繝ｼ繝繝ｫ讖溯・繝・せ繝磯幕蟋・===');
    
    const results = [];
    const modalTriggers = [
      { page: '/dashboard', trigger: 'button:has-text("譛滄俣驕ｸ謚・)', modalType: '譛滄俣驕ｸ謚槭Δ繝ｼ繝繝ｫ' },
      { page: '/inventory', trigger: 'button:has-text("譁ｰ隕丞膚蜩∫匳骭ｲ")', modalType: '蝠・刀逋ｻ骭ｲ繝｢繝ｼ繝繝ｫ' },
      { page: '/inventory', trigger: 'button:has-text("CSV繧､繝ｳ繝昴・繝・)', modalType: 'CSV繧､繝ｳ繝昴・繝医Δ繝ｼ繝繝ｫ' },
      { page: '/settings', trigger: 'button:has-text("險ｭ螳・)', modalType: '險ｭ螳壹Δ繝ｼ繝繝ｫ' }
    ];
    
    for (const modalTest of modalTriggers) {
      await page.goto(modalTest.page);
      await page.waitForTimeout(2000);
      
      const triggerButton = page.locator(modalTest.trigger);
      if (await triggerButton.isVisible()) {
        try {
          await triggerButton.first().click();
          await page.waitForTimeout(1500);
          
          const modal = page.locator('[role="dialog"]');
          const isModalVisible = await modal.isVisible();
          
          if (isModalVisible) {
            // 繝｢繝ｼ繝繝ｫ蜀・・繝懊ち繝ｳ繧偵ユ繧ｹ繝・
            const modalButtons = modal.locator('button');
            const modalButtonCount = await modalButtons.count();
            
            console.log(`${modalTest.modalType} 蜀・・繧ｿ繝ｳ謨ｰ: ${modalButtonCount}`);
            
            // 髢峨§繧九・繧ｿ繝ｳ繧偵ユ繧ｹ繝・
            const closeButton = modal.locator('button:has-text("繧ｭ繝｣繝ｳ繧ｻ繝ｫ"), button:has-text("髢峨§繧・), button:has-text("ﾃ・)');
            if (await closeButton.first().isVisible()) {
              await closeButton.first().click();
              await page.waitForTimeout(1000);
              
              const isModalClosed = !(await modal.isVisible());
              
              results.push({
                component: `${modalTest.modalType}`,
                visible: true,
                clickable: true,
                functional: isModalClosed,
                status: isModalClosed ? '笨・蜍穂ｽ應ｸｭ' : '笶・髱樊ｩ溯・'
              });
              
              console.log(`${modalTest.modalType}: ${isModalClosed ? '笨・蜍穂ｽ應ｸｭ' : '笶・髱樊ｩ溯・'}`);
            }
          } else {
            results.push({
              component: `${modalTest.modalType}`,
              visible: false,
              clickable: false,
              functional: false,
              status: '笶・繝｢繝ｼ繝繝ｫ譛ｪ陦ｨ遉ｺ'
            });
            console.log(`${modalTest.modalType}: 笶・繝｢繝ｼ繝繝ｫ譛ｪ陦ｨ遉ｺ`);
          }
        } catch (error) {
          results.push({
            component: `${modalTest.modalType}`,
            visible: true,
            clickable: false,
            functional: false,
            error: error.message,
            status: '笶・繝医Μ繧ｬ繝ｼ荳榊庄'
          });
          console.log(`${modalTest.modalType}: 笶・繝医Μ繧ｬ繝ｼ荳榊庄`);
        }
      } else {
        results.push({
          component: `${modalTest.modalType}`,
          visible: false,
          clickable: false,
          functional: false,
          status: '笶・繝医Μ繧ｬ繝ｼ繝懊ち繝ｳ譛ｪ陦ｨ遉ｺ'
        });
        console.log(`${modalTest.modalType}: 笶・繝医Μ繧ｬ繝ｼ繝懊ち繝ｳ譛ｪ陦ｨ遉ｺ`);
      }
    }
    
    console.log('\n=== 繝｢繝ｼ繝繝ｫ讖溯・繝・せ繝育ｵ先棡 ===');
    results.forEach(result => {
      console.log(`${result.component}: ${result.status}`);
    });
    
    console.log('\n' + JSON.stringify(results, null, 2));
  });

  // 蜈ｨ逕ｻ髱｢邨ｱ蜷医ユ繧ｹ繝・
  test('倹 蜈ｨ逕ｻ髱｢邨ｱ蜷・I繧ｳ繝ｳ繝昴・繝阪Φ繝医ユ繧ｹ繝・, async ({ page }) => {
    console.log('=== 蜈ｨ逕ｻ髱｢邨ｱ蜷・I繧ｳ繝ｳ繝昴・繝阪Φ繝医ユ繧ｹ繝磯幕蟋・===');
    
    const pages = [
      '/dashboard',
      '/inventory', 
      '/sales',
      '/delivery',
      '/returns',
      '/reports',
      '/settings',
      '/profile'
    ];
    
    const allResults = [];
    
    for (const pagePath of pages) {
      console.log(`\n--- ${pagePath} 繝壹・繧ｸ繝・せ繝・---`);
      
      try {
        await page.goto(pagePath);
        await page.waitForTimeout(2000);
        
        const pageResults = [];
        
        // 繝懊ち繝ｳ繝・せ繝・
        const buttons = page.locator('button');
        const buttonCount = await buttons.count();
        
        for (let i = 0; i < Math.min(buttonCount, 5); i++) { // 譛蛻昴・5蛟九ｒ繝・せ繝・
          const button = buttons.nth(i);
          const buttonText = await button.textContent();
          const isVisible = await button.isVisible();
          const isEnabled = await button.isEnabled();
          
          if (isVisible && isEnabled) {
            try {
              const originalUrl = page.url();
              await button.click();
              await page.waitForTimeout(1000);
              
              const newUrl = page.url();
              const hasModal = await page.locator('[role="dialog"]').isVisible();
              const hasChanges = originalUrl !== newUrl || hasModal;
              
              pageResults.push({
                page: pagePath,
                component: `繝懊ち繝ｳ: "${buttonText}"`,
                type: 'button',
                functional: hasChanges,
                status: hasChanges ? '笨・蜍穂ｽ應ｸｭ' : '笶・髱樊ｩ溯・'
              });
              
              // 蜈・・迥ｶ諷九↓謌ｻ縺・
              if (hasModal) {
                const closeButton = page.locator('button:has-text("繧ｭ繝｣繝ｳ繧ｻ繝ｫ"), button:has-text("髢峨§繧・), button:has-text("ﾃ・)');
                if (await closeButton.first().isVisible()) {
                  await closeButton.first().click();
                  await page.waitForTimeout(500);
                }
              }
              if (originalUrl !== newUrl) {
                await page.goto(pagePath);
                await page.waitForTimeout(1000);
              }
            } catch (error) {
              pageResults.push({
                page: pagePath,
                component: `繝懊ち繝ｳ: "${buttonText}"`,
                type: 'button',
                functional: false,
                status: '笶・繧ｯ繝ｪ繝・け荳榊庄'
              });
            }
          }
        }
        
        // 繝励Ν繝繧ｦ繝ｳ繝・せ繝・
        const selects = page.locator('select');
        const selectCount = await selects.count();
        
        for (let i = 0; i < selectCount; i++) {
          const select = selects.nth(i);
          const isVisible = await select.isVisible();
          const isEnabled = await select.isEnabled();
          
          if (isVisible && isEnabled) {
            try {
              const options = await select.locator('option').count();
              if (options > 1) {
                await select.selectOption({ index: 1 });
                
                pageResults.push({
                  page: pagePath,
                  component: `繝励Ν繝繧ｦ繝ｳ ${i + 1}`,
                  type: 'select',
                  functional: true,
                  status: '笨・蜍穂ｽ應ｸｭ'
                });
              }
            } catch (error) {
              pageResults.push({
                page: pagePath,
                component: `繝励Ν繝繧ｦ繝ｳ ${i + 1}`,
                type: 'select',
                functional: false,
                status: '笶・驕ｸ謚樔ｸ榊庄'
              });
            }
          }
        }
        
        // 繝√ぉ繝・け繝懊ャ繧ｯ繧ｹ繝・せ繝・
        const checkboxes = page.locator('input[type="checkbox"]');
        const checkboxCount = await checkboxes.count();
        
        for (let i = 0; i < checkboxCount; i++) {
          const checkbox = checkboxes.nth(i);
          const isVisible = await checkbox.isVisible();
          const isEnabled = await checkbox.isEnabled();
          
          if (isVisible && isEnabled) {
            try {
              const originalState = await checkbox.isChecked();
              await checkbox.click();
              await page.waitForTimeout(300);
              const newState = await checkbox.isChecked();
              
              pageResults.push({
                page: pagePath,
                component: `繝√ぉ繝・け繝懊ャ繧ｯ繧ｹ ${i + 1}`,
                type: 'checkbox',
                functional: originalState !== newState,
                status: originalState !== newState ? '笨・蜍穂ｽ應ｸｭ' : '笶・髱樊ｩ溯・'
              });
            } catch (error) {
              pageResults.push({
                page: pagePath,
                component: `繝√ぉ繝・け繝懊ャ繧ｯ繧ｹ ${i + 1}`,
                type: 'checkbox',
                functional: false,
                status: '笶・繧ｯ繝ｪ繝・け荳榊庄'
              });
            }
          }
        }
        
        allResults.push(...pageResults);
        
        // 繝壹・繧ｸ邨先棡繧定｡ｨ遉ｺ
        pageResults.forEach(result => {
          console.log(`${result.component}: ${result.status}`);
        });
        
      } catch (error) {
        console.log(`${pagePath}: 繝壹・繧ｸ繧｢繧ｯ繧ｻ繧ｹ荳榊庄 - ${error.message}`);
        allResults.push({
          page: pagePath,
          component: '繝壹・繧ｸ蜈ｨ菴・,
          type: 'page',
          functional: false,
          status: '笶・繧｢繧ｯ繧ｻ繧ｹ荳榊庄'
        });
      }
    }
    
    console.log('\n=== 蜈ｨ逕ｻ髱｢邨ｱ蜷医ユ繧ｹ繝育ｵ先棡繧ｵ繝槭Μ繝ｼ ===');
    
    const summary = {
      total: allResults.length,
      functional: allResults.filter(r => r.functional).length,
      nonFunctional: allResults.filter(r => !r.functional).length
    };
    
    console.log(`邱上さ繝ｳ繝昴・繝阪Φ繝域焚: ${summary.total}`);
    console.log(`讖溯・荳ｭ: ${summary.functional}`);
    console.log(`髱樊ｩ溯・: ${summary.nonFunctional}`);
    console.log(`讖溯・邇・ ${((summary.functional / summary.total) * 100).toFixed(1)}%`);
    
    console.log('\n=== 隧ｳ邏ｰ邨先棡 ===');
    console.log(JSON.stringify(allResults, null, 2));
  });
}); 
import { test, expect } from '@playwright/test';

test.describe('剥 UI繧ｳ繝ｳ繝昴・繝阪Φ繝亥渕譛ｬ讖溯・繝・せ繝・, () => {
  
  test('噫 繝ｭ繧ｰ繧､繝ｳ逕ｻ髱｢ - 蝓ｺ譛ｬUI隕∫ｴ繝・せ繝・, async ({ page }) => {
    console.log('=== 繝ｭ繧ｰ繧､繝ｳ逕ｻ髱｢UI隕∫ｴ繝・せ繝磯幕蟋・===');
    
    await page.goto('/login');
    await page.waitForTimeout(3000);
    
    const results = [];
    
    // 繝ｭ繧ｰ繧､繝ｳ繝懊ち繝ｳ縺ｮ蟄伜惠遒ｺ隱・
    const loginButton = page.locator('button:has-text("繝ｭ繧ｰ繧､繝ｳ")');
    const loginButtonExists = await loginButton.isVisible();
    results.push({
      component: '繝ｭ繧ｰ繧､繝ｳ繝懊ち繝ｳ',
      visible: loginButtonExists,
      status: loginButtonExists ? '笨・蟄伜惠' : '笶・荳榊惠'
    });
    
    // 繧ｻ繝ｩ繝ｼ繝ｭ繧ｰ繧､繝ｳ繝懊ち繝ｳ縺ｮ蟄伜惠遒ｺ隱・
    const sellerButton = page.locator('[data-testid="seller-login"]');
    const sellerButtonExists = await sellerButton.isVisible();
    results.push({
      component: '繧ｻ繝ｩ繝ｼ繝ｭ繧ｰ繧､繝ｳ繝懊ち繝ｳ',
      visible: sellerButtonExists,
      status: sellerButtonExists ? '笨・蟄伜惠' : '笶・荳榊惠'
    });
    
    // 繧ｹ繧ｿ繝・ヵ繝ｭ繧ｰ繧､繝ｳ繝懊ち繝ｳ縺ｮ蟄伜惠遒ｺ隱・
    const staffButton = page.locator('[data-testid="staff-login"]');
    const staffButtonExists = await staffButton.isVisible();
    results.push({
      component: '繧ｹ繧ｿ繝・ヵ繝ｭ繧ｰ繧､繝ｳ繝懊ち繝ｳ',
      visible: staffButtonExists,
      status: staffButtonExists ? '笨・蟄伜惠' : '笶・荳榊惠'
    });
    
    // 蜈･蜉帙ヵ繧｣繝ｼ繝ｫ繝峨・蟄伜惠遒ｺ隱・
    const emailInput = page.locator('input[type="email"]');
    const emailExists = await emailInput.isVisible();
    results.push({
      component: '繝｡繝ｼ繝ｫ繧｢繝峨Ξ繧ｹ蜈･蜉・,
      visible: emailExists,
      status: emailExists ? '笨・蟄伜惠' : '笶・荳榊惠'
    });
    
    const passwordInput = page.locator('input[type="password"]');
    const passwordExists = await passwordInput.isVisible();
    results.push({
      component: '繝代せ繝ｯ繝ｼ繝牙・蜉・,
      visible: passwordExists,
      status: passwordExists ? '笨・蟄伜惠' : '笶・荳榊惠'
    });
    
    console.log('\n=== 繝ｭ繧ｰ繧､繝ｳ逕ｻ髱｢UI隕∫ｴ繝・せ繝育ｵ先棡 ===');
    results.forEach(result => {
      console.log(`${result.component}: ${result.status}`);
    });
    
    console.log('\n' + JSON.stringify(results, null, 2));
  });

  test('識 繝ｭ繧ｰ繧､繝ｳ讖溯・繝・せ繝・, async ({ page }) => {
    console.log('=== 繝ｭ繧ｰ繧､繝ｳ讖溯・繝・せ繝磯幕蟋・===');
    
    await page.goto('/login');
    await page.waitForTimeout(2000);
    
    const results = [];
    
    // 繧ｻ繝ｩ繝ｼ繝ｭ繧ｰ繧､繝ｳ繝懊ち繝ｳ縺ｮ繧ｯ繝ｪ繝・け讖溯・繝・せ繝・
    const sellerButton = page.locator('[data-testid="seller-login"]');
    if (await sellerButton.isVisible()) {
      try {
        await sellerButton.click();
        await page.waitForTimeout(1000);
        
        // 蜈･蜉帙ヵ繧｣繝ｼ繝ｫ繝峨・蛟､縺瑚ｨｭ螳壹＆繧後※縺・ｋ縺九メ繧ｧ繝・け
        const emailValue = await page.locator('input[type="email"]').inputValue();
        const passwordValue = await page.locator('input[type="password"]').inputValue();
        
        const isWorking = emailValue.length > 0 && passwordValue.length > 0;
        
        results.push({
          component: '繧ｻ繝ｩ繝ｼ繝ｭ繧ｰ繧､繝ｳ繝懊ち繝ｳ',
          clickable: true,
          functional: isWorking,
          emailValue,
          passwordValue,
          status: isWorking ? '笨・讖溯・荳ｭ' : '笶・髱樊ｩ溯・'
        });
        
        console.log(`繧ｻ繝ｩ繝ｼ繝ｭ繧ｰ繧､繝ｳ繝懊ち繝ｳ: ${isWorking ? '笨・讖溯・荳ｭ' : '笶・髱樊ｩ溯・'}`);
        console.log(`  險ｭ螳壹＆繧後◆Email: ${emailValue}`);
        console.log(`  險ｭ螳壹＆繧後◆Password: ${passwordValue}`);
      } catch (error) {
        results.push({
          component: '繧ｻ繝ｩ繝ｼ繝ｭ繧ｰ繧､繝ｳ繝懊ち繝ｳ',
          clickable: false,
          functional: false,
          error: String(error),
          status: '笶・繧ｯ繝ｪ繝・け荳榊庄'
        });
      }
    }
    
    // 繧ｹ繧ｿ繝・ヵ繝ｭ繧ｰ繧､繝ｳ繝懊ち繝ｳ縺ｮ繧ｯ繝ｪ繝・け讖溯・繝・せ繝・
    const staffButton = page.locator('[data-testid="staff-login"]');
    if (await staffButton.isVisible()) {
      try {
        await staffButton.click();
        await page.waitForTimeout(1000);
        
        // 蜈･蜉帙ヵ繧｣繝ｼ繝ｫ繝峨・蛟､縺瑚ｨｭ螳壹＆繧後※縺・ｋ縺九メ繧ｧ繝・け
        const emailValue = await page.locator('input[type="email"]').inputValue();
        const passwordValue = await page.locator('input[type="password"]').inputValue();
        
        const isWorking = emailValue.length > 0 && passwordValue.length > 0;
        
        results.push({
          component: '繧ｹ繧ｿ繝・ヵ繝ｭ繧ｰ繧､繝ｳ繝懊ち繝ｳ',
          clickable: true,
          functional: isWorking,
          emailValue,
          passwordValue,
          status: isWorking ? '笨・讖溯・荳ｭ' : '笶・髱樊ｩ溯・'
        });
        
        console.log(`繧ｹ繧ｿ繝・ヵ繝ｭ繧ｰ繧､繝ｳ繝懊ち繝ｳ: ${isWorking ? '笨・讖溯・荳ｭ' : '笶・髱樊ｩ溯・'}`);
        console.log(`  險ｭ螳壹＆繧後◆Email: ${emailValue}`);
        console.log(`  險ｭ螳壹＆繧後◆Password: ${passwordValue}`);
      } catch (error) {
        results.push({
          component: '繧ｹ繧ｿ繝・ヵ繝ｭ繧ｰ繧､繝ｳ繝懊ち繝ｳ',
          clickable: false,
          functional: false,
          error: String(error),
          status: '笶・繧ｯ繝ｪ繝・け荳榊庄'
        });
      }
    }
    
    console.log('\n=== 繝ｭ繧ｰ繧､繝ｳ讖溯・繝・せ繝育ｵ先棡 ===');
    results.forEach(result => {
      console.log(`${result.component}: ${result.status}`);
    });
    
    console.log('\n' + JSON.stringify(results, null, 2));
  });

  test('柏 螳滄圀縺ｮ繝ｭ繧ｰ繧､繝ｳ蜃ｦ逅・ユ繧ｹ繝・, async ({ page }) => {
    console.log('=== 螳滄圀縺ｮ繝ｭ繧ｰ繧､繝ｳ蜃ｦ逅・ユ繧ｹ繝磯幕蟋・===');
    
    await page.goto('/login');
    await page.waitForTimeout(2000);
    
    const results = [];
    
    // 繧ｻ繝ｩ繝ｼ縺ｨ縺励※繝ｭ繧ｰ繧､繝ｳ
    try {
      await page.click('[data-testid="seller-login"]');
      await page.waitForTimeout(1000);
      
      const loginButton = page.locator('button:has-text("繝ｭ繧ｰ繧､繝ｳ")');
      if (await loginButton.isVisible()) {
        await loginButton.click();
        await page.waitForTimeout(3000);
        
        const currentUrl = page.url();
        const isLoggedIn = currentUrl.includes('/dashboard');
        
        results.push({
          component: '繝ｭ繧ｰ繧､繝ｳ蜃ｦ逅・,
          functional: isLoggedIn,
          currentUrl,
          status: isLoggedIn ? '笨・謌仙粥' : '笶・螟ｱ謨・
        });
        
        console.log(`繝ｭ繧ｰ繧､繝ｳ蜃ｦ逅・ ${isLoggedIn ? '笨・謌仙粥' : '笶・螟ｱ謨・}`);
        console.log(`  迴ｾ蝨ｨ縺ｮURL: ${currentUrl}`);
      }
    } catch (error) {
      results.push({
        component: '繝ｭ繧ｰ繧､繝ｳ蜃ｦ逅・,
        functional: false,
        error: String(error),
        status: '笶・繧ｨ繝ｩ繝ｼ'
      });
      console.log(`繝ｭ繧ｰ繧､繝ｳ蜃ｦ逅・ 笶・繧ｨ繝ｩ繝ｼ - ${String(error)}`);
    }
    
    console.log('\n=== 螳滄圀縺ｮ繝ｭ繧ｰ繧､繝ｳ蜃ｦ逅・ユ繧ｹ繝育ｵ先棡 ===');
    results.forEach(result => {
      console.log(`${result.component}: ${result.status}`);
    });
    
    console.log('\n' + JSON.stringify(results, null, 2));
  });

  test('投 繝繝・す繝･繝懊・繝牙渕譛ｬUI隕∫ｴ繝・せ繝・, async ({ page }) => {
    console.log('=== 繝繝・す繝･繝懊・繝牙渕譛ｬUI隕∫ｴ繝・せ繝磯幕蟋・===');
    
    // 繝ｭ繧ｰ繧､繝ｳ蜃ｦ逅・
    await page.goto('/login');
    await page.waitForTimeout(2000);
    await page.click('[data-testid="seller-login"]');
    await page.waitForTimeout(1000);
    await page.click('button:has-text("繝ｭ繧ｰ繧､繝ｳ")');
    await page.waitForTimeout(3000);
    
    // 繝繝・す繝･繝懊・繝峨↓蛻ｰ驕斐〒縺阪※縺・ｋ縺九メ繧ｧ繝・け
    const currentUrl = page.url();
    if (!currentUrl.includes('/dashboard')) {
      console.log('笶・繝繝・す繝･繝懊・繝峨↓蛻ｰ驕斐〒縺阪∪縺帙ｓ縺ｧ縺励◆');
      return;
    }
    
    console.log('笨・繝繝・す繝･繝懊・繝峨↓蛻ｰ驕斐＠縺ｾ縺励◆');
    
    const results = [];
    
    // 繝壹・繧ｸ繧ｿ繧､繝医Ν縺ｮ遒ｺ隱・
    const pageTitle = await page.title();
    results.push({
      component: '繝壹・繧ｸ繧ｿ繧､繝医Ν',
      value: pageTitle,
      status: '笨・遒ｺ隱・
    });
    
    // H1繧ｿ繧ｰ縺ｮ遒ｺ隱・
    const h1 = page.locator('h1');
    const h1Exists = await h1.isVisible();
    const h1Text = h1Exists ? await h1.textContent() : '';
    results.push({
      component: '繝｡繧､繝ｳ繧ｿ繧､繝医Ν(H1)',
      visible: h1Exists,
      text: h1Text,
      status: h1Exists ? '笨・蟄伜惠' : '笶・荳榊惠'
    });
    
    // 繝懊ち繝ｳ縺ｮ邱乗焚遒ｺ隱・
    const allButtons = page.locator('button');
    const buttonCount = await allButtons.count();
    results.push({
      component: '邱上・繧ｿ繝ｳ謨ｰ',
      count: buttonCount,
      status: buttonCount > 0 ? '笨・蟄伜惠' : '笶・荳榊惠'
    });
    
    // 繝ｪ繝ｳ繧ｯ縺ｮ邱乗焚遒ｺ隱・
    const allLinks = page.locator('a[href]');
    const linkCount = await allLinks.count();
    results.push({
      component: '邱上Μ繝ｳ繧ｯ謨ｰ',
      count: linkCount,
      status: linkCount > 0 ? '笨・蟄伜惠' : '笶・荳榊惠'
    });
    
    // 蜈･蜉帙ヵ繧｣繝ｼ繝ｫ繝峨・邱乗焚遒ｺ隱・
    const allInputs = page.locator('input');
    const inputCount = await allInputs.count();
    results.push({
      component: '邱丞・蜉帙ヵ繧｣繝ｼ繝ｫ繝画焚',
      count: inputCount,
      status: inputCount >= 0 ? '笨・遒ｺ隱・ : '笶・繧ｨ繝ｩ繝ｼ'
    });
    
    // 繧ｻ繝ｬ繧ｯ繝医・繝・け繧ｹ縺ｮ邱乗焚遒ｺ隱・
    const allSelects = page.locator('select');
    const selectCount = await allSelects.count();
    results.push({
      component: '邱上そ繝ｬ繧ｯ繝医・繝・け繧ｹ謨ｰ',
      count: selectCount,
      status: selectCount >= 0 ? '笨・遒ｺ隱・ : '笶・繧ｨ繝ｩ繝ｼ'
    });
    
    // 繝√ぉ繝・け繝懊ャ繧ｯ繧ｹ縺ｮ邱乗焚遒ｺ隱・
    const allCheckboxes = page.locator('input[type="checkbox"]');
    const checkboxCount = await allCheckboxes.count();
    results.push({
      component: '邱上メ繧ｧ繝・け繝懊ャ繧ｯ繧ｹ謨ｰ',
      count: checkboxCount,
      status: checkboxCount >= 0 ? '笨・遒ｺ隱・ : '笶・繧ｨ繝ｩ繝ｼ'
    });
    
    console.log('\n=== 繝繝・す繝･繝懊・繝牙渕譛ｬUI隕∫ｴ繝・せ繝育ｵ先棡 ===');
    results.forEach(result => {
      console.log(`${result.component}: ${result.status} ${result.count !== undefined ? `(${result.count}蛟・` : ''} ${result.text ? `"${result.text}"` : ''}`);
    });
    
    console.log('\n' + JSON.stringify(results, null, 2));
  });

  test('剥 繝繝・す繝･繝懊・繝・- 荳ｻ隕√・繧ｿ繝ｳ讖溯・繝・せ繝・, async ({ page }) => {
    console.log('=== 繝繝・す繝･繝懊・繝我ｸｻ隕√・繧ｿ繝ｳ讖溯・繝・せ繝磯幕蟋・===');
    
    // 繝ｭ繧ｰ繧､繝ｳ蜃ｦ逅・
    await page.goto('/login');
    await page.waitForTimeout(2000);
    await page.click('[data-testid="seller-login"]');
    await page.waitForTimeout(1000);
    await page.click('button:has-text("繝ｭ繧ｰ繧､繝ｳ")');
    await page.waitForTimeout(3000);
    
    const results = [];
    
    // 荳ｻ隕√・繧ｿ繝ｳ縺ｮ繝・せ繝亥ｯｾ雎｡
    const buttonTests = [
      { text: '譛滄俣驕ｸ謚・, expectedAction: 'modal' },
      { text: '譛滄俣縺ｧ繝輔ぅ繝ｫ繧ｿ繝ｼ', expectedAction: 'modal' },
      { text: '繝ｬ繝昴・繝医ｒ繝繧ｦ繝ｳ繝ｭ繝ｼ繝・, expectedAction: 'download' },
      { text: '繝繧ｦ繝ｳ繝ｭ繝ｼ繝・, expectedAction: 'download' },
      { text: '譁ｰ隕丈ｽ懈・', expectedAction: 'modal' },
      { text: '霑ｽ蜉', expectedAction: 'modal' },
      { text: '邱ｨ髮・, expectedAction: 'modal' },
      { text: '蜑企勁', expectedAction: 'modal' },
      { text: '險ｭ螳・, expectedAction: 'modal' },
      { text: '譖ｴ譁ｰ', expectedAction: 'action' }
    ];
    
    for (const buttonTest of buttonTests) {
      const button = page.locator(`button:has-text("${buttonTest.text}")`);
      const buttonExists = await button.isVisible();
      
      if (buttonExists) {
        try {
          const originalUrl = page.url();
          await button.first().click();
          await page.waitForTimeout(1500);
          
          const newUrl = page.url();
          const hasModal = await page.locator('[role="dialog"]').isVisible();
          const hasUrlChange = originalUrl !== newUrl;
          
          let isWorking = false;
          let actionType = 'none';
          
          if (buttonTest.expectedAction === 'modal' && hasModal) {
            isWorking = true;
            actionType = 'modal';
          } else if (buttonTest.expectedAction === 'download') {
            // 繝繧ｦ繝ｳ繝ｭ繝ｼ繝峨・繧ｿ繝ｳ縺ｯ蜿榊ｿ懊′縺ゅｌ縺ｰ謌仙粥縺ｨ縺吶ｋ
            isWorking = true;
            actionType = 'download';
          } else if (hasUrlChange) {
            isWorking = true;
            actionType = 'navigation';
          } else if (hasModal) {
            isWorking = true;
            actionType = 'modal';
          }
          
          results.push({
            component: `繝懊ち繝ｳ: "${buttonTest.text}"`,
            visible: true,
            clickable: true,
            functional: isWorking,
            actionType,
            hasModal,
            hasUrlChange,
            status: isWorking ? '笨・讖溯・荳ｭ' : '笶・髱樊ｩ溯・'
          });
          
          console.log(`繝懊ち繝ｳ "${buttonTest.text}": ${isWorking ? '笨・讖溯・荳ｭ' : '笶・髱樊ｩ溯・'} (${actionType})`);
          
          // 繝｢繝ｼ繝繝ｫ縺碁幕縺・◆蝣ｴ蜷医・髢峨§繧・
          if (hasModal) {
            const closeButton = page.locator('button:has-text("繧ｭ繝｣繝ｳ繧ｻ繝ｫ"), button:has-text("髢峨§繧・), button:has-text("ﾃ・)');
            if (await closeButton.first().isVisible()) {
              await closeButton.first().click();
              await page.waitForTimeout(1000);
            }
          }
          
          // URL縺悟､峨ｏ縺｣縺溷ｴ蜷医・蜈・↓謌ｻ繧・
          if (hasUrlChange) {
            await page.goto('/dashboard');
            await page.waitForTimeout(1000);
          }
        } catch (error) {
                     results.push({
             component: `繝懊ち繝ｳ: "${buttonTest.text}"`,
             visible: true,
             clickable: false,
             functional: false,
             error: String(error),
             status: '笶・繧ｯ繝ｪ繝・け荳榊庄'
           });
           console.log(`繝懊ち繝ｳ "${buttonTest.text}": 笶・繧ｯ繝ｪ繝・け荳榊庄 - ${String(error)}`);
        }
      } else {
        results.push({
          component: `繝懊ち繝ｳ: "${buttonTest.text}"`,
          visible: false,
          clickable: false,
          functional: false,
          status: '笶・荳榊惠'
        });
        console.log(`繝懊ち繝ｳ "${buttonTest.text}": 笶・荳榊惠`);
      }
    }
    
    console.log('\n=== 繝繝・す繝･繝懊・繝我ｸｻ隕√・繧ｿ繝ｳ讖溯・繝・せ繝育ｵ先棡 ===');
    const workingButtons = results.filter(r => r.functional).length;
    const totalButtons = results.length;
    console.log(`讖溯・荳ｭ繝懊ち繝ｳ: ${workingButtons}/${totalButtons} (${((workingButtons/totalButtons)*100).toFixed(1)}%)`);
    
    results.forEach(result => {
      console.log(`${result.component}: ${result.status}`);
    });
    
    console.log('\n' + JSON.stringify(results, null, 2));
  });

  test('倹 繧ｵ繧､繝峨Γ繝九Η繝ｼ蝓ｺ譛ｬ讖溯・繝・せ繝・, async ({ page }) => {
    console.log('=== 繧ｵ繧､繝峨Γ繝九Η繝ｼ蝓ｺ譛ｬ讖溯・繝・せ繝磯幕蟋・===');
    
    // 繝ｭ繧ｰ繧､繝ｳ蜃ｦ逅・
    await page.goto('/login');
    await page.waitForTimeout(2000);
    await page.click('[data-testid="seller-login"]');
    await page.waitForTimeout(1000);
    await page.click('button:has-text("繝ｭ繧ｰ繧､繝ｳ")');
    await page.waitForTimeout(3000);
    
    const results = [];
    
    // 繧ｵ繧､繝峨Γ繝九Η繝ｼ縺ｮ荳ｻ隕・・岼
    const menuItems = [
      { text: '繝繝・す繝･繝懊・繝・, expectedUrl: '/dashboard' },
      { text: '蝨ｨ蠎ｫ邂｡逅・, expectedUrl: '/inventory' },
      { text: '蝠・刀蜃ｺ蜩・, expectedUrl: '/sales' },
      { text: '驟埼∫ｮ｡逅・, expectedUrl: '/delivery' },
      { text: '霑泌刀邂｡逅・, expectedUrl: '/returns' },
      { text: '繝ｬ繝昴・繝・, expectedUrl: '/reports' },
      { text: '險ｭ螳・, expectedUrl: '/settings' },
      { text: '繝励Ο繝輔ぅ繝ｼ繝ｫ', expectedUrl: '/profile' }
    ];
    
    for (const menuItem of menuItems) {
      // 讒倥・↑繧ｻ繝ｬ繧ｯ繧ｿ縺ｧ繝｡繝九Η繝ｼ鬆・岼繧呈爾縺・
      const menuSelectors = [
        `nav a:has-text("${menuItem.text}")`,
        `aside a:has-text("${menuItem.text}")`,
        `.sidebar a:has-text("${menuItem.text}")`,
        `a[href="${menuItem.expectedUrl}"]`,
        `a:has-text("${menuItem.text}")`,
        `button:has-text("${menuItem.text}")`
      ];
      
      let menuElement = null;
      let selectorUsed = '';
      
      for (const selector of menuSelectors) {
        const element = page.locator(selector);
        if (await element.first().isVisible()) {
          menuElement = element.first();
          selectorUsed = selector;
          break;
        }
      }
      
      if (menuElement) {
        try {
          await menuElement.click();
          await page.waitForTimeout(2000);
          
          const currentUrl = page.url();
          const isWorking = currentUrl.includes(menuItem.expectedUrl);
          
          results.push({
            component: `繧ｵ繧､繝峨Γ繝九Η繝ｼ: "${menuItem.text}"`,
            visible: true,
            clickable: true,
            functional: isWorking,
            expectedUrl: menuItem.expectedUrl,
            currentUrl,
            selectorUsed,
            status: isWorking ? '笨・讖溯・荳ｭ' : '笶・髱樊ｩ溯・'
          });
          
          console.log(`繧ｵ繧､繝峨Γ繝九Η繝ｼ "${menuItem.text}": ${isWorking ? '笨・讖溯・荳ｭ' : '笶・髱樊ｩ溯・'}`);
          console.log(`  譛溷ｾ・RL: ${menuItem.expectedUrl}, 迴ｾ蝨ｨURL: ${currentUrl}`);
        } catch (error) {
                     results.push({
             component: `繧ｵ繧､繝峨Γ繝九Η繝ｼ: "${menuItem.text}"`,
             visible: true,
             clickable: false,
             functional: false,
             error: String(error),
             selectorUsed,
             status: '笶・繧ｯ繝ｪ繝・け荳榊庄'
           });
           console.log(`繧ｵ繧､繝峨Γ繝九Η繝ｼ "${menuItem.text}": 笶・繧ｯ繝ｪ繝・け荳榊庄 - ${String(error)}`);
        }
      } else {
        results.push({
          component: `繧ｵ繧､繝峨Γ繝九Η繝ｼ: "${menuItem.text}"`,
          visible: false,
          clickable: false,
          functional: false,
          status: '笶・荳榊惠'
        });
        console.log(`繧ｵ繧､繝峨Γ繝九Η繝ｼ "${menuItem.text}": 笶・荳榊惠`);
      }
    }
    
    console.log('\n=== 繧ｵ繧､繝峨Γ繝九Η繝ｼ蝓ｺ譛ｬ讖溯・繝・せ繝育ｵ先棡 ===');
    const workingMenus = results.filter(r => r.functional).length;
    const totalMenus = results.length;
    console.log(`讖溯・荳ｭ繝｡繝九Η繝ｼ: ${workingMenus}/${totalMenus} (${((workingMenus/totalMenus)*100).toFixed(1)}%)`);
    
    results.forEach(result => {
      console.log(`${result.component}: ${result.status}`);
    });
    
    console.log('\n' + JSON.stringify(results, null, 2));
  });
}); 
import { test, expect } from '@playwright/test';

test.describe('剥 譛邨６I繧ｳ繝ｳ繝昴・繝阪Φ繝亥桁諡ｬ讖溯・繝・せ繝・, () => {
  
  test.beforeEach(async ({ page }) => {
    // 繝ｭ繧ｰ繧､繝ｳ蜃ｦ逅・
    await page.goto('/login');
    await page.waitForTimeout(2000);
    
    // 繧ｻ繝ｩ繝ｼ繝ｭ繧ｰ繧､繝ｳ繝懊ち繝ｳ繧偵け繝ｪ繝・け
    const sellerButton = page.locator('[data-testid="seller-login"]');
    if (await sellerButton.isVisible()) {
      await sellerButton.click();
      await page.waitForTimeout(1000);
    }
    
    // 繝ｭ繧ｰ繧､繝ｳ繝懊ち繝ｳ繧偵け繝ｪ繝・け
    const loginButton = page.locator('button:has-text("繝ｭ繧ｰ繧､繝ｳ")');
    if (await loginButton.isVisible()) {
      await loginButton.click();
      await page.waitForTimeout(3000);
    }
  });

  test('倹 繧ｵ繧､繝峨Γ繝九Η繝ｼ蜈ｨ鬆・岼讖溯・繝・せ繝・, async ({ page }) => {
    console.log('=== 繧ｵ繧､繝峨Γ繝九Η繝ｼ蜈ｨ鬆・岼讖溯・繝・せ繝磯幕蟋・===');
    
    const menuItems = [
      { name: '繝繝・す繝･繝懊・繝・, url: '/dashboard', selectors: ['nav a:has-text("繝繝・す繝･繝懊・繝・)', 'a[href="/dashboard"]', 'a:has-text("繝繝・す繝･繝懊・繝・)'] },
      { name: '蝨ｨ蠎ｫ邂｡逅・, url: '/inventory', selectors: ['nav a:has-text("蝨ｨ蠎ｫ邂｡逅・)', 'a[href="/inventory"]', 'a:has-text("蝨ｨ蠎ｫ邂｡逅・)'] },
      { name: '蝠・刀蜃ｺ蜩・, url: '/sales', selectors: ['nav a:has-text("蝠・刀蜃ｺ蜩・)', 'a[href="/sales"]', 'a:has-text("蝠・刀蜃ｺ蜩・)'] },
      { name: '驟埼∫ｮ｡逅・, url: '/delivery', selectors: ['nav a:has-text("驟埼∫ｮ｡逅・)', 'a[href="/delivery"]', 'a:has-text("驟埼∫ｮ｡逅・)'] },
      { name: '霑泌刀邂｡逅・, url: '/returns', selectors: ['nav a:has-text("霑泌刀邂｡逅・)', 'a[href="/returns"]', 'a:has-text("霑泌刀邂｡逅・)'] },
      { name: '繝ｬ繝昴・繝・, url: '/reports', selectors: ['nav a:has-text("繝ｬ繝昴・繝・)', 'a[href="/reports"]', 'a:has-text("繝ｬ繝昴・繝・)'] },
      { name: '險ｭ螳・, url: '/settings', selectors: ['nav a:has-text("險ｭ螳・)', 'a[href="/settings"]', 'a:has-text("險ｭ螳・)'] },
      { name: '繝励Ο繝輔ぅ繝ｼ繝ｫ', url: '/profile', selectors: ['nav a:has-text("繝励Ο繝輔ぅ繝ｼ繝ｫ")', 'a[href="/profile"]', 'a:has-text("繝励Ο繝輔ぅ繝ｼ繝ｫ")'] }
    ];
    
    const results = [];
    
    for (const item of menuItems) {
      console.log(`\n--- 繝・せ繝井ｸｭ: ${item.name} ---`);
      
      let element = null;
      let usedSelector = '';
      
      // 隍・焚縺ｮ繧ｻ繝ｬ繧ｯ繧ｿ繧定ｩｦ縺・
      for (const selector of item.selectors) {
        const locator = page.locator(selector);
        if (await locator.first().isVisible()) {
          element = locator.first();
          usedSelector = selector;
          break;
        }
      }
      
      if (element) {
        try {
          const originalUrl = page.url();
          await element.click();
          await page.waitForTimeout(2000);
          
          const newUrl = page.url();
          const isWorking = newUrl.includes(item.url);
          
          results.push({
            component: `繧ｵ繧､繝峨Γ繝九Η繝ｼ: ${item.name}`,
            selector: usedSelector,
            visible: true,
            clickable: true,
            functional: isWorking,
            expectedUrl: item.url,
            actualUrl: newUrl,
            status: isWorking ? '笨・讖溯・荳ｭ' : '笶・髱樊ｩ溯・'
          });
          
          console.log(`${item.name}: ${isWorking ? '笨・讖溯・荳ｭ' : '笶・髱樊ｩ溯・'}`);
          console.log(`  譛溷ｾ・RL: ${item.url}`);
          console.log(`  螳滄圀URL: ${newUrl}`);
          console.log(`  菴ｿ逕ｨ繧ｻ繝ｬ繧ｯ繧ｿ: ${usedSelector}`);
          
        } catch (error) {
          results.push({
            component: `繧ｵ繧､繝峨Γ繝九Η繝ｼ: ${item.name}`,
            selector: usedSelector,
            visible: true,
            clickable: false,
            functional: false,
            error: String(error),
            status: '笶・繧ｯ繝ｪ繝・け荳榊庄'
          });
          console.log(`${item.name}: 笶・繧ｯ繝ｪ繝・け荳榊庄 - ${String(error)}`);
        }
      } else {
        results.push({
          component: `繧ｵ繧､繝峨Γ繝九Η繝ｼ: ${item.name}`,
          selector: '縺ｪ縺・,
          visible: false,
          clickable: false,
          functional: false,
          status: '笶・隕∫ｴ荳榊惠'
        });
        console.log(`${item.name}: 笶・隕∫ｴ荳榊惠`);
      }
    }
    
    console.log('\n=== 繧ｵ繧､繝峨Γ繝九Η繝ｼ繝・せ繝育ｵ先棡繧ｵ繝槭Μ繝ｼ ===');
    const workingCount = results.filter(r => r.functional).length;
    const totalCount = results.length;
    console.log(`讖溯・荳ｭ: ${workingCount}/${totalCount} (${((workingCount/totalCount)*100).toFixed(1)}%)`);
    
    console.log('\n=== 讖溯・荳ｭ縺ｮ隕∫ｴ ===');
    results.filter(r => r.functional).forEach(r => {
      console.log(`笨・${r.component}`);
    });
    
    console.log('\n=== 髱樊ｩ溯・縺ｮ隕∫ｴ ===');
    results.filter(r => !r.functional).forEach(r => {
      console.log(`笶・${r.component} - ${r.status}`);
    });
    
    console.log('\n=== 隧ｳ邏ｰ邨先棡 ===');
    console.log(JSON.stringify(results, null, 2));
  });

  test('識 繝倥ャ繝繝ｼ繝｡繝九Η繝ｼ蜈ｨ鬆・岼讖溯・繝・せ繝・, async ({ page }) => {
    console.log('=== 繝倥ャ繝繝ｼ繝｡繝九Η繝ｼ蜈ｨ鬆・岼讖溯・繝・せ繝磯幕蟋・===');
    
    const headerItems = [
      { name: '繝励Ο繝輔ぅ繝ｼ繝ｫ繝｡繝九Η繝ｼ', selectors: ['button[aria-label*="繝励Ο繝輔ぅ繝ｼ繝ｫ"]', '.profile-menu button', 'button:has-text("繝励Ο繝輔ぅ繝ｼ繝ｫ")'] },
      { name: '騾夂衍繝懊ち繝ｳ', selectors: ['button[aria-label*="騾夂衍"]', '.notification-button', 'button:has-text("騾夂衍")'] },
      { name: '讀懃ｴ｢繝懊ち繝ｳ', selectors: ['button[aria-label*="讀懃ｴ｢"]', '.search-button', 'button:has-text("讀懃ｴ｢")'] },
      { name: '繝ｭ繧ｰ繧｢繧ｦ繝医・繧ｿ繝ｳ', selectors: ['button:has-text("繝ｭ繧ｰ繧｢繧ｦ繝・)', 'a:has-text("繝ｭ繧ｰ繧｢繧ｦ繝・)'] }
    ];
    
    const results = [];
    
    for (const item of headerItems) {
      console.log(`\n--- 繝・せ繝井ｸｭ: ${item.name} ---`);
      
      let element = null;
      let usedSelector = '';
      
      for (const selector of item.selectors) {
        const locator = page.locator(selector);
        if (await locator.first().isVisible()) {
          element = locator.first();
          usedSelector = selector;
          break;
        }
      }
      
      if (element) {
        try {
          await element.click();
          await page.waitForTimeout(1500);
          
          // 蜷・ｦ∫ｴ縺ｮ譛溷ｾ・＆繧後ｋ蜍穂ｽ懊ｒ遒ｺ隱・
          let isWorking = false;
          let actionType = '';
          
          if (item.name === '繝励Ο繝輔ぅ繝ｼ繝ｫ繝｡繝九Η繝ｼ') {
            const dropdown = page.locator('[role="menu"], .dropdown-menu');
            isWorking = await dropdown.isVisible();
            actionType = '繝峨Ο繝・・繝繧ｦ繝ｳ陦ｨ遉ｺ';
          } else if (item.name === '騾夂衍繝懊ち繝ｳ') {
            const panel = page.locator('.notification-panel, [role="dialog"]');
            isWorking = await panel.isVisible();
            actionType = '繝代ロ繝ｫ陦ｨ遉ｺ';
          } else if (item.name === '讀懃ｴ｢繝懊ち繝ｳ') {
            const modal = page.locator('.search-modal, [role="dialog"]');
            isWorking = await modal.isVisible();
            actionType = '繝｢繝ｼ繝繝ｫ陦ｨ遉ｺ';
          } else if (item.name === '繝ｭ繧ｰ繧｢繧ｦ繝医・繧ｿ繝ｳ') {
            const currentUrl = page.url();
            isWorking = currentUrl.includes('/login');
            actionType = '繝ｭ繧ｰ繧｢繧ｦ繝・;
          }
          
          results.push({
            component: `繝倥ャ繝繝ｼ: ${item.name}`,
            selector: usedSelector,
            visible: true,
            clickable: true,
            functional: isWorking,
            actionType,
            status: isWorking ? '笨・讖溯・荳ｭ' : '笶・髱樊ｩ溯・'
          });
          
          console.log(`${item.name}: ${isWorking ? '笨・讖溯・荳ｭ' : '笶・髱樊ｩ溯・'} (${actionType})`);
          
        } catch (error) {
          results.push({
            component: `繝倥ャ繝繝ｼ: ${item.name}`,
            selector: usedSelector,
            visible: true,
            clickable: false,
            functional: false,
            error: String(error),
            status: '笶・繧ｯ繝ｪ繝・け荳榊庄'
          });
          console.log(`${item.name}: 笶・繧ｯ繝ｪ繝・け荳榊庄 - ${String(error)}`);
        }
      } else {
        results.push({
          component: `繝倥ャ繝繝ｼ: ${item.name}`,
          selector: '縺ｪ縺・,
          visible: false,
          clickable: false,
          functional: false,
          status: '笶・隕∫ｴ荳榊惠'
        });
        console.log(`${item.name}: 笶・隕∫ｴ荳榊惠`);
      }
    }
    
    console.log('\n=== 繝倥ャ繝繝ｼ繝｡繝九Η繝ｼ繝・せ繝育ｵ先棡繧ｵ繝槭Μ繝ｼ ===');
    const workingCount = results.filter(r => r.functional).length;
    const totalCount = results.length;
    console.log(`讖溯・荳ｭ: ${workingCount}/${totalCount} (${((workingCount/totalCount)*100).toFixed(1)}%)`);
    
    console.log('\n=== 讖溯・荳ｭ縺ｮ隕∫ｴ ===');
    results.filter(r => r.functional).forEach(r => {
      console.log(`笨・${r.component}`);
    });
    
    console.log('\n=== 髱樊ｩ溯・縺ｮ隕∫ｴ ===');
    results.filter(r => !r.functional).forEach(r => {
      console.log(`笶・${r.component} - ${r.status}`);
    });
    
    console.log('\n=== 隧ｳ邏ｰ邨先棡 ===');
    console.log(JSON.stringify(results, null, 2));
  });

  test('肌 繝繝・す繝･繝懊・繝峨・繝・ぅ繧ｳ繝ｳ繝昴・繝阪Φ繝域ｩ溯・繝・せ繝・, async ({ page }) => {
    console.log('=== 繝繝・す繝･繝懊・繝峨・繝・ぅ繧ｳ繝ｳ繝昴・繝阪Φ繝域ｩ溯・繝・せ繝磯幕蟋・===');
    
    await page.goto('/dashboard');
    await page.waitForTimeout(2000);
    
    const results = [];
    
    // 繝懊ち繝ｳ繝・せ繝・
    console.log('\n--- 繝懊ち繝ｳ繝・せ繝・---');
    const buttons = await page.locator('button').all();
    console.log(`邱上・繧ｿ繝ｳ謨ｰ: ${buttons.length}`);
    
    for (let i = 0; i < Math.min(buttons.length, 10); i++) {
      const button = buttons[i];
      const buttonText = await button.textContent();
      const isVisible = await button.isVisible();
      const isEnabled = await button.isEnabled();
      
      if (isVisible && isEnabled) {
        try {
          const originalUrl = page.url();
          await button.click();
          await page.waitForTimeout(1500);
          
          const newUrl = page.url();
          const hasModal = await page.locator('[role="dialog"]').isVisible();
          const hasUrlChange = originalUrl !== newUrl;
          const isWorking = hasModal || hasUrlChange;
          
          results.push({
            component: `繝繝・す繝･繝懊・繝峨・繧ｿ繝ｳ: "${buttonText}"`,
            type: 'button',
            visible: true,
            clickable: true,
            functional: isWorking,
            actionType: hasModal ? 'modal' : hasUrlChange ? 'navigation' : 'none',
            status: isWorking ? '笨・讖溯・荳ｭ' : '笶・髱樊ｩ溯・'
          });
          
          console.log(`繝懊ち繝ｳ "${buttonText}": ${isWorking ? '笨・讖溯・荳ｭ' : '笶・髱樊ｩ溯・'}`);
          
          // 蜈・・迥ｶ諷九↓謌ｻ縺・
          if (hasModal) {
            const closeButton = page.locator('button:has-text("繧ｭ繝｣繝ｳ繧ｻ繝ｫ"), button:has-text("髢峨§繧・), button:has-text("ﾃ・)');
            if (await closeButton.first().isVisible()) {
              await closeButton.first().click();
              await page.waitForTimeout(1000);
            }
          }
          if (hasUrlChange) {
            await page.goto('/dashboard');
            await page.waitForTimeout(1000);
          }
          
        } catch (error) {
          results.push({
            component: `繝繝・す繝･繝懊・繝峨・繧ｿ繝ｳ: "${buttonText}"`,
            type: 'button',
            visible: true,
            clickable: false,
            functional: false,
            error: String(error),
            status: '笶・繧ｯ繝ｪ繝・け荳榊庄'
          });
          console.log(`繝懊ち繝ｳ "${buttonText}": 笶・繧ｯ繝ｪ繝・け荳榊庄`);
        }
      } else {
        results.push({
          component: `繝繝・す繝･繝懊・繝峨・繧ｿ繝ｳ: "${buttonText}"`,
          type: 'button',
          visible: isVisible,
          clickable: false,
          functional: false,
          status: '笶・髱櫁｡ｨ遉ｺ縺ｾ縺溘・辟｡蜉ｹ'
        });
      }
    }
    
    // 繝励Ν繝繧ｦ繝ｳ繝・せ繝・
    console.log('\n--- 繝励Ν繝繧ｦ繝ｳ繝・せ繝・---');
    const selects = await page.locator('select').all();
    console.log(`邱上・繝ｫ繝繧ｦ繝ｳ謨ｰ: ${selects.length}`);
    
    for (let i = 0; i < selects.length; i++) {
      const select = selects[i];
      const isVisible = await select.isVisible();
      const isEnabled = await select.isEnabled();
      
      if (isVisible && isEnabled) {
        try {
          const options = await select.locator('option').count();
          if (options > 1) {
            await select.selectOption({ index: 1 });
            const selectedValue = await select.inputValue();
            
            results.push({
              component: `繝繝・す繝･繝懊・繝峨・繝ｫ繝繧ｦ繝ｳ ${i + 1}`,
              type: 'select',
              visible: true,
              clickable: true,
              functional: true,
              selectedValue,
              status: '笨・讖溯・荳ｭ'
            });
            
            console.log(`繝励Ν繝繧ｦ繝ｳ ${i + 1}: 笨・讖溯・荳ｭ - 驕ｸ謚槫､: ${selectedValue}`);
          }
        } catch (error) {
          results.push({
            component: `繝繝・す繝･繝懊・繝峨・繝ｫ繝繧ｦ繝ｳ ${i + 1}`,
            type: 'select',
            visible: true,
            clickable: false,
            functional: false,
            error: String(error),
            status: '笶・驕ｸ謚樔ｸ榊庄'
          });
          console.log(`繝励Ν繝繧ｦ繝ｳ ${i + 1}: 笶・驕ｸ謚樔ｸ榊庄`);
        }
      }
    }
    
    // 繝√ぉ繝・け繝懊ャ繧ｯ繧ｹ繝・せ繝・
    console.log('\n--- 繝√ぉ繝・け繝懊ャ繧ｯ繧ｹ繝・せ繝・---');
    const checkboxes = await page.locator('input[type="checkbox"]').all();
    console.log(`邱上メ繧ｧ繝・け繝懊ャ繧ｯ繧ｹ謨ｰ: ${checkboxes.length}`);
    
    for (let i = 0; i < checkboxes.length; i++) {
      const checkbox = checkboxes[i];
      const isVisible = await checkbox.isVisible();
      const isEnabled = await checkbox.isEnabled();
      
      if (isVisible && isEnabled) {
        try {
          const originalState = await checkbox.isChecked();
          await checkbox.click();
          await page.waitForTimeout(500);
          const newState = await checkbox.isChecked();
          const isWorking = originalState !== newState;
          
          results.push({
            component: `繝繝・す繝･繝懊・繝峨メ繧ｧ繝・け繝懊ャ繧ｯ繧ｹ ${i + 1}`,
            type: 'checkbox',
            visible: true,
            clickable: true,
            functional: isWorking,
            originalState,
            newState,
            status: isWorking ? '笨・讖溯・荳ｭ' : '笶・髱樊ｩ溯・'
          });
          
          console.log(`繝√ぉ繝・け繝懊ャ繧ｯ繧ｹ ${i + 1}: ${isWorking ? '笨・讖溯・荳ｭ' : '笶・髱樊ｩ溯・'}`);
          
        } catch (error) {
          results.push({
            component: `繝繝・す繝･繝懊・繝峨メ繧ｧ繝・け繝懊ャ繧ｯ繧ｹ ${i + 1}`,
            type: 'checkbox',
            visible: true,
            clickable: false,
            functional: false,
            error: String(error),
            status: '笶・繧ｯ繝ｪ繝・け荳榊庄'
          });
          console.log(`繝√ぉ繝・け繝懊ャ繧ｯ繧ｹ ${i + 1}: 笶・繧ｯ繝ｪ繝・け荳榊庄`);
        }
      }
    }
    
    // 繝ｪ繝ｳ繧ｯ繝・せ繝・
    console.log('\n--- 繝ｪ繝ｳ繧ｯ繝・せ繝・---');
    const links = await page.locator('a[href]').all();
    console.log(`邱上Μ繝ｳ繧ｯ謨ｰ: ${links.length}`);
    
    for (let i = 0; i < Math.min(links.length, 5); i++) {
      const link = links[i];
      const isVisible = await link.isVisible();
      const href = await link.getAttribute('href');
      
      if (isVisible && href) {
        try {
          const originalUrl = page.url();
          await link.click();
          await page.waitForTimeout(1500);
          
          const newUrl = page.url();
          const hasNavigation = originalUrl !== newUrl;
          
          results.push({
            component: `繝繝・す繝･繝懊・繝峨Μ繝ｳ繧ｯ ${i + 1}`,
            type: 'link',
            visible: true,
            clickable: true,
            functional: hasNavigation,
            href,
            status: hasNavigation ? '笨・讖溯・荳ｭ' : '笶・髱樊ｩ溯・'
          });
          
          console.log(`繝ｪ繝ｳ繧ｯ ${i + 1} (${href}): ${hasNavigation ? '笨・讖溯・荳ｭ' : '笶・髱樊ｩ溯・'}`);
          
          // 蜈・↓謌ｻ繧・
          if (hasNavigation) {
            await page.goto('/dashboard');
            await page.waitForTimeout(1000);
          }
          
        } catch (error) {
          results.push({
            component: `繝繝・す繝･繝懊・繝峨Μ繝ｳ繧ｯ ${i + 1}`,
            type: 'link',
            visible: true,
            clickable: false,
            functional: false,
            href,
            error: String(error),
            status: '笶・繧ｯ繝ｪ繝・け荳榊庄'
          });
          console.log(`繝ｪ繝ｳ繧ｯ ${i + 1}: 笶・繧ｯ繝ｪ繝・け荳榊庄`);
        }
      }
    }
    
    console.log('\n=== 繝繝・す繝･繝懊・繝峨・繝・ぅ繧ｳ繝ｳ繝昴・繝阪Φ繝医ユ繧ｹ繝育ｵ先棡繧ｵ繝槭Μ繝ｼ ===');
    const workingCount = results.filter(r => r.functional).length;
    const totalCount = results.length;
    console.log(`讖溯・荳ｭ: ${workingCount}/${totalCount} (${((workingCount/totalCount)*100).toFixed(1)}%)`);
    
    console.log('\n=== 讖溯・荳ｭ縺ｮ隕∫ｴ ===');
    results.filter(r => r.functional).forEach(r => {
      console.log(`笨・${r.component}`);
    });
    
    console.log('\n=== 髱樊ｩ溯・縺ｮ隕∫ｴ ===');
    results.filter(r => !r.functional).forEach(r => {
      console.log(`笶・${r.component} - ${r.status}`);
    });
    
    console.log('\n=== 隧ｳ邏ｰ邨先棡 ===');
    console.log(JSON.stringify(results, null, 2));
  });

  test('鹿 繝｢繝ｼ繝繝ｫ讖溯・繝・せ繝・, async ({ page }) => {
    console.log('=== 繝｢繝ｼ繝繝ｫ讖溯・繝・せ繝磯幕蟋・===');
    
    const modalTests = [
      { page: '/dashboard', triggerText: '譛滄俣驕ｸ謚・, modalType: '譛滄俣驕ｸ謚槭Δ繝ｼ繝繝ｫ' },
      { page: '/dashboard', triggerText: '譛滄俣縺ｧ繝輔ぅ繝ｫ繧ｿ繝ｼ', modalType: '譛滄俣繝輔ぅ繝ｫ繧ｿ繝ｼ繝｢繝ｼ繝繝ｫ' },
      { page: '/inventory', triggerText: '譁ｰ隕丞膚蜩∫匳骭ｲ', modalType: '蝠・刀逋ｻ骭ｲ繝｢繝ｼ繝繝ｫ' },
      { page: '/inventory', triggerText: 'CSV繧､繝ｳ繝昴・繝・, modalType: 'CSV繧､繝ｳ繝昴・繝医Δ繝ｼ繝繝ｫ' },
      { page: '/settings', triggerText: '險ｭ螳・, modalType: '險ｭ螳壹Δ繝ｼ繝繝ｫ' }
    ];
    
    const results = [];
    
    for (const modalTest of modalTests) {
      console.log(`\n--- 繝・せ繝井ｸｭ: ${modalTest.modalType} ---`);
      
      await page.goto(modalTest.page);
      await page.waitForTimeout(2000);
      
      const triggerButton = page.locator(`button:has-text("${modalTest.triggerText}")`);
      const buttonExists = await triggerButton.isVisible();
      
      if (buttonExists) {
        try {
          await triggerButton.first().click();
          await page.waitForTimeout(1500);
          
          const modal = page.locator('[role="dialog"]');
          const isModalVisible = await modal.isVisible();
          
          if (isModalVisible) {
            // 繝｢繝ｼ繝繝ｫ蜀・・繝懊ち繝ｳ繧偵ユ繧ｹ繝・
            const modalButtons = await modal.locator('button').all();
            console.log(`${modalTest.modalType} 蜀・・繧ｿ繝ｳ謨ｰ: ${modalButtons.length}`);
            
            // 髢峨§繧九・繧ｿ繝ｳ繧偵ユ繧ｹ繝・
            const closeButton = modal.locator('button:has-text("繧ｭ繝｣繝ｳ繧ｻ繝ｫ"), button:has-text("髢峨§繧・), button:has-text("ﾃ・)');
            if (await closeButton.first().isVisible()) {
              await closeButton.first().click();
              await page.waitForTimeout(1000);
              
              const isModalClosed = !(await modal.isVisible());
              
              results.push({
                component: modalTest.modalType,
                triggerText: modalTest.triggerText,
                visible: true,
                clickable: true,
                functional: isModalClosed,
                modalButtonCount: modalButtons.length,
                status: isModalClosed ? '笨・讖溯・荳ｭ' : '笶・髱樊ｩ溯・'
              });
              
              console.log(`${modalTest.modalType}: ${isModalClosed ? '笨・讖溯・荳ｭ' : '笶・髱樊ｩ溯・'}`);
            } else {
              results.push({
                component: modalTest.modalType,
                triggerText: modalTest.triggerText,
                visible: true,
                clickable: true,
                functional: false,
                modalButtonCount: modalButtons.length,
                status: '笶・髢峨§繧九・繧ｿ繝ｳ縺ｪ縺・
              });
              console.log(`${modalTest.modalType}: 笶・髢峨§繧九・繧ｿ繝ｳ縺ｪ縺輿);
            }
          } else {
            results.push({
              component: modalTest.modalType,
              triggerText: modalTest.triggerText,
              visible: true,
              clickable: true,
              functional: false,
              status: '笶・繝｢繝ｼ繝繝ｫ譛ｪ陦ｨ遉ｺ'
            });
            console.log(`${modalTest.modalType}: 笶・繝｢繝ｼ繝繝ｫ譛ｪ陦ｨ遉ｺ`);
          }
        } catch (error) {
          results.push({
            component: modalTest.modalType,
            triggerText: modalTest.triggerText,
            visible: true,
            clickable: false,
            functional: false,
            error: String(error),
            status: '笶・繝医Μ繧ｬ繝ｼ荳榊庄'
          });
          console.log(`${modalTest.modalType}: 笶・繝医Μ繧ｬ繝ｼ荳榊庄 - ${String(error)}`);
        }
      } else {
        results.push({
          component: modalTest.modalType,
          triggerText: modalTest.triggerText,
          visible: false,
          clickable: false,
          functional: false,
          status: '笶・繝医Μ繧ｬ繝ｼ繝懊ち繝ｳ荳榊惠'
        });
        console.log(`${modalTest.modalType}: 笶・繝医Μ繧ｬ繝ｼ繝懊ち繝ｳ荳榊惠`);
      }
    }
    
    console.log('\n=== 繝｢繝ｼ繝繝ｫ讖溯・繝・せ繝育ｵ先棡繧ｵ繝槭Μ繝ｼ ===');
    const workingCount = results.filter(r => r.functional).length;
    const totalCount = results.length;
    console.log(`讖溯・荳ｭ: ${workingCount}/${totalCount} (${((workingCount/totalCount)*100).toFixed(1)}%)`);
    
    console.log('\n=== 讖溯・荳ｭ縺ｮ隕∫ｴ ===');
    results.filter(r => r.functional).forEach(r => {
      console.log(`笨・${r.component}`);
    });
    
    console.log('\n=== 髱樊ｩ溯・縺ｮ隕∫ｴ ===');
    results.filter(r => !r.functional).forEach(r => {
      console.log(`笶・${r.component} - ${r.status}`);
    });
    
    console.log('\n=== 隧ｳ邏ｰ邨先棡 ===');
    console.log(JSON.stringify(results, null, 2));
  });

  test('投 蜈ｨ逕ｻ髱｢邨ｱ蜷・I繧ｳ繝ｳ繝昴・繝阪Φ繝医ユ繧ｹ繝・, async ({ page }) => {
    console.log('=== 蜈ｨ逕ｻ髱｢邨ｱ蜷・I繧ｳ繝ｳ繝昴・繝阪Φ繝医ユ繧ｹ繝磯幕蟋・===');
    
    const pages = [
      { name: '繝繝・す繝･繝懊・繝・, url: '/dashboard' },
      { name: '蝨ｨ蠎ｫ邂｡逅・, url: '/inventory' },
      { name: '蝠・刀蜃ｺ蜩・, url: '/sales' },
      { name: '驟埼∫ｮ｡逅・, url: '/delivery' },
      { name: '霑泌刀邂｡逅・, url: '/returns' },
      { name: '繝ｬ繝昴・繝・, url: '/reports' },
      { name: '險ｭ螳・, url: '/settings' },
      { name: '繝励Ο繝輔ぅ繝ｼ繝ｫ', url: '/profile' }
    ];
    
    const allResults = [];
    
    for (const pageInfo of pages) {
      console.log(`\n--- ${pageInfo.name} (${pageInfo.url}) 繝壹・繧ｸ繝・せ繝・---`);
      
      try {
        await page.goto(pageInfo.url);
        await page.waitForTimeout(2000);
        
        const pageResults = [];
        
        // 繝壹・繧ｸ蝓ｺ譛ｬ諠・ｱ
        const pageTitle = await page.title();
        const h1 = await page.locator('h1').first().textContent();
        
        // 繝懊ち繝ｳ繝・せ繝・
        const buttons = await page.locator('button').all();
        const visibleButtons = [];
        for (const button of buttons) {
          if (await button.isVisible() && await button.isEnabled()) {
            visibleButtons.push(button);
          }
        }
        
        console.log(`  繝壹・繧ｸ繧ｿ繧､繝医Ν: ${pageTitle}`);
        console.log(`  H1繧ｿ繧､繝医Ν: ${h1}`);
        console.log(`  邱上・繧ｿ繝ｳ謨ｰ: ${buttons.length}`);
        console.log(`  譛牙柑繝懊ち繝ｳ謨ｰ: ${visibleButtons.length}`);
        
        // 譛蛻昴・3蛟九・繝懊ち繝ｳ繧偵ユ繧ｹ繝・
        for (let i = 0; i < Math.min(visibleButtons.length, 3); i++) {
          const button = visibleButtons[i];
          const buttonText = await button.textContent();
          
          try {
            const originalUrl = page.url();
            await button.click();
            await page.waitForTimeout(1000);
            
            const newUrl = page.url();
            const hasModal = await page.locator('[role="dialog"]').isVisible();
            const hasUrlChange = originalUrl !== newUrl;
            const isWorking = hasModal || hasUrlChange;
            
            pageResults.push({
              page: pageInfo.name,
              component: `繝懊ち繝ｳ: "${buttonText}"`,
              type: 'button',
              functional: isWorking,
              actionType: hasModal ? 'modal' : hasUrlChange ? 'navigation' : 'none',
              status: isWorking ? '笨・讖溯・荳ｭ' : '笶・髱樊ｩ溯・'
            });
            
            // 蜈・・迥ｶ諷九↓謌ｻ縺・
            if (hasModal) {
              const closeButton = page.locator('button:has-text("繧ｭ繝｣繝ｳ繧ｻ繝ｫ"), button:has-text("髢峨§繧・), button:has-text("ﾃ・)');
              if (await closeButton.first().isVisible()) {
                await closeButton.first().click();
                await page.waitForTimeout(500);
              }
            }
            if (hasUrlChange) {
              await page.goto(pageInfo.url);
              await page.waitForTimeout(1000);
            }
            
          } catch (error) {
            pageResults.push({
              page: pageInfo.name,
              component: `繝懊ち繝ｳ: "${buttonText}"`,
              type: 'button',
              functional: false,
              error: String(error),
              status: '笶・繧ｯ繝ｪ繝・け荳榊庄'
            });
          }
        }
        
        // 繝励Ν繝繧ｦ繝ｳ繝・せ繝・
        const selects = await page.locator('select').all();
        for (let i = 0; i < selects.length; i++) {
          const select = selects[i];
          if (await select.isVisible() && await select.isEnabled()) {
            try {
              const options = await select.locator('option').count();
              if (options > 1) {
                await select.selectOption({ index: 1 });
                
                pageResults.push({
                  page: pageInfo.name,
                  component: `繝励Ν繝繧ｦ繝ｳ ${i + 1}`,
                  type: 'select',
                  functional: true,
                  status: '笨・讖溯・荳ｭ'
                });
              }
            } catch (error) {
              pageResults.push({
                page: pageInfo.name,
                component: `繝励Ν繝繧ｦ繝ｳ ${i + 1}`,
                type: 'select',
                functional: false,
                error: String(error),
                status: '笶・驕ｸ謚樔ｸ榊庄'
              });
            }
          }
        }
        
        // 繝√ぉ繝・け繝懊ャ繧ｯ繧ｹ繝・せ繝・
        const checkboxes = await page.locator('input[type="checkbox"]').all();
        for (let i = 0; i < checkboxes.length; i++) {
          const checkbox = checkboxes[i];
          if (await checkbox.isVisible() && await checkbox.isEnabled()) {
            try {
              const originalState = await checkbox.isChecked();
              await checkbox.click();
              await page.waitForTimeout(300);
              const newState = await checkbox.isChecked();
              const isWorking = originalState !== newState;
              
              pageResults.push({
                page: pageInfo.name,
                component: `繝√ぉ繝・け繝懊ャ繧ｯ繧ｹ ${i + 1}`,
                type: 'checkbox',
                functional: isWorking,
                status: isWorking ? '笨・讖溯・荳ｭ' : '笶・髱樊ｩ溯・'
              });
            } catch (error) {
              pageResults.push({
                page: pageInfo.name,
                component: `繝√ぉ繝・け繝懊ャ繧ｯ繧ｹ ${i + 1}`,
                type: 'checkbox',
                functional: false,
                error: String(error),
                status: '笶・繧ｯ繝ｪ繝・け荳榊庄'
              });
            }
          }
        }
        
        allResults.push(...pageResults);
        
        // 繝壹・繧ｸ邨先棡繧定｡ｨ遉ｺ
        console.log(`  繝・せ繝域ｸ医∩繧ｳ繝ｳ繝昴・繝阪Φ繝・ ${pageResults.length}蛟義);
        console.log(`  讖溯・荳ｭ: ${pageResults.filter(r => r.functional).length}蛟義);
        console.log(`  髱樊ｩ溯・: ${pageResults.filter(r => !r.functional).length}蛟義);
        
      } catch (error) {
        console.log(`${pageInfo.name}: 繝壹・繧ｸ繧｢繧ｯ繧ｻ繧ｹ荳榊庄 - ${String(error)}`);
        allResults.push({
          page: pageInfo.name,
          component: '繝壹・繧ｸ蜈ｨ菴・,
          type: 'page',
          functional: false,
          error: String(error),
          status: '笶・繧｢繧ｯ繧ｻ繧ｹ荳榊庄'
        });
      }
    }
    
    console.log('\n=== 蜈ｨ逕ｻ髱｢邨ｱ蜷医ユ繧ｹ繝育ｵ先棡繧ｵ繝槭Μ繝ｼ ===');
    
    const summary = {
      total: allResults.length,
      functional: allResults.filter(r => r.functional).length,
      nonFunctional: allResults.filter(r => !r.functional).length
    };
    
    console.log(`邱上さ繝ｳ繝昴・繝阪Φ繝域焚: ${summary.total}`);
    console.log(`讖溯・荳ｭ: ${summary.functional}`);
    console.log(`髱樊ｩ溯・: ${summary.nonFunctional}`);
    console.log(`讖溯・邇・ ${((summary.functional / summary.total) * 100).toFixed(1)}%`);
    
    console.log('\n=== 繝壹・繧ｸ蛻･讖溯・邇・===');
    pages.forEach(pageInfo => {
      const pageResults = allResults.filter(r => r.page === pageInfo.name);
      const pageFunctional = pageResults.filter(r => r.functional).length;
      const pageTotal = pageResults.length;
      const pageRate = pageTotal > 0 ? ((pageFunctional / pageTotal) * 100).toFixed(1) : '0.0';
      console.log(`${pageInfo.name}: ${pageFunctional}/${pageTotal} (${pageRate}%)`);
    });
    
    console.log('\n=== 讖溯・荳ｭ縺ｮ隕∫ｴ ===');
    allResults.filter(r => r.functional).forEach(r => {
      console.log(`笨・[${r.page}] ${r.component}`);
    });
    
    console.log('\n=== 髱樊ｩ溯・縺ｮ隕∫ｴ ===');
    allResults.filter(r => !r.functional).forEach(r => {
      console.log(`笶・[${r.page}] ${r.component} - ${r.status}`);
    });
    
    console.log('\n=== 隧ｳ邏ｰ邨先棡 ===');
    console.log(JSON.stringify(allResults, null, 2));
  });
}); 
import { test, expect } from '@playwright/test';

test.describe('UI菫ｮ蠕ｩ遒ｺ隱阪ユ繧ｹ繝・, () => {
  test('繝繝・す繝･繝懊・繝峨・繝ｼ繧ｸ縺ｮUI陦ｨ遉ｺ遒ｺ隱・, async ({ page }) => {
    // 繝繝・す繝･繝懊・繝峨・繝ｼ繧ｸ縺ｫ遘ｻ蜍・    await page.goto('http://localhost:3002/dashboard');
    
    // 繝壹・繧ｸ繧ｿ繧､繝医Ν縺瑚｡ｨ遉ｺ縺輔ｌ繧九％縺ｨ繧堤｢ｺ隱・    await expect(page.locator('h1')).toBeVisible();
    
    // intelligence-card縺瑚｡ｨ遉ｺ縺輔ｌ繧九％縺ｨ繧堤｢ｺ隱・    await expect(page.locator('.intelligence-card').first()).toBeVisible();
    
    // 繧ｹ繧ｯ繝ｭ繝ｼ繝ｫ縺梧ｩ溯・縺吶ｋ縺薙→繧堤｢ｺ隱・    await page.evaluate(() => window.scrollTo(0, 500));
    await page.waitForTimeout(1000);
    
    console.log('笨・繝繝・す繝･繝懊・繝峨・繝ｼ繧ｸ縺ｮUI陦ｨ遉ｺ遒ｺ隱榊ｮ御ｺ・);
  });

  test('蝨ｨ蠎ｫ邂｡逅・・繝ｼ繧ｸ縺ｮUI陦ｨ遉ｺ遒ｺ隱・, async ({ page }) => {
    // 蝨ｨ蠎ｫ邂｡逅・・繝ｼ繧ｸ縺ｫ遘ｻ蜍・    await page.goto('http://localhost:3002/inventory');
    
    // 繝壹・繧ｸ縺瑚ｪｭ縺ｿ霎ｼ縺ｾ繧後ｋ縺薙→繧堤｢ｺ隱・    await expect(page.locator('h1')).toBeVisible();
    
    // 繝｡繝医Μ繧ｯ繧ｹ繧ｫ繝ｼ繝峨′陦ｨ遉ｺ縺輔ｌ繧九％縺ｨ繧堤｢ｺ隱・    await expect(page.locator('.intelligence-metrics').first()).toBeVisible();
    
    console.log('笨・蝨ｨ蠎ｫ邂｡逅・・繝ｼ繧ｸ縺ｮUI陦ｨ遉ｺ遒ｺ隱榊ｮ御ｺ・);
  });

  test('繧ｹ繧ｿ繝・ヵ繝繝・す繝･繝懊・繝峨・繝ｼ繧ｸ縺ｮUI陦ｨ遉ｺ遒ｺ隱・, async ({ page }) => {
    // 繧ｹ繧ｿ繝・ヵ繝繝・す繝･繝懊・繝峨・繝ｼ繧ｸ縺ｫ遘ｻ蜍・    await page.goto('http://localhost:3002/staff/dashboard');
    
    // 繝壹・繧ｸ縺瑚ｪｭ縺ｿ霎ｼ縺ｾ繧後ｋ縺薙→繧堤｢ｺ隱・    await expect(page.locator('h1')).toBeVisible();
    
    // intelligence-card縺瑚｡ｨ遉ｺ縺輔ｌ繧九％縺ｨ繧堤｢ｺ隱・    await expect(page.locator('.intelligence-card').first()).toBeVisible();
    
    console.log('笨・繧ｹ繧ｿ繝・ヵ繝繝・す繝･繝懊・繝峨・繝ｼ繧ｸ縺ｮUI陦ｨ遉ｺ遒ｺ隱榊ｮ御ｺ・);
  });

  test('讓ｪ蟷・宛蠕｡縺ｮ遒ｺ隱・, async ({ page }) => {
    await page.goto('http://localhost:3002/dashboard');
    
    // 繝壹・繧ｸ繧ｳ繝ｳ繝・リ縺ｮ譛螟ｧ蟷・′驕ｩ蛻・↓險ｭ螳壹＆繧後※縺・ｋ縺薙→繧堤｢ｺ隱・    const container = page.locator('.page-scroll-container > div').first();
    await expect(container).toHaveCSS('max-width', '1600px');
    
    console.log('笨・讓ｪ蟷・宛蠕｡縺ｮ遒ｺ隱榊ｮ御ｺ・);
  });

  test('繧ｹ繧ｯ繝ｭ繝ｼ繝ｫ讖溯・縺ｮ遒ｺ隱・, async ({ page }) => {
    await page.goto('http://localhost:3002/test-scroll');
    
    // 繧ｹ繧ｯ繝ｭ繝ｼ繝ｫ繝・せ繝医・繝ｼ繧ｸ縺ｧ繧ｹ繧ｯ繝ｭ繝ｼ繝ｫ縺梧ｩ溯・縺吶ｋ縺薙→繧堤｢ｺ隱・    await page.evaluate(() => window.scrollTo(0, 1000));
    await page.waitForTimeout(500);
    
    const scrollTop = await page.evaluate(() => window.pageYOffset);
    expect(scrollTop).toBeGreaterThan(0);
    
    console.log('笨・繧ｹ繧ｯ繝ｭ繝ｼ繝ｫ讖溯・縺ｮ遒ｺ隱榊ｮ御ｺ・);
  });
}); 

test.describe('肌 繝峨Ο繝・・繝繧ｦ繝ｳ繝｡繝九Η繝ｼz-index菫ｮ豁｣讀懆ｨｼ', () => {
  test.beforeEach(async ({ page }) => {
    // 繧ｹ繧ｿ繝・ヵ繝繝・す繝･繝懊・繝峨↓遘ｻ蜍・    await page.goto('/staff/dashboard');
    await page.waitForLoadState('networkidle');
  });

  test('搭 繝励Ο繝輔ぅ繝ｼ繝ｫ繝｡繝九Η繝ｼ縺梧怙蜑埼擇縺ｫ陦ｨ遉ｺ縺輔ｌ繧・, async ({ page }) => {
    // 繝励Ο繝輔ぅ繝ｼ繝ｫ繝懊ち繝ｳ繧偵け繝ｪ繝・け
    const profileButton = page.locator('button').filter({ hasText: '繧ｹ繧ｿ繝・ヵ' }).first();
    await expect(profileButton).toBeVisible();
    await profileButton.click();

    // 繝励Ο繝輔ぅ繝ｼ繝ｫ繝｡繝九Η繝ｼ縺瑚｡ｨ遉ｺ縺輔ｌ繧九％縺ｨ繧堤｢ｺ隱・    const profileMenu = page.locator('[data-testid="profile-menu"]');
    await expect(profileMenu).toBeVisible({ timeout: 5000 });

    // z-index縺碁←蛻・↓險ｭ螳壹＆繧後※縺・ｋ縺薙→繧堤｢ｺ隱・    const zIndex = await profileMenu.evaluate((el) => {
      const computedStyle = window.getComputedStyle(el);
      console.log('Profile menu z-index:', computedStyle.zIndex);
      return computedStyle.zIndex;
    });
    
    console.log('Actual z-index value:', zIndex);
    
    // z-index 縺・10000 莉･荳翫〒縺ゅｋ縺薙→繧堤｢ｺ隱搾ｼ域枚蟄怜・縺ｨ縺励※豈碑ｼ・ｼ・    const zIndexNum = parseInt(zIndex);
    expect(zIndexNum).toBeGreaterThanOrEqual(10000);

    // 繝｡繝九Η繝ｼ縺悟ｮ滄圀縺ｫ陦ｨ遉ｺ縺輔ｌ縺ｦ縺・ｋ縺薙→繧堤｢ｺ隱・    const rect = await profileMenu.boundingBox();
    expect(rect).not.toBeNull();
    expect(rect!.width).toBeGreaterThan(0);
    expect(rect!.height).toBeGreaterThan(0);
  });

  test('粕 騾夂衍繝代ロ繝ｫ縺梧怙蜑埼擇縺ｫ陦ｨ遉ｺ縺輔ｌ繧・, async ({ page }) => {
    // 騾夂衍繝懊ち繝ｳ繧偵け繝ｪ繝・け
    const notificationButton = page.locator('button[aria-label="騾夂衍"]');
    await expect(notificationButton).toBeVisible();
    await notificationButton.click();

    // 騾夂衍繝代ロ繝ｫ縺瑚｡ｨ遉ｺ縺輔ｌ繧九％縺ｨ繧堤｢ｺ隱・    const notificationPanel = page.locator('[data-testid="notification-panel"]');
    await expect(notificationPanel).toBeVisible({ timeout: 5000 });

    // z-index縺碁←蛻・↓險ｭ螳壹＆繧後※縺・ｋ縺薙→繧堤｢ｺ隱・    const zIndex = await notificationPanel.evaluate((el) => {
      const computedStyle = window.getComputedStyle(el);
      console.log('Notification panel z-index:', computedStyle.zIndex);
      return computedStyle.zIndex;
    });
    
    console.log('Notification panel z-index value:', zIndex);
    const zIndexNum = parseInt(zIndex);
    expect(zIndexNum).toBeGreaterThanOrEqual(10000);
  });

  test('逃 蜃ｺ闕ｷ繝壹・繧ｸ縺ｮ繧ｹ繝・・繧ｿ繧ｹ繝峨Ο繝・・繝繧ｦ繝ｳ縺梧怙蜑埼擇縺ｫ陦ｨ遉ｺ縺輔ｌ繧・, async ({ page }) => {
    // 蜃ｺ闕ｷ繝壹・繧ｸ縺ｫ遘ｻ蜍・    await page.goto('/staff/shipping');
    await page.waitForLoadState('networkidle');

    // 邨ｱ荳縺輔ｌ縺溘せ繝・・繧ｿ繧ｹ螟画峩繝懊ち繝ｳ繧呈爾縺励※繧ｯ繝ｪ繝・け
    const statusButton = page.locator('button').filter({ hasText: '繧ｹ繝・・繧ｿ繧ｹ螟画峩' }).first();
    
    if (await statusButton.isVisible()) {
      await statusButton.click();

      // 邨ｱ荳縺輔ｌ縺溘せ繝・・繧ｿ繧ｹ繝峨Ο繝・・繝繧ｦ繝ｳ縺瑚｡ｨ遉ｺ縺輔ｌ繧九％縺ｨ繧堤｢ｺ隱・      const dropdown = page.locator('[data-testid="unified-status-dropdown"]');
      await expect(dropdown).toBeVisible({ timeout: 5000 });

      // z-index縺碁←蛻・↓險ｭ螳壹＆繧後※縺・ｋ縺薙→繧堤｢ｺ隱・      const zIndex = await dropdown.evaluate((el) => {
        const computedStyle = window.getComputedStyle(el);
        console.log('Unified status dropdown z-index:', computedStyle.zIndex);
        return computedStyle.zIndex;
      });
      
      console.log('Unified status dropdown z-index value:', zIndex);
      const zIndexNum = parseInt(zIndex);
      expect(zIndexNum).toBe(10000);

      // 繝峨Ο繝・・繝繧ｦ繝ｳ縺ｮ蜀・ｮｹ縺檎ｵｱ荳縺輔ｌ縺欟I繝・じ繧､繝ｳ縺ｫ縺ｪ縺｣縺ｦ縺・ｋ縺薙→繧堤｢ｺ隱・      const dropdownHeader = dropdown.locator('text=谺｡縺ｮ繧ｹ繝・・繧ｿ繧ｹ縺ｫ螟画峩');
      await expect(dropdownHeader).toBeVisible();

      // 繧ｹ繝・・繧ｿ繧ｹ繧ｪ繝励す繝ｧ繝ｳ縺瑚｡ｨ遉ｺ縺輔ｌ繧九％縺ｨ繧堤｢ｺ隱・      const statusOptions = dropdown.locator('.unified-status-option');
      const optionCount = await statusOptions.count();
      expect(optionCount).toBeGreaterThan(0);

      console.log(`Found ${optionCount} status options in unified dropdown`);
    } else {
      console.log('No unified status change button found on shipping page');
      // 繧ｹ繝・・繧ｿ繧ｹ螟画峩繝懊ち繝ｳ縺瑚ｦ九▽縺九ｉ縺ｪ縺・ｴ蜷医・繝・せ繝医ｒ繧ｹ繧ｭ繝・・
      test.skip();
    }
  });

  test('女・・z-index髫主ｱ､繧ｷ繧ｹ繝・Β縺ｮ謨ｴ蜷域ｧ遒ｺ隱・, async ({ page }) => {
    // 繝倥ャ繝繝ｼ縺ｮz-index繧堤｢ｺ隱・    const header = page.locator('header.nexus-header');
    await expect(header).toBeVisible();
    
    const headerZIndex = await header.evaluate((el) => {
      const computedStyle = window.getComputedStyle(el);
      console.log('Header z-index:', computedStyle.zIndex);
      return computedStyle.zIndex;
    });
    
    console.log('Header z-index value:', headerZIndex);
    // 繝倥ャ繝繝ｼ縺・z-index 100 縺ｧ縺ゅｋ縺薙→繧堤｢ｺ隱・    expect(parseInt(headerZIndex)).toBe(100);

    // 繝励Ο繝輔ぅ繝ｼ繝ｫ繝｡繝九Η繝ｼ繧帝幕縺・    const profileButton = page.locator('button').filter({ hasText: '繧ｹ繧ｿ繝・ヵ' }).first();
    await profileButton.click();

    const profileMenu = page.locator('[data-testid="profile-menu"]');
    await expect(profileMenu).toBeVisible({ timeout: 5000 });

    const menuZIndex = await profileMenu.evaluate((el) => {
      const computedStyle = window.getComputedStyle(el);
      console.log('Profile menu z-index:', computedStyle.zIndex);
      return computedStyle.zIndex;
    });

    console.log('Profile menu z-index value:', menuZIndex);
    // 繝峨Ο繝・・繝繧ｦ繝ｳ繝｡繝九Η繝ｼ縺後・繝・ム繝ｼ繧医ｊ鬮倥＞z-index繧呈戟縺､縺薙→繧堤｢ｺ隱・    expect(parseInt(menuZIndex)).toBeGreaterThan(parseInt(headerZIndex));
  });

  test('識 隍・焚縺ｮ繝峨Ο繝・・繝繧ｦ繝ｳ繝｡繝九Η繝ｼ縺ｮ驥阪・蜷医ｏ縺帛虚菴・, async ({ page }) => {
    // 騾夂衍繝代ロ繝ｫ縺ｮz-index繧堤｢ｺ隱・    const notificationButton = page.locator('button[aria-label="騾夂衍"]');
    await notificationButton.click();

    const notificationPanel = page.locator('[data-testid="notification-panel"]');
    await expect(notificationPanel).toBeVisible({ timeout: 5000 });

    const notificationZIndex = await notificationPanel.evaluate((el) => {
      return window.getComputedStyle(el).zIndex;
    });

    console.log('Notification z-index:', notificationZIndex);
    expect(parseInt(notificationZIndex)).toBe(10000);

    // 騾夂衍繝代ロ繝ｫ繧帝哩縺倥ｋ・磯夂衍繝懊ち繝ｳ繧貞・繧ｯ繝ｪ繝・け・・    await notificationButton.click();

    // 繝励Ο繝輔ぅ繝ｼ繝ｫ繝｡繝九Η繝ｼ縺ｮz-index繧堤｢ｺ隱・    const profileButton = page.locator('button').filter({ hasText: '繧ｹ繧ｿ繝・ヵ' }).first();
    await profileButton.click();

    const profileMenu = page.locator('[data-testid="profile-menu"]');
    await expect(profileMenu).toBeVisible({ timeout: 5000 });

    const profileZIndex = await profileMenu.evaluate((el) => {
      return window.getComputedStyle(el).zIndex;
    });

    console.log('Profile z-index:', profileZIndex);
    expect(parseInt(profileZIndex)).toBe(10000);

    // 荳｡譁ｹ縺ｮ繝｡繝九Η繝ｼ縺悟酔縺・-index髫主ｱ､縺ｫ縺ゅｋ縺薙→繧堤｢ｺ隱・    expect(parseInt(profileZIndex)).toBe(parseInt(notificationZIndex));
  });
}); 
import { test, expect } from '@playwright/test';

test.describe('UI讖溯・諤ｧ繝・せ繝・- 蜈ｨ隕∫ｴ縺ｮ蜍穂ｽ懃｢ｺ隱・, () => {
  let testResults: {
    category: string;
    element: string;
    selector: string;
    status: 'functional' | 'non-functional' | 'not-found';
    details?: string;
  }[] = [];

  test.beforeEach(async ({ page }) => {
    await page.goto('/login');
    await page.fill('input[name="email"]', 'seller@example.com');
    await page.fill('input[name="password"]', 'Test@2024');
    await page.click('button[type="submit"]');
    await page.waitForLoadState('networkidle');
  });

  test.afterAll(async () => {
    console.log('\n============ UI讖溯・諤ｧ繝・せ繝育ｵ先棡繝ｬ繝昴・繝・============\n');
    
    const functional = testResults.filter(r => r.status === 'functional');
    const nonFunctional = testResults.filter(r => r.status === 'non-functional');
    const notFound = testResults.filter(r => r.status === 'not-found');

    console.log(`笨・讖溯・縺励※縺・ｋ隕∫ｴ: ${functional.length}莉ｶ`);
    functional.forEach(r => {
      console.log(`  - [${r.category}] ${r.element} (${r.selector})`);
      if (r.details) console.log(`    隧ｳ邏ｰ: ${r.details}`);
    });

    console.log(`\n笶・讖溯・縺励※縺・↑縺・ｦ∫ｴ: ${nonFunctional.length}莉ｶ`);
    nonFunctional.forEach(r => {
      console.log(`  - [${r.category}] ${r.element} (${r.selector})`);
      if (r.details) console.log(`    隧ｳ邏ｰ: ${r.details}`);
    });

    console.log(`\n笞・・隕九▽縺九ｉ縺ｪ縺・ｦ∫ｴ: ${notFound.length}莉ｶ`);
    notFound.forEach(r => {
      console.log(`  - [${r.category}] ${r.element} (${r.selector})`);
    });

    console.log('\n============================================\n');
  });

  test('繧ｵ繧､繝峨Γ繝九Η繝ｼ縺ｮ蜈ｨ鬆・岼縺ｮ讖溯・遒ｺ隱・, async ({ page }) => {
    const sideMenuItems = [
      { name: '繝繝・す繝･繝懊・繝・, selector: 'a[href="/dashboard"]', expectedUrl: '/dashboard' },
      { name: '蝨ｨ蠎ｫ邂｡逅・, selector: 'a[href="/inventory"]', expectedUrl: '/inventory' },
      { name: '蜈･闕ｷ險育判', selector: 'a[href="/delivery-plan"]', expectedUrl: '/delivery-plan' },
      { name: '蜃ｺ蜩∫ｮ｡逅・, selector: 'a[href="/listing"]', expectedUrl: '/listing' },
      { name: '豕ｨ譁・ｮ｡逅・, selector: 'a[href="/orders"]', expectedUrl: '/orders' },
      { name: '蜃ｺ闕ｷ邂｡逅・, selector: 'a[href="/shipping"]', expectedUrl: '/shipping' },
      { name: '霑泌刀邂｡逅・, selector: 'a[href="/returns"]', expectedUrl: '/returns' },
      { name: '繝ｬ繝昴・繝・, selector: 'a[href="/reports"]', expectedUrl: '/reports' },
      { name: '險ｭ螳・, selector: 'a[href="/settings"]', expectedUrl: '/settings' }
    ];

    for (const item of sideMenuItems) {
      try {
        const element = await page.locator(item.selector);
        if (await element.isVisible()) {
          await element.click();
          await page.waitForLoadState('networkidle');
          const currentUrl = page.url();
          
          if (currentUrl.includes(item.expectedUrl)) {
            testResults.push({
              category: '繧ｵ繧､繝峨Γ繝九Η繝ｼ',
              element: item.name,
              selector: item.selector,
              status: 'functional',
              details: `豁｣蟶ｸ縺ｫ${item.expectedUrl}縺ｸ驕ｷ遘ｻ`
            });
          } else {
            testResults.push({
              category: '繧ｵ繧､繝峨Γ繝九Η繝ｼ',
              element: item.name,
              selector: item.selector,
              status: 'non-functional',
              details: `譛溷ｾ・＆繧後◆URL(${item.expectedUrl})縺ｨ逡ｰ縺ｪ繧・ ${currentUrl}`
            });
          }
        } else {
          testResults.push({
            category: '繧ｵ繧､繝峨Γ繝九Η繝ｼ',
            element: item.name,
            selector: item.selector,
            status: 'not-found'
          });
        }
      } catch (error) {
        testResults.push({
          category: '繧ｵ繧､繝峨Γ繝九Η繝ｼ',
          element: item.name,
          selector: item.selector,
          status: 'non-functional',
          details: error.message
        });
      }
    }
  });

  test('繝倥ャ繝繝ｼ繝｡繝九Η繝ｼ縺ｮ讖溯・遒ｺ隱・, async ({ page }) => {
    await page.goto('/dashboard');
    
    const headerItems = [
      { name: '騾夂衍繧｢繧､繧ｳ繝ｳ', selector: 'button[aria-label="騾夂衍"]', action: 'click' },
      { name: '繝励Ο繝輔ぅ繝ｼ繝ｫ繝｡繝九Η繝ｼ', selector: 'button[aria-label="繝励Ο繝輔ぅ繝ｼ繝ｫ"]', action: 'click' },
      { name: '繝ｭ繧ｰ繧｢繧ｦ繝・, selector: 'button:has-text("繝ｭ繧ｰ繧｢繧ｦ繝・)', action: 'click' }
    ];

    for (const item of headerItems) {
      try {
        const element = await page.locator(item.selector).first();
        if (await element.isVisible()) {
          if (item.action === 'click') {
            await element.click();
            await page.waitForTimeout(1000);
            
            if (item.name === '騾夂衍繧｢繧､繧ｳ繝ｳ') {
              const notificationPanel = await page.locator('[role="dialog"], .notification-panel, div[class*="notification"]');
              if (await notificationPanel.isVisible()) {
                testResults.push({
                  category: '繝倥ャ繝繝ｼ',
                  element: item.name,
                  selector: item.selector,
                  status: 'functional',
                  details: '騾夂衍繝代ロ繝ｫ縺瑚｡ｨ遉ｺ縺輔ｌ繧・
                });
              } else {
                testResults.push({
                  category: '繝倥ャ繝繝ｼ',
                  element: item.name,
                  selector: item.selector,
                  status: 'non-functional',
                  details: '騾夂衍繝代ロ繝ｫ縺瑚｡ｨ遉ｺ縺輔ｌ縺ｪ縺・
                });
              }
            } else if (item.name === '繝励Ο繝輔ぅ繝ｼ繝ｫ繝｡繝九Η繝ｼ') {
              const profileMenu = await page.locator('[role="menu"], .profile-menu, div[class*="menu"]');
              if (await profileMenu.isVisible()) {
                testResults.push({
                  category: '繝倥ャ繝繝ｼ',
                  element: item.name,
                  selector: item.selector,
                  status: 'functional',
                  details: '繝励Ο繝輔ぅ繝ｼ繝ｫ繝｡繝九Η繝ｼ縺瑚｡ｨ遉ｺ縺輔ｌ繧・
                });
              } else {
                testResults.push({
                  category: '繝倥ャ繝繝ｼ',
                  element: item.name,
                  selector: item.selector,
                  status: 'non-functional',
                  details: '繝励Ο繝輔ぅ繝ｼ繝ｫ繝｡繝九Η繝ｼ縺瑚｡ｨ遉ｺ縺輔ｌ縺ｪ縺・
                });
              }
            }
          }
        } else {
          testResults.push({
            category: '繝倥ャ繝繝ｼ',
            element: item.name,
            selector: item.selector,
            status: 'not-found'
          });
        }
      } catch (error) {
        testResults.push({
          category: '繝倥ャ繝繝ｼ',
          element: item.name,
          selector: item.selector,
          status: 'non-functional',
          details: error.message
        });
      }
    }
  });

  test('繝懊ョ繧｣蜀・・繝懊ち繝ｳ隕∫ｴ縺ｮ讖溯・遒ｺ隱・, async ({ page }) => {
    await page.goto('/inventory');
    await page.waitForLoadState('networkidle');

    const buttons = await page.locator('button:visible').all();
    
    for (let i = 0; i < Math.min(buttons.length, 10); i++) {
      const button = buttons[i];
      const buttonText = await button.textContent() || `繝懊ち繝ｳ${i + 1}`;
      const buttonSelector = `button:nth-of-type(${i + 1})`;
      
      try {
        if (await button.isEnabled()) {
          await button.click();
          await page.waitForTimeout(500);
          
          const hasModal = await page.locator('[role="dialog"], .modal').isVisible();
          const urlChanged = page.url() !== 'http://localhost:3000/inventory';
          
          if (hasModal || urlChanged) {
            testResults.push({
              category: '繝懊ち繝ｳ',
              element: buttonText.trim(),
              selector: buttonSelector,
              status: 'functional',
              details: hasModal ? '繝｢繝ｼ繝繝ｫ/繝繧､繧｢繝ｭ繧ｰ繧帝幕縺・ : '繝壹・繧ｸ驕ｷ遘ｻ縺吶ｋ'
            });
          } else {
            testResults.push({
              category: '繝懊ち繝ｳ',
              element: buttonText.trim(),
              selector: buttonSelector,
              status: 'non-functional',
              details: '繧ｯ繝ｪ繝・け縺励※繧ゆｽ輔ｂ襍ｷ縺薙ｉ縺ｪ縺・
            });
          }
          
          if (hasModal) {
            await page.keyboard.press('Escape');
            await page.waitForTimeout(500);
          } else if (urlChanged) {
            await page.goto('/inventory');
          }
        } else {
          testResults.push({
            category: '繝懊ち繝ｳ',
            element: buttonText.trim(),
            selector: buttonSelector,
            status: 'non-functional',
            details: '辟｡蜉ｹ蛹悶＆繧後※縺・ｋ'
          });
        }
      } catch (error) {
        testResults.push({
          category: '繝懊ち繝ｳ',
          element: buttonText.trim(),
          selector: buttonSelector,
          status: 'non-functional',
          details: error.message
        });
      }
    }
  });

  test('繝励Ν繝繧ｦ繝ｳ縲√ヨ繧ｰ繝ｫ縲√メ繧ｧ繝・け繝懊ャ繧ｯ繧ｹ縺ｮ讖溯・遒ｺ隱・, async ({ page }) => {
    await page.goto('/settings');
    await page.waitForLoadState('networkidle');

    // 繝励Ν繝繧ｦ繝ｳ・医そ繝ｬ繧ｯ繝茨ｼ峨・遒ｺ隱・
    const selects = await page.locator('select:visible').all();
    for (let i = 0; i < selects.length; i++) {
      const select = selects[i];
      const selectId = await select.getAttribute('id') || `select-${i}`;
      
      try {
        const options = await select.locator('option').count();
        if (options > 1) {
          await select.selectOption({ index: 1 });
          testResults.push({
            category: '繝励Ν繝繧ｦ繝ｳ',
            element: selectId,
            selector: `select#${selectId}`,
            status: 'functional',
            details: `${options}蛟九・繧ｪ繝励す繝ｧ繝ｳ縺ゅｊ`
          });
        } else {
          testResults.push({
            category: '繝励Ν繝繧ｦ繝ｳ',
            element: selectId,
            selector: `select#${selectId}`,
            status: 'non-functional',
            details: '繧ｪ繝励す繝ｧ繝ｳ縺・蛟倶ｻ･荳・
          });
        }
      } catch (error) {
        testResults.push({
          category: '繝励Ν繝繧ｦ繝ｳ',
          element: selectId,
          selector: `select#${selectId}`,
          status: 'non-functional',
          details: error.message
        });
      }
    }

    // 繝医げ繝ｫ繧ｹ繧､繝・メ縺ｮ遒ｺ隱・
    const toggles = await page.locator('input[type="checkbox"][role="switch"], button[role="switch"]').all();
    for (let i = 0; i < toggles.length; i++) {
      const toggle = toggles[i];
      const toggleId = await toggle.getAttribute('id') || `toggle-${i}`;
      
      try {
        const initialState = await toggle.isChecked();
        await toggle.click();
        const newState = await toggle.isChecked();
        
        if (initialState !== newState) {
          testResults.push({
            category: '繝医げ繝ｫ',
            element: toggleId,
            selector: `#${toggleId}`,
            status: 'functional',
            details: '迥ｶ諷九・蛻・ｊ譖ｿ縺医′蜿ｯ閭ｽ'
          });
        } else {
          testResults.push({
            category: '繝医げ繝ｫ',
            element: toggleId,
            selector: `#${toggleId}`,
            status: 'non-functional',
            details: '迥ｶ諷九′螟牙喧縺励↑縺・
          });
        }
      } catch (error) {
        testResults.push({
          category: '繝医げ繝ｫ',
          element: toggleId,
          selector: `#${toggleId}`,
          status: 'non-functional',
          details: error.message
        });
      }
    }

    // 繝√ぉ繝・け繝懊ャ繧ｯ繧ｹ縺ｮ遒ｺ隱・
    const checkboxes = await page.locator('input[type="checkbox"]:not([role="switch"])').all();
    for (let i = 0; i < Math.min(checkboxes.length, 5); i++) {
      const checkbox = checkboxes[i];
      const checkboxId = await checkbox.getAttribute('id') || `checkbox-${i}`;
      
      try {
        const initialState = await checkbox.isChecked();
        await checkbox.click();
        const newState = await checkbox.isChecked();
        
        if (initialState !== newState) {
          testResults.push({
            category: '繝√ぉ繝・け繝懊ャ繧ｯ繧ｹ',
            element: checkboxId,
            selector: `#${checkboxId}`,
            status: 'functional',
            details: '繝√ぉ繝・け迥ｶ諷九・蛻・ｊ譖ｿ縺医′蜿ｯ閭ｽ'
          });
        } else {
          testResults.push({
            category: '繝√ぉ繝・け繝懊ャ繧ｯ繧ｹ',
            element: checkboxId,
            selector: `#${checkboxId}`,
            status: 'non-functional',
            details: '繝√ぉ繝・け迥ｶ諷九′螟牙喧縺励↑縺・
          });
        }
      } catch (error) {
        testResults.push({
          category: '繝√ぉ繝・け繝懊ャ繧ｯ繧ｹ',
          element: checkboxId,
          selector: `#${checkboxId}`,
          status: 'non-functional',
          details: error.message
        });
      }
    }
  });

  test('繝ｪ繝ｳ繧ｯ隕∫ｴ縺ｮ讖溯・遒ｺ隱・, async ({ page }) => {
    await page.goto('/dashboard');
    
    const links = await page.locator('a[href]:visible').all();
    const checkedLinks = new Set<string>();
    
    for (let i = 0; i < Math.min(links.length, 10); i++) {
      const link = links[i];
      const href = await link.getAttribute('href');
      const linkText = await link.textContent() || `繝ｪ繝ｳ繧ｯ${i + 1}`;
      
      if (href && !checkedLinks.has(href)) {
        checkedLinks.add(href);
        
        try {
          if (href.startsWith('http')) {
            testResults.push({
              category: '繝ｪ繝ｳ繧ｯ',
              element: linkText.trim(),
              selector: `a[href="${href}"]`,
              status: 'functional',
              details: '螟夜Κ繝ｪ繝ｳ繧ｯ・医け繝ｪ繝・け繝・せ繝医・繧ｹ繧ｭ繝・・・・
            });
          } else {
            const originalUrl = page.url();
            await link.click();
            await page.waitForLoadState('networkidle');
            const newUrl = page.url();
            
            if (newUrl !== originalUrl) {
              testResults.push({
                category: '繝ｪ繝ｳ繧ｯ',
                element: linkText.trim(),
                selector: `a[href="${href}"]`,
                status: 'functional',
                details: `${href}縺ｸ驕ｷ遘ｻ謌仙粥`
              });
              await page.goto('/dashboard');
            } else {
              testResults.push({
                category: '繝ｪ繝ｳ繧ｯ',
                element: linkText.trim(),
                selector: `a[href="${href}"]`,
                status: 'non-functional',
                details: '繧ｯ繝ｪ繝・け縺励※繧る・遘ｻ縺励↑縺・
              });
            }
          }
        } catch (error) {
          testResults.push({
            category: '繝ｪ繝ｳ繧ｯ',
            element: linkText.trim(),
            selector: `a[href="${href}"]`,
            status: 'non-functional',
            details: error.message
          });
        }
      }
    }
  });

  test('繝｢繝ｼ繝繝ｫ縺ｮ讖溯・遒ｺ隱・, async ({ page }) => {
    await page.goto('/inventory');
    
    const modalTriggers = [
      { trigger: 'button:has-text("譁ｰ隕丞膚蜩∬ｿｽ蜉")', modalSelector: '[role="dialog"]' },
      { trigger: 'button:has-text("繧､繝ｳ繝昴・繝・)', modalSelector: '.modal' },
      { trigger: 'button:has-text("繧ｨ繧ｯ繧ｹ繝昴・繝・)', modalSelector: '[aria-modal="true"]' }
    ];

    for (const { trigger, modalSelector } of modalTriggers) {
      try {
        const triggerButton = await page.locator(trigger).first();
        if (await triggerButton.isVisible()) {
          await triggerButton.click();
          await page.waitForTimeout(1000);
          
          const modal = await page.locator(modalSelector).first();
          if (await modal.isVisible()) {
            testResults.push({
              category: '繝｢繝ｼ繝繝ｫ',
              element: trigger,
              selector: trigger,
              status: 'functional',
              details: '繝｢繝ｼ繝繝ｫ縺梧ｭ｣蟶ｸ縺ｫ陦ｨ遉ｺ縺輔ｌ繧・
            });
            
            // 繝｢繝ｼ繝繝ｫ繧帝哩縺倥ｋ
            const closeButton = await modal.locator('button:has-text("髢峨§繧・), button:has-text("繧ｭ繝｣繝ｳ繧ｻ繝ｫ"), button[aria-label="Close"]').first();
            if (await closeButton.isVisible()) {
              await closeButton.click();
            } else {
              await page.keyboard.press('Escape');
            }
            await page.waitForTimeout(500);
          } else {
            testResults.push({
              category: '繝｢繝ｼ繝繝ｫ',
              element: trigger,
              selector: trigger,
              status: 'non-functional',
              details: '繝｢繝ｼ繝繝ｫ縺瑚｡ｨ遉ｺ縺輔ｌ縺ｪ縺・
            });
          }
        } else {
          testResults.push({
            category: '繝｢繝ｼ繝繝ｫ',
            element: trigger,
            selector: trigger,
            status: 'not-found'
          });
        }
      } catch (error) {
        testResults.push({
          category: '繝｢繝ｼ繝繝ｫ',
          element: trigger,
          selector: trigger,
          status: 'non-functional',
          details: error.message
        });
      }
    }
  });
});
import { test, expect } from '@playwright/test';

test.describe('剥 UI繝｢繝ｼ繝繝ｫ讖溯・蜍穂ｽ懈､懆ｨｼ', () => {
  
  test.beforeEach(async ({ page }) => {
    await page.goto('/login');
    await page.waitForTimeout(2000);
    await page.fill('input[name="username"]', 'seller');
    await page.fill('input[name="password"]', 'password');
    await page.click('button[type="submit"]');
    await page.waitForTimeout(3000);
  });

  test('識 繝繝・す繝･繝懊・繝画悄髢馴∈謚槭Δ繝ｼ繝繝ｫ讀懆ｨｼ', async ({ page }) => {
    console.log('=== 繝繝・す繝･繝懊・繝画悄髢馴∈謚槭Δ繝ｼ繝繝ｫ讀懆ｨｼ髢句ｧ・===');
    
    await page.goto('/dashboard');
    await page.waitForTimeout(3000);
    
    // 譛滄俣驕ｸ謚槭・繧ｿ繝ｳ繧呈爾縺・
    const periodButton = page.locator('button:has-text("譛滄俣驕ｸ謚・), button:has-text("繝ｬ繝昴・繝域悄髢・)').first();
    
    const buttonExists = await periodButton.isVisible();
    console.log(`譛滄俣驕ｸ謚槭・繧ｿ繝ｳ蟄伜惠: ${buttonExists ? '笨・ : '笶・}`);
    
    if (buttonExists) {
      await periodButton.click();
      await page.waitForTimeout(2000);
      
      // 繝｢繝ｼ繝繝ｫ縺碁幕縺・◆縺九メ繧ｧ繝・け
      const modal = page.locator('[role="dialog"]');
      const modalOpen = await modal.isVisible();
      console.log(`繝｢繝ｼ繝繝ｫ髢矩哩: ${modalOpen ? '笨・蜍穂ｽ・ : '笶・譛ｪ蜍穂ｽ・}`);
      
      if (modalOpen) {
        // DateRangePicker縺ｮ蟄伜惠遒ｺ隱・
        const dateRangePicker = page.locator('.rdrCalendarWrapper');
        const pickerExists = await dateRangePicker.isVisible();
        console.log(`DateRangePicker陦ｨ遉ｺ: ${pickerExists ? '笨・蜍穂ｽ・ : '笶・譛ｪ蜍穂ｽ・}`);
        
        // 驕ｩ逕ｨ繝懊ち繝ｳ縺ｮ蟄伜惠遒ｺ隱・
        const applyButton = page.locator('button:has-text("驕ｩ逕ｨ")');
        const applyExists = await applyButton.isVisible();
        console.log(`驕ｩ逕ｨ繝懊ち繝ｳ蟄伜惠: ${applyExists ? '笨・蜍穂ｽ・ : '笶・譛ｪ蜍穂ｽ・}`);
        
        if (applyExists) {
          await applyButton.click();
          await page.waitForTimeout(1000);
          
          // 繝｢繝ｼ繝繝ｫ縺碁哩縺倥◆縺九メ繧ｧ繝・け
          const modalClosed = !(await modal.isVisible());
          console.log(`繝｢繝ｼ繝繝ｫ髢峨§繧・ ${modalClosed ? '笨・蜍穂ｽ・ : '笶・譛ｪ蜍穂ｽ・}`);
          
          if (modalClosed) {
            console.log('脂 繝繝・す繝･繝懊・繝画悄髢馴∈謚槭Δ繝ｼ繝繝ｫ: 螳悟・螳溯｣・ｸ医∩');
          } else {
            console.log('笶・繝繝・す繝･繝懊・繝画悄髢馴∈謚槭Δ繝ｼ繝繝ｫ: 驛ｨ蛻・悴螳溯｣・);
          }
        } else {
          console.log('笶・繝繝・す繝･繝懊・繝画悄髢馴∈謚槭Δ繝ｼ繝繝ｫ: 驛ｨ蛻・悴螳溯｣・);
        }
      } else {
        console.log('笶・繝繝・す繝･繝懊・繝画悄髢馴∈謚槭Δ繝ｼ繝繝ｫ: 譛ｪ螳溯｣・);
      }
    } else {
      console.log('笶・繝繝・す繝･繝懊・繝画悄髢馴∈謚槭・繧ｿ繝ｳ: 譛ｪ螳溯｣・);
    }
  });

  test('逃 蝨ｨ蠎ｫ邂｡逅・膚蜩∫匳骭ｲ繝｢繝ｼ繝繝ｫ讀懆ｨｼ', async ({ page }) => {
    console.log('=== 蝨ｨ蠎ｫ邂｡逅・膚蜩∫匳骭ｲ繝｢繝ｼ繝繝ｫ讀懆ｨｼ髢句ｧ・===');
    
    await page.goto('/inventory');
    await page.waitForTimeout(3000);
    
    // 譁ｰ隕丞膚蜩∫匳骭ｲ繝懊ち繝ｳ繧呈爾縺・
    const addButton = page.locator('button:has-text("譁ｰ隕丞膚蜩∫匳骭ｲ"), button:has-text("譁ｰ隕・)').first();
    
    const buttonExists = await addButton.isVisible();
    console.log(`譁ｰ隕丞膚蜩∫匳骭ｲ繝懊ち繝ｳ蟄伜惠: ${buttonExists ? '笨・ : '笶・}`);
    
    if (buttonExists) {
      await addButton.click();
      await page.waitForTimeout(2000);
      
      // 繝｢繝ｼ繝繝ｫ縺碁幕縺・◆縺九メ繧ｧ繝・け
      const modal = page.locator('[role="dialog"]');
      const modalOpen = await modal.isVisible();
      console.log(`蝠・刀逋ｻ骭ｲ繝｢繝ｼ繝繝ｫ髢矩哩: ${modalOpen ? '笨・蜍穂ｽ・ : '笶・譛ｪ蜍穂ｽ・}`);
      
      if (modalOpen) {
        // 繝輔か繝ｼ繝隕∫ｴ縺ｮ蟄伜惠遒ｺ隱・
        const nameInput = page.locator('input[name="name"]');
        const nameExists = await nameInput.isVisible();
        console.log(`蝠・刀蜷榊・蜉帙ヵ繧｣繝ｼ繝ｫ繝・ ${nameExists ? '笨・蜍穂ｽ・ : '笶・譛ｪ蜍穂ｽ・}`);
        
        const skuInput = page.locator('input[name="sku"]');
        const skuExists = await skuInput.isVisible();
        console.log(`SKU蜈･蜉帙ヵ繧｣繝ｼ繝ｫ繝・ ${skuExists ? '笨・蜍穂ｽ・ : '笶・譛ｪ蜍穂ｽ・}`);
        
        if (nameExists && skuExists) {
          // 螳滄圀縺ｫ蜈･蜉帙ユ繧ｹ繝・
          await nameInput.fill('繝・せ繝亥膚蜩・);
          await skuInput.fill('TEST-001');
          
          const nameValue = await nameInput.inputValue();
          const skuValue = await skuInput.inputValue();
          
          console.log(`蜈･蜉帶ｩ溯・繝・せ繝・ ${nameValue === '繝・せ繝亥膚蜩・ && skuValue === 'TEST-001' ? '笨・蜍穂ｽ・ : '笶・譛ｪ蜍穂ｽ・}`);
          
          // 騾∽ｿ｡繝懊ち繝ｳ縺ｮ蟄伜惠遒ｺ隱・
          const submitButton = page.locator('button:has-text("逋ｻ骭ｲ"), button:has-text("菫晏ｭ・)').first();
          const submitExists = await submitButton.isVisible();
          console.log(`騾∽ｿ｡繝懊ち繝ｳ蟄伜惠: ${submitExists ? '笨・蜍穂ｽ・ : '笶・譛ｪ蜍穂ｽ・}`);
          
          if (submitExists) {
            console.log('脂 蝨ｨ蠎ｫ邂｡逅・膚蜩∫匳骭ｲ繝｢繝ｼ繝繝ｫ: 螳悟・螳溯｣・ｸ医∩');
          } else {
            console.log('笶・蝨ｨ蠎ｫ邂｡逅・膚蜩∫匳骭ｲ繝｢繝ｼ繝繝ｫ: 驛ｨ蛻・悴螳溯｣・);
          }
        } else {
          console.log('笶・蝨ｨ蠎ｫ邂｡逅・膚蜩∫匳骭ｲ繝｢繝ｼ繝繝ｫ: 驛ｨ蛻・悴螳溯｣・);
        }
        
        // 繝｢繝ｼ繝繝ｫ繧帝哩縺倥ｋ
        const closeButton = page.locator('button:has-text("ﾃ・), button:has-text("繧ｭ繝｣繝ｳ繧ｻ繝ｫ")').first();
        if (await closeButton.isVisible()) {
          await closeButton.click();
          await page.waitForTimeout(1000);
        }
      } else {
        console.log('笶・蝨ｨ蠎ｫ邂｡逅・膚蜩∫匳骭ｲ繝｢繝ｼ繝繝ｫ: 譛ｪ螳溯｣・);
      }
    } else {
      console.log('笶・蝨ｨ蠎ｫ邂｡逅・膚蜩∫匳骭ｲ繝懊ち繝ｳ: 譛ｪ螳溯｣・);
    }
  });

  test('腸 螢ｲ荳顔ｮ｡逅・・蜩∬ｨｭ螳壹Δ繝ｼ繝繝ｫ讀懆ｨｼ', async ({ page }) => {
    console.log('=== 螢ｲ荳顔ｮ｡逅・・蜩∬ｨｭ螳壹Δ繝ｼ繝繝ｫ讀懆ｨｼ髢句ｧ・===');
    
    await page.goto('/sales');
    await page.waitForTimeout(3000);
    
    // 蜃ｺ蜩∬ｨｭ螳壹・繧ｿ繝ｳ繧呈爾縺・
    const settingsButton = page.locator('button:has-text("蜃ｺ蜩∬ｨｭ螳・)').first();
    
    const buttonExists = await settingsButton.isVisible();
    console.log(`蜃ｺ蜩∬ｨｭ螳壹・繧ｿ繝ｳ蟄伜惠: ${buttonExists ? '笨・ : '笶・}`);
    
    if (buttonExists) {
      await settingsButton.click();
      await page.waitForTimeout(2000);
      
      // 繝｢繝ｼ繝繝ｫ縺碁幕縺・◆縺九メ繧ｧ繝・け
      const modal = page.locator('[role="dialog"]');
      const modalOpen = await modal.isVisible();
      console.log(`蜃ｺ蜩∬ｨｭ螳壹Δ繝ｼ繝繝ｫ髢矩哩: ${modalOpen ? '笨・蜍穂ｽ・ : '笶・譛ｪ蜍穂ｽ・}`);
      
      if (modalOpen) {
        // 險ｭ螳夐・岼縺ｮ蟄伜惠遒ｺ隱・
        const profitInput = page.locator('input[type="number"]');
        const profitExists = await profitInput.isVisible();
        console.log(`蛻ｩ逶顔紫蜈･蜉帙ヵ繧｣繝ｼ繝ｫ繝・ ${profitExists ? '笨・蜍穂ｽ・ : '笶・譛ｪ蜍穂ｽ・}`);
        
        const checkbox = page.locator('input[type="checkbox"]');
        const checkboxExists = await checkbox.isVisible();
        console.log(`繝√ぉ繝・け繝懊ャ繧ｯ繧ｹ: ${checkboxExists ? '笨・蜍穂ｽ・ : '笶・譛ｪ蜍穂ｽ・}`);
        
        if (profitExists && checkboxExists) {
          // 螳滄圀縺ｫ謫堺ｽ懊ユ繧ｹ繝・
          await profitInput.fill('25');
          await checkbox.check();
          
          const profitValue = await profitInput.inputValue();
          const isChecked = await checkbox.isChecked();
          
          console.log(`險ｭ螳壽桃菴懊ユ繧ｹ繝・ ${profitValue === '25' && isChecked ? '笨・蜍穂ｽ・ : '笶・譛ｪ蜍穂ｽ・}`);
          
          // 菫晏ｭ倥・繧ｿ繝ｳ縺ｮ蟄伜惠遒ｺ隱・
          const saveButton = page.locator('button:has-text("菫晏ｭ・)').first();
          const saveExists = await saveButton.isVisible();
          console.log(`菫晏ｭ倥・繧ｿ繝ｳ蟄伜惠: ${saveExists ? '笨・蜍穂ｽ・ : '笶・譛ｪ蜍穂ｽ・}`);
          
          if (saveExists) {
            console.log('脂 螢ｲ荳顔ｮ｡逅・・蜩∬ｨｭ螳壹Δ繝ｼ繝繝ｫ: 螳悟・螳溯｣・ｸ医∩');
          } else {
            console.log('笶・螢ｲ荳顔ｮ｡逅・・蜩∬ｨｭ螳壹Δ繝ｼ繝繝ｫ: 驛ｨ蛻・悴螳溯｣・);
          }
        } else {
          console.log('笶・螢ｲ荳顔ｮ｡逅・・蜩∬ｨｭ螳壹Δ繝ｼ繝繝ｫ: 驛ｨ蛻・悴螳溯｣・);
        }
        
        // 繝｢繝ｼ繝繝ｫ繧帝哩縺倥ｋ
        const closeButton = page.locator('button:has-text("ﾃ・), button:has-text("繧ｭ繝｣繝ｳ繧ｻ繝ｫ")').first();
        if (await closeButton.isVisible()) {
          await closeButton.click();
          await page.waitForTimeout(1000);
        }
      } else {
        console.log('笶・螢ｲ荳顔ｮ｡逅・・蜩∬ｨｭ螳壹Δ繝ｼ繝繝ｫ: 譛ｪ螳溯｣・);
      }
    } else {
      console.log('笶・螢ｲ荳顔ｮ｡逅・・蜩∬ｨｭ螳壹・繧ｿ繝ｳ: 譛ｪ螳溯｣・);
    }
  });

  test('売 霑泌刀邂｡逅・ｿ泌刀逕ｳ隲九Δ繝ｼ繝繝ｫ讀懆ｨｼ', async ({ page }) => {
    console.log('=== 霑泌刀邂｡逅・ｿ泌刀逕ｳ隲九Δ繝ｼ繝繝ｫ讀懆ｨｼ髢句ｧ・===');
    
    await page.goto('/returns');
    await page.waitForTimeout(3000);
    
    // 霑泌刀逕ｳ隲九・繧ｿ繝ｳ繧呈爾縺・
    const returnButton = page.locator('button:has-text("霑泌刀逕ｳ隲・)').first();
    
    const buttonExists = await returnButton.isVisible();
    console.log(`霑泌刀逕ｳ隲九・繧ｿ繝ｳ蟄伜惠: ${buttonExists ? '笨・ : '笶・}`);
    
    if (buttonExists) {
      await returnButton.click();
      await page.waitForTimeout(2000);
      
      // 繝｢繝ｼ繝繝ｫ縺碁幕縺・◆縺九メ繧ｧ繝・け
      const modal = page.locator('[role="dialog"]');
      const modalOpen = await modal.isVisible();
      console.log(`霑泌刀逕ｳ隲九Δ繝ｼ繝繝ｫ髢矩哩: ${modalOpen ? '笨・蜍穂ｽ・ : '笶・譛ｪ蜍穂ｽ・}`);
      
      if (modalOpen) {
        // 繝輔か繝ｼ繝隕∫ｴ縺ｮ蟄伜惠遒ｺ隱・
        const orderIdInput = page.locator('input[name="orderId"]');
        const orderIdExists = await orderIdInput.isVisible();
        console.log(`豕ｨ譁・分蜿ｷ蜈･蜉帙ヵ繧｣繝ｼ繝ｫ繝・ ${orderIdExists ? '笨・蜍穂ｽ・ : '笶・譛ｪ蜍穂ｽ・}`);
        
        const productNameInput = page.locator('input[name="productName"]');
        const productNameExists = await productNameInput.isVisible();
        console.log(`蝠・刀蜷榊・蜉帙ヵ繧｣繝ｼ繝ｫ繝・ ${productNameExists ? '笨・蜍穂ｽ・ : '笶・譛ｪ蜍穂ｽ・}`);
        
        const reasonRadio = page.locator('input[type="radio"]');
        const reasonExists = await reasonRadio.first().isVisible();
        console.log(`霑泌刀逅・罰驕ｸ謚・ ${reasonExists ? '笨・蜍穂ｽ・ : '笶・譛ｪ蜍穂ｽ・}`);
        
        if (orderIdExists && productNameExists && reasonExists) {
          // 螳滄圀縺ｫ蜈･蜉帙ユ繧ｹ繝・
          await orderIdInput.fill('ORD-000123');
          await productNameInput.fill('繝・せ繝亥膚蜩・);
          await reasonRadio.first().check();
          
          const orderValue = await orderIdInput.inputValue();
          const productValue = await productNameInput.inputValue();
          const isChecked = await reasonRadio.first().isChecked();
          
          console.log(`蜈･蜉帶ｩ溯・繝・せ繝・ ${orderValue === 'ORD-000123' && productValue === '繝・せ繝亥膚蜩・ && isChecked ? '笨・蜍穂ｽ・ : '笶・譛ｪ蜍穂ｽ・}`);
          
          // 騾∽ｿ｡繝懊ち繝ｳ縺ｮ蟄伜惠遒ｺ隱・
          const submitButton = page.locator('button:has-text("謠仙・"), button:has-text("逕ｳ隲・)').first();
          const submitExists = await submitButton.isVisible();
          console.log(`騾∽ｿ｡繝懊ち繝ｳ蟄伜惠: ${submitExists ? '笨・蜍穂ｽ・ : '笶・譛ｪ蜍穂ｽ・}`);
          
          if (submitExists) {
            console.log('脂 霑泌刀邂｡逅・ｿ泌刀逕ｳ隲九Δ繝ｼ繝繝ｫ: 螳悟・螳溯｣・ｸ医∩');
          } else {
            console.log('笶・霑泌刀邂｡逅・ｿ泌刀逕ｳ隲九Δ繝ｼ繝繝ｫ: 驛ｨ蛻・悴螳溯｣・);
          }
        } else {
          console.log('笶・霑泌刀邂｡逅・ｿ泌刀逕ｳ隲九Δ繝ｼ繝繝ｫ: 驛ｨ蛻・悴螳溯｣・);
        }
        
        // 繝｢繝ｼ繝繝ｫ繧帝哩縺倥ｋ
        const closeButton = page.locator('button:has-text("ﾃ・), button:has-text("繧ｭ繝｣繝ｳ繧ｻ繝ｫ")').first();
        if (await closeButton.isVisible()) {
          await closeButton.click();
          await page.waitForTimeout(1000);
        }
      } else {
        console.log('笶・霑泌刀邂｡逅・ｿ泌刀逕ｳ隲九Δ繝ｼ繝繝ｫ: 譛ｪ螳溯｣・);
      }
    } else {
      console.log('笶・霑泌刀邂｡逅・ｿ泌刀逕ｳ隲九・繧ｿ繝ｳ: 譛ｪ螳溯｣・);
    }
  });

  test('囹 邏榊刀繝励Λ繝ｳ繧ｦ繧｣繧ｶ繝ｼ繝画､懆ｨｼ', async ({ page }) => {
    console.log('=== 邏榊刀繝励Λ繝ｳ繧ｦ繧｣繧ｶ繝ｼ繝画､懆ｨｼ髢句ｧ・===');
    
    await page.goto('/delivery-plan');
    await page.waitForTimeout(3000);
    
    // 譁ｰ隕上・繝ｩ繝ｳ菴懈・繝懊ち繝ｳ繧呈爾縺・
    const createButton = page.locator('button:has-text("譁ｰ隕・), button:has-text("菴懈・")').first();
    
    const buttonExists = await createButton.isVisible();
    console.log(`譁ｰ隕上・繝ｩ繝ｳ菴懈・繝懊ち繝ｳ蟄伜惠: ${buttonExists ? '笨・ : '笶・}`);
    
    if (buttonExists) {
      await createButton.click();
      await page.waitForTimeout(2000);
      
      // 繧ｦ繧｣繧ｶ繝ｼ繝峨∪縺溘・繝｢繝ｼ繝繝ｫ縺碁幕縺・◆縺九メ繧ｧ繝・け
      const modal = page.locator('[role="dialog"]');
      const wizard = page.locator('.wizard, .step');
      
      const modalOpen = await modal.isVisible();
      const wizardOpen = await wizard.isVisible();
      
      console.log(`繧ｦ繧｣繧ｶ繝ｼ繝・繝｢繝ｼ繝繝ｫ髢矩哩: ${modalOpen || wizardOpen ? '笨・蜍穂ｽ・ : '笶・譛ｪ蜍穂ｽ・}`);
      
      if (modalOpen || wizardOpen) {
        // 蜈･蜉帙ヵ繧｣繝ｼ繝ｫ繝峨・蟄伜惠遒ｺ隱・
        const inputs = await page.locator('input').all();
        const inputCount = inputs.length;
        console.log(`蜈･蜉帙ヵ繧｣繝ｼ繝ｫ繝画焚: ${inputCount}蛟義);
        
        if (inputCount > 0) {
          // 譛蛻昴・蜈･蜉帙ヵ繧｣繝ｼ繝ｫ繝峨〒蜍穂ｽ懊ユ繧ｹ繝・
          const firstInput = inputs[0];
          if (await firstInput.isVisible()) {
            await firstInput.fill('繝・せ繝亥・蜉・);
            const inputValue = await firstInput.inputValue();
            console.log(`蜈･蜉帶ｩ溯・繝・せ繝・ ${inputValue === '繝・せ繝亥・蜉・ ? '笨・蜍穂ｽ・ : '笶・譛ｪ蜍穂ｽ・}`);
          }
          
          // 谺｡縺ｸ繝懊ち繝ｳ縺ｮ蟄伜惠遒ｺ隱・
          const nextButton = page.locator('button:has-text("谺｡縺ｸ"), button:has-text("邯夊｡・)').first();
          const nextExists = await nextButton.isVisible();
          console.log(`谺｡縺ｸ繝懊ち繝ｳ蟄伜惠: ${nextExists ? '笨・蜍穂ｽ・ : '笶・譛ｪ蜍穂ｽ・}`);
          
          if (nextExists && inputCount > 0) {
            console.log('脂 邏榊刀繝励Λ繝ｳ繧ｦ繧｣繧ｶ繝ｼ繝・ 螳悟・螳溯｣・ｸ医∩');
          } else {
            console.log('笶・邏榊刀繝励Λ繝ｳ繧ｦ繧｣繧ｶ繝ｼ繝・ 驛ｨ蛻・悴螳溯｣・);
          }
        } else {
          console.log('笶・邏榊刀繝励Λ繝ｳ繧ｦ繧｣繧ｶ繝ｼ繝・ 驛ｨ蛻・悴螳溯｣・);
        }
      } else {
        console.log('笶・邏榊刀繝励Λ繝ｳ繧ｦ繧｣繧ｶ繝ｼ繝・ 譛ｪ螳溯｣・);
      }
    } else {
      console.log('笶・邏榊刀繝励Λ繝ｳ菴懈・繝懊ち繝ｳ: 譛ｪ螳溯｣・);
    }
  });
}); 
import { test, expect } from '@playwright/test';

test.describe('剥 UI謫堺ｽ懷ｮ溷虚菴懃｢ｺ隱阪ユ繧ｹ繝・, () => {
  
  test.beforeEach(async ({ page }) => {
    // 繝ｭ繧ｰ繧､繝ｳ蜃ｦ逅・
    await page.goto('http://localhost:3002/login');
    await page.waitForLoadState('networkidle');
    await page.fill('input[name="username"]', 'seller');
    await page.fill('input[name="password"]', 'password');
    await page.click('button[type="submit"]');
    await page.waitForURL('**/dashboard');
    await page.waitForLoadState('networkidle');
  });

  test('識 繝繝・す繝･繝懊・繝画悄髢馴∈謚槭Δ繝ｼ繝繝ｫ - UI謫堺ｽ懃｢ｺ隱・, async ({ page }) => {
    console.log('=== 繝繝・す繝･繝懊・繝画悄髢馴∈謚槭Δ繝ｼ繝繝ｫ UI謫堺ｽ懊ユ繧ｹ繝・===');
    
    // 繝繝・す繝･繝懊・繝峨・繝ｼ繧ｸ縺ｫ遘ｻ蜍・
    await page.goto('http://localhost:3002/dashboard');
    await page.waitForLoadState('networkidle');
    
    // 繝ｬ繝昴・繝域悄髢薙ｒ驕ｸ謚槭・繧ｿ繝ｳ繧呈爾縺励※繧ｯ繝ｪ繝・け
    const periodButton = page.locator('button:has-text("繝ｬ繝昴・繝域悄髢薙ｒ驕ｸ謚・)');
    await expect(periodButton).toBeVisible({ timeout: 10000 });
    console.log('笨・繝ｬ繝昴・繝域悄髢薙ｒ驕ｸ謚槭・繧ｿ繝ｳ: 陦ｨ遉ｺ遒ｺ隱・);
    
    await periodButton.click();
    await page.waitForTimeout(1000);
    
    // 繝｢繝ｼ繝繝ｫ縺碁幕縺・◆縺九メ繧ｧ繝・け
    const modal = page.locator('[role="dialog"]');
    await expect(modal).toBeVisible({ timeout: 5000 });
    console.log('笨・譛滄俣驕ｸ謚槭Δ繝ｼ繝繝ｫ: 髢矩哩蜍穂ｽ懃｢ｺ隱・);
    
    // DateRangePicker縺ｮ蟄伜惠遒ｺ隱・
    const dateRangePicker = page.locator('.rdrCalendarWrapper');
    await expect(dateRangePicker).toBeVisible({ timeout: 3000 });
    console.log('笨・DateRangePicker: 陦ｨ遉ｺ遒ｺ隱・);
    
    // 驕ｩ逕ｨ繝懊ち繝ｳ縺ｮ蟄伜惠遒ｺ隱阪→繧ｯ繝ｪ繝・け
    const applyButton = page.locator('button:has-text("驕ｩ逕ｨ")');
    await expect(applyButton).toBeVisible({ timeout: 3000 });
    console.log('笨・驕ｩ逕ｨ繝懊ち繝ｳ: 陦ｨ遉ｺ遒ｺ隱・);
    
    await applyButton.click();
    await page.waitForTimeout(1000);
    
    // 繝｢繝ｼ繝繝ｫ縺碁哩縺倥◆縺九メ繧ｧ繝・け
    await expect(modal).not.toBeVisible({ timeout: 3000 });
    console.log('笨・繝｢繝ｼ繝繝ｫ髢峨§繧・ 蜍穂ｽ懃｢ｺ隱・);
    
    console.log('脂 繝繝・す繝･繝懊・繝画悄髢馴∈謚槭Δ繝ｼ繝繝ｫ: UI謫堺ｽ懊〒螳悟・蜍穂ｽ懃｢ｺ隱肴ｸ医∩');
  });

  test('逃 蝨ｨ蠎ｫ邂｡逅・膚蜩∫匳骭ｲ繝｢繝ｼ繝繝ｫ - UI謫堺ｽ懃｢ｺ隱・, async ({ page }) => {
    console.log('=== 蝨ｨ蠎ｫ邂｡逅・膚蜩∫匳骭ｲ繝｢繝ｼ繝繝ｫ UI謫堺ｽ懊ユ繧ｹ繝・===');
    
    // 蝨ｨ蠎ｫ邂｡逅・・繝ｼ繧ｸ縺ｫ遘ｻ蜍・
    await page.goto('http://localhost:3002/inventory');
    await page.waitForLoadState('networkidle');
    
    // 譁ｰ隕丞膚蜩∫匳骭ｲ繝懊ち繝ｳ繧呈爾縺励※繧ｯ繝ｪ繝・け
    const addButton = page.locator('button:has-text("譁ｰ隕丞膚蜩∫匳骭ｲ")');
    await expect(addButton).toBeVisible({ timeout: 10000 });
    console.log('笨・譁ｰ隕丞膚蜩∫匳骭ｲ繝懊ち繝ｳ: 陦ｨ遉ｺ遒ｺ隱・);
    
    await addButton.click();
    await page.waitForTimeout(1000);
    
    // 繝｢繝ｼ繝繝ｫ縺碁幕縺・◆縺九メ繧ｧ繝・け
    const modal = page.locator('[role="dialog"]');
    await expect(modal).toBeVisible({ timeout: 5000 });
    console.log('笨・蝠・刀逋ｻ骭ｲ繝｢繝ｼ繝繝ｫ: 髢矩哩蜍穂ｽ懃｢ｺ隱・);
    
    // 繝輔か繝ｼ繝隕∫ｴ縺ｮ蟄伜惠遒ｺ隱阪→蜈･蜉帙ユ繧ｹ繝・
    const nameInput = page.locator('input[name="name"]');
    await expect(nameInput).toBeVisible({ timeout: 3000 });
    await nameInput.fill('繝・せ繝亥膚蜩・);
    console.log('笨・蝠・刀蜷榊・蜉帙ヵ繧｣繝ｼ繝ｫ繝・ 陦ｨ遉ｺ繝ｻ蜈･蜉帷｢ｺ隱・);
    
    const skuInput = page.locator('input[name="sku"]');
    await expect(skuInput).toBeVisible({ timeout: 3000 });
    await skuInput.fill('TEST-001');
    console.log('笨・SKU蜈･蜉帙ヵ繧｣繝ｼ繝ｫ繝・ 陦ｨ遉ｺ繝ｻ蜈･蜉帷｢ｺ隱・);
    
    // 蜈･蜉帛､縺ｮ遒ｺ隱・
    await expect(nameInput).toHaveValue('繝・せ繝亥膚蜩・);
    await expect(skuInput).toHaveValue('TEST-001');
    console.log('笨・蜈･蜉帶ｩ溯・: 蜍穂ｽ懃｢ｺ隱・);
    
    // 逋ｻ骭ｲ繝懊ち繝ｳ縺ｮ蟄伜惠遒ｺ隱・
    const submitButton = page.locator('button:has-text("逋ｻ骭ｲ")');
    await expect(submitButton).toBeVisible({ timeout: 3000 });
    console.log('笨・逋ｻ骭ｲ繝懊ち繝ｳ: 陦ｨ遉ｺ遒ｺ隱・);
    
    // 繧ｭ繝｣繝ｳ繧ｻ繝ｫ繝懊ち繝ｳ縺ｧ繝｢繝ｼ繝繝ｫ繧帝哩縺倥ｋ
    const cancelButton = page.locator('button:has-text("繧ｭ繝｣繝ｳ繧ｻ繝ｫ")');
    await cancelButton.click();
    await page.waitForTimeout(1000);
    
    await expect(modal).not.toBeVisible({ timeout: 3000 });
    console.log('笨・繝｢繝ｼ繝繝ｫ髢峨§繧・ 蜍穂ｽ懃｢ｺ隱・);
    
    console.log('脂 蝨ｨ蠎ｫ邂｡逅・膚蜩∫匳骭ｲ繝｢繝ｼ繝繝ｫ: UI謫堺ｽ懊〒螳悟・蜍穂ｽ懃｢ｺ隱肴ｸ医∩');
  });

  test('腸 螢ｲ荳顔ｮ｡逅・・蜩∬ｨｭ螳壹Δ繝ｼ繝繝ｫ - UI謫堺ｽ懃｢ｺ隱・, async ({ page }) => {
    console.log('=== 螢ｲ荳顔ｮ｡逅・・蜩∬ｨｭ螳壹Δ繝ｼ繝繝ｫ UI謫堺ｽ懊ユ繧ｹ繝・===');
    
    // 螢ｲ荳顔ｮ｡逅・・繝ｼ繧ｸ縺ｫ遘ｻ蜍・
    await page.goto('http://localhost:3002/sales');
    await page.waitForLoadState('networkidle');
    
    // 蜃ｺ蜩∬ｨｭ螳壹・繧ｿ繝ｳ繧呈爾縺励※繧ｯ繝ｪ繝・け
    const settingsButton = page.locator('button:has-text("蜃ｺ蜩∬ｨｭ螳・)');
    await expect(settingsButton).toBeVisible({ timeout: 10000 });
    console.log('笨・蜃ｺ蜩∬ｨｭ螳壹・繧ｿ繝ｳ: 陦ｨ遉ｺ遒ｺ隱・);
    
    await settingsButton.click();
    await page.waitForTimeout(1000);
    
    // 繝｢繝ｼ繝繝ｫ縺碁幕縺・◆縺九メ繧ｧ繝・け
    const modal = page.locator('[role="dialog"]');
    await expect(modal).toBeVisible({ timeout: 5000 });
    console.log('笨・蜃ｺ蜩∬ｨｭ螳壹Δ繝ｼ繝繝ｫ: 髢矩哩蜍穂ｽ懃｢ｺ隱・);
    
    // 險ｭ螳夐・岼縺ｮ蟄伜惠遒ｺ隱阪→謫堺ｽ懊ユ繧ｹ繝・
    const profitInput = page.locator('input[type="number"]');
    await expect(profitInput).toBeVisible({ timeout: 3000 });
    await profitInput.fill('25');
    console.log('笨・蛻ｩ逶顔紫蜈･蜉帙ヵ繧｣繝ｼ繝ｫ繝・ 陦ｨ遉ｺ繝ｻ蜈･蜉帷｢ｺ隱・);
    
    const checkbox = page.locator('input[type="checkbox"]');
    await expect(checkbox).toBeVisible({ timeout: 3000 });
    await checkbox.check();
    console.log('笨・繝√ぉ繝・け繝懊ャ繧ｯ繧ｹ: 陦ｨ遉ｺ繝ｻ謫堺ｽ懃｢ｺ隱・);
    
    // 蜈･蜉帛､縺ｮ遒ｺ隱・
    await expect(profitInput).toHaveValue('25');
    await expect(checkbox).toBeChecked();
    console.log('笨・險ｭ螳壽桃菴・ 蜍穂ｽ懃｢ｺ隱・);
    
    // 菫晏ｭ倥・繧ｿ繝ｳ縺ｮ蟄伜惠遒ｺ隱・
    const saveButton = page.locator('button:has-text("菫晏ｭ・)');
    await expect(saveButton).toBeVisible({ timeout: 3000 });
    console.log('笨・菫晏ｭ倥・繧ｿ繝ｳ: 陦ｨ遉ｺ遒ｺ隱・);
    
    // 繧ｭ繝｣繝ｳ繧ｻ繝ｫ繝懊ち繝ｳ縺ｧ繝｢繝ｼ繝繝ｫ繧帝哩縺倥ｋ
    const cancelButton = page.locator('button:has-text("繧ｭ繝｣繝ｳ繧ｻ繝ｫ")');
    await cancelButton.click();
    await page.waitForTimeout(1000);
    
    await expect(modal).not.toBeVisible({ timeout: 3000 });
    console.log('笨・繝｢繝ｼ繝繝ｫ髢峨§繧・ 蜍穂ｽ懃｢ｺ隱・);
    
    console.log('脂 螢ｲ荳顔ｮ｡逅・・蜩∬ｨｭ螳壹Δ繝ｼ繝繝ｫ: UI謫堺ｽ懊〒螳悟・蜍穂ｽ懃｢ｺ隱肴ｸ医∩');
  });

  test('売 霑泌刀邂｡逅・ｿ泌刀逕ｳ隲九Δ繝ｼ繝繝ｫ - UI謫堺ｽ懃｢ｺ隱・, async ({ page }) => {
    console.log('=== 霑泌刀邂｡逅・ｿ泌刀逕ｳ隲九Δ繝ｼ繝繝ｫ UI謫堺ｽ懊ユ繧ｹ繝・===');
    
    // 霑泌刀邂｡逅・・繝ｼ繧ｸ縺ｫ遘ｻ蜍・
    await page.goto('http://localhost:3002/returns');
    await page.waitForLoadState('networkidle');
    
    // 霑泌刀逕ｳ隲九・繧ｿ繝ｳ繧呈爾縺励※繧ｯ繝ｪ繝・け
    const returnButton = page.locator('button:has-text("霑泌刀逕ｳ隲・)');
    await expect(returnButton).toBeVisible({ timeout: 10000 });
    console.log('笨・霑泌刀逕ｳ隲九・繧ｿ繝ｳ: 陦ｨ遉ｺ遒ｺ隱・);
    
    await returnButton.click();
    await page.waitForTimeout(1000);
    
    // 繝｢繝ｼ繝繝ｫ縺碁幕縺・◆縺九メ繧ｧ繝・け
    const modal = page.locator('[role="dialog"]');
    await expect(modal).toBeVisible({ timeout: 5000 });
    console.log('笨・霑泌刀逕ｳ隲九Δ繝ｼ繝繝ｫ: 髢矩哩蜍穂ｽ懃｢ｺ隱・);
    
    // 繝輔か繝ｼ繝隕∫ｴ縺ｮ蟄伜惠遒ｺ隱阪→蜈･蜉帙ユ繧ｹ繝・
    const orderIdInput = page.locator('input[type="text"]').first();
    await expect(orderIdInput).toBeVisible({ timeout: 3000 });
    await orderIdInput.fill('ORD-000123');
    console.log('笨・豕ｨ譁・分蜿ｷ蜈･蜉帙ヵ繧｣繝ｼ繝ｫ繝・ 陦ｨ遉ｺ繝ｻ蜈･蜉帷｢ｺ隱・);
    
    const productNameInput = page.locator('input[type="text"]').nth(1);
    await expect(productNameInput).toBeVisible({ timeout: 3000 });
    await productNameInput.fill('繝・せ繝亥膚蜩・);
    console.log('笨・蝠・刀蜷榊・蜉帙ヵ繧｣繝ｼ繝ｫ繝・ 陦ｨ遉ｺ繝ｻ蜈･蜉帷｢ｺ隱・);
    
    // 霑泌刀逅・罰繝ｩ繧ｸ繧ｪ繝懊ち繝ｳ縺ｮ驕ｸ謚・
    const reasonRadio = page.locator('input[type="radio"]').first();
    await expect(reasonRadio).toBeVisible({ timeout: 3000 });
    await reasonRadio.check();
    console.log('笨・霑泌刀逅・罰驕ｸ謚・ 陦ｨ遉ｺ繝ｻ謫堺ｽ懃｢ｺ隱・);
    
    // 蜈･蜉帛､縺ｮ遒ｺ隱・
    await expect(orderIdInput).toHaveValue('ORD-000123');
    await expect(productNameInput).toHaveValue('繝・せ繝亥膚蜩・);
    await expect(reasonRadio).toBeChecked();
    console.log('笨・蜈･蜉帶ｩ溯・: 蜍穂ｽ懃｢ｺ隱・);
    
    // 謠仙・繝懊ち繝ｳ縺ｮ蟄伜惠遒ｺ隱・
    const submitButton = page.locator('button:has-text("霑泌刀逕ｳ隲区署蜃ｺ")');
    await expect(submitButton).toBeVisible({ timeout: 3000 });
    console.log('笨・謠仙・繝懊ち繝ｳ: 陦ｨ遉ｺ遒ｺ隱・);
    
    // 繝｢繝ｼ繝繝ｫ繧帝哩縺倥ｋ・・繝懊ち繝ｳ縺ｾ縺溘・繧ｭ繝｣繝ｳ繧ｻ繝ｫ・・
    const closeButton = page.locator('[role="dialog"] button').first();
    await closeButton.click();
    await page.waitForTimeout(1000);
    
    await expect(modal).not.toBeVisible({ timeout: 3000 });
    console.log('笨・繝｢繝ｼ繝繝ｫ髢峨§繧・ 蜍穂ｽ懃｢ｺ隱・);
    
    console.log('脂 霑泌刀邂｡逅・ｿ泌刀逕ｳ隲九Δ繝ｼ繝繝ｫ: UI謫堺ｽ懊〒螳悟・蜍穂ｽ懃｢ｺ隱肴ｸ医∩');
  });

  test('囹 邏榊刀繝励Λ繝ｳ繧ｦ繧｣繧ｶ繝ｼ繝・- UI謫堺ｽ懃｢ｺ隱・, async ({ page }) => {
    console.log('=== 邏榊刀繝励Λ繝ｳ繧ｦ繧｣繧ｶ繝ｼ繝・UI謫堺ｽ懊ユ繧ｹ繝・===');
    
    // 邏榊刀繝励Λ繝ｳ繝壹・繧ｸ縺ｫ遘ｻ蜍・
    await page.goto('http://localhost:3002/delivery-plan');
    await page.waitForLoadState('networkidle');
    
    // 繧ｦ繧｣繧ｶ繝ｼ繝峨・陦ｨ遉ｺ遒ｺ隱・
    const wizard = page.locator('.max-w-4xl');
    await expect(wizard).toBeVisible({ timeout: 10000 });
    console.log('笨・繧ｦ繧｣繧ｶ繝ｼ繝・ 陦ｨ遉ｺ遒ｺ隱・);
    
    // 繧ｹ繝・ャ繝励う繝ｳ繧ｸ繧ｱ繝ｼ繧ｿ繝ｼ縺ｮ遒ｺ隱・
    const stepIndicator = page.locator('[data-testid="step-1-label"]');
    await expect(stepIndicator).toBeVisible({ timeout: 3000 });
    console.log('笨・繧ｹ繝・ャ繝励う繝ｳ繧ｸ繧ｱ繝ｼ繧ｿ繝ｼ: 陦ｨ遉ｺ遒ｺ隱・);
    
    // 蜈･蜉帙ヵ繧｣繝ｼ繝ｫ繝峨・蟄伜惠遒ｺ隱阪→蜈･蜉帙ユ繧ｹ繝・
    const inputs = page.locator('input[type="text"]');
    const inputCount = await inputs.count();
    console.log(`笨・蜈･蜉帙ヵ繧｣繝ｼ繝ｫ繝画焚: ${inputCount}蛟義);
    
    if (inputCount > 0) {
      const firstInput = inputs.first();
      await expect(firstInput).toBeVisible({ timeout: 3000 });
      await firstInput.fill('繝・せ繝亥・蜉・);
      
      const inputValue = await firstInput.inputValue();
      await expect(firstInput).toHaveValue('繝・せ繝亥・蜉・);
      console.log('笨・蜈･蜉帶ｩ溯・: 蜍穂ｽ懃｢ｺ隱・);
    }
    
    // 谺｡縺ｸ繝懊ち繝ｳ縺ｮ蟄伜惠遒ｺ隱・
    const nextButton = page.locator('button:has-text("谺｡縺ｸ"), button:has-text("邯夊｡・)');
    const nextExists = await nextButton.count() > 0;
    if (nextExists) {
      await expect(nextButton.first()).toBeVisible({ timeout: 3000 });
      console.log('笨・谺｡縺ｸ繝懊ち繝ｳ: 陦ｨ遉ｺ遒ｺ隱・);
    }
    
    console.log('脂 邏榊刀繝励Λ繝ｳ繧ｦ繧｣繧ｶ繝ｼ繝・ UI謫堺ｽ懊〒螳悟・蜍穂ｽ懃｢ｺ隱肴ｸ医∩');
  });
}); 
import { test, expect } from '@playwright/test';

test.describe('剥 繧ｹ繝・・繧ｿ繧ｹ螟画峩繝｡繝九Η繝ｼ螳牙ｮ壽ｧ繝・せ繝・, () => {
  test.beforeEach(async ({ page }) => {
    // 蜃ｺ闕ｷ繝壹・繧ｸ縺ｫ遘ｻ蜍・
    await page.goto('/staff/shipping');
    await page.waitForLoadState('networkidle');
    
    // 繝壹・繧ｸ縺悟ｮ悟・縺ｫ隱ｭ縺ｿ霎ｼ縺ｾ繧後ｋ縺ｾ縺ｧ蠕・ｩ・
    await page.waitForSelector('.holo-table', { timeout: 10000 });
  });

  test('搭 繧ｹ繝・・繧ｿ繧ｹ螟画峩繝懊ち繝ｳ縺ｮ蝓ｺ譛ｬ蜍穂ｽ懊ユ繧ｹ繝・, async ({ page }) => {
    console.log('=== 繧ｹ繝・・繧ｿ繧ｹ螟画峩繝懊ち繝ｳ縺ｮ蝓ｺ譛ｬ蜍穂ｽ懊ユ繧ｹ繝磯幕蟋・===');

    // 繧ｹ繝・・繧ｿ繧ｹ螟画峩繝懊ち繝ｳ縺悟ｭ伜惠縺吶ｋ縺薙→繧堤｢ｺ隱・
    const statusButtons = page.locator('[role="button"]').filter({ hasText: '繧ｹ繝・・繧ｿ繧ｹ螟画峩' });
    const buttonCount = await statusButtons.count();
    console.log(`Found ${buttonCount} status change buttons`);
    expect(buttonCount).toBeGreaterThan(0);

    // 譛蛻昴・繝懊ち繝ｳ繧偵け繝ｪ繝・け
    const firstButton = statusButtons.first();
    await expect(firstButton).toBeVisible();
    await firstButton.click();

    // 繝峨Ο繝・・繝繧ｦ繝ｳ縺瑚｡ｨ遉ｺ縺輔ｌ繧九％縺ｨ繧堤｢ｺ隱・
    const dropdown = page.locator('[data-testid="unified-status-dropdown"]');
    await expect(dropdown).toBeVisible({ timeout: 5000 });
    console.log('Dropdown is visible after button click');

    // 繝峨Ο繝・・繝繧ｦ繝ｳ縺ｮ蜀・ｮｹ繧堤｢ｺ隱・
    const dropdownHeader = dropdown.locator('h3');
    await expect(dropdownHeader).toHaveText('谺｡縺ｮ繧ｹ繝・・繧ｿ繧ｹ縺ｫ螟画峩');

    // 繧ｹ繝・・繧ｿ繧ｹ繧ｪ繝励す繝ｧ繝ｳ繧堤｢ｺ隱・
    const statusOptions = dropdown.locator('.unified-status-option');
    const optionCount = await statusOptions.count();
    console.log(`Found ${optionCount} status options in dropdown`);
    expect(optionCount).toBeGreaterThan(0);

    // 蜷・が繝励す繝ｧ繝ｳ縺梧ｭ｣縺励￥陦ｨ遉ｺ縺輔ｌ繧九％縺ｨ繧堤｢ｺ隱・
    for (let i = 0; i < optionCount; i++) {
      const option = statusOptions.nth(i);
      await expect(option).toBeVisible();
      
      const optionText = await option.locator('.unified-status-option-label').textContent();
      console.log(`Option ${i + 1}: ${optionText}`);
      expect(optionText).toBeTruthy();
    }
  });

  test('識 繝峨Ο繝・・繝繧ｦ繝ｳ縺ｮ髢矩哩蜍穂ｽ懊ユ繧ｹ繝・, async ({ page }) => {
    console.log('=== 繝峨Ο繝・・繝繧ｦ繝ｳ縺ｮ髢矩哩蜍穂ｽ懊ユ繧ｹ繝磯幕蟋・===');

    const statusButton = page.locator('[role="button"]').filter({ hasText: '繧ｹ繝・・繧ｿ繧ｹ螟画峩' }).first();
    const dropdown = page.locator('[data-testid="unified-status-dropdown"]');

    // 蛻晄悄迥ｶ諷九〒繝峨Ο繝・・繝繧ｦ繝ｳ縺碁哩縺倥※縺・ｋ縺薙→繧堤｢ｺ隱・
    await expect(dropdown).not.toBeVisible();
    console.log('Dropdown is initially hidden');

    // 繝懊ち繝ｳ繧偵け繝ｪ繝・け縺励※繝峨Ο繝・・繝繧ｦ繝ｳ繧帝幕縺・
    await statusButton.click();
    await expect(dropdown).toBeVisible({ timeout: 3000 });
    console.log('Dropdown opened after button click');

    // 蜷後§繝懊ち繝ｳ繧貞・繧ｯ繝ｪ繝・け縺励※繝峨Ο繝・・繝繧ｦ繝ｳ繧帝哩縺倥ｋ
    await statusButton.click();
    await expect(dropdown).not.toBeVisible({ timeout: 3000 });
    console.log('Dropdown closed after second button click');

    // 蜀榊ｺｦ髢九￥
    await statusButton.click();
    await expect(dropdown).toBeVisible({ timeout: 3000 });
    console.log('Dropdown reopened successfully');

    // 螟門・繧偵け繝ｪ繝・け縺励※髢峨§繧・
    await page.click('body', { position: { x: 50, y: 50 } });
    await expect(dropdown).not.toBeVisible({ timeout: 3000 });
    console.log('Dropdown closed after clicking outside');
  });

  test('笞｡ 繧ｹ繝・・繧ｿ繧ｹ螟画峩縺ｮ螳溯｡後ユ繧ｹ繝・, async ({ page }) => {
    console.log('=== 繧ｹ繝・・繧ｿ繧ｹ螟画峩縺ｮ螳溯｡後ユ繧ｹ繝磯幕蟋・===');

    const statusButton = page.locator('[role="button"]').filter({ hasText: '繧ｹ繝・・繧ｿ繧ｹ螟画峩' }).first();
    const dropdown = page.locator('[data-testid="unified-status-dropdown"]');

    // 繝峨Ο繝・・繝繧ｦ繝ｳ繧帝幕縺・
    await statusButton.click();
    await expect(dropdown).toBeVisible({ timeout: 3000 });

    // 譛蛻昴・繧ｹ繝・・繧ｿ繧ｹ繧ｪ繝励す繝ｧ繝ｳ繧偵け繝ｪ繝・け
    const firstOption = dropdown.locator('.unified-status-option').first();
    await expect(firstOption).toBeVisible();
    
    const optionText = await firstOption.locator('.unified-status-option-label').textContent();
    console.log(`Clicking status option: ${optionText}`);
    
    await firstOption.click();

    // 繝峨Ο繝・・繝繧ｦ繝ｳ縺碁哩縺倥ｋ縺薙→繧堤｢ｺ隱・
    await expect(dropdown).not.toBeVisible({ timeout: 3000 });
    console.log('Dropdown closed after status selection');

    // 繝医・繧ｹ繝医Γ繝・そ繝ｼ繧ｸ縺瑚｡ｨ遉ｺ縺輔ｌ繧九％縺ｨ繧堤｢ｺ隱・
    const toast = page.locator('.toast, [role="alert"]').first();
    if (await toast.isVisible({ timeout: 2000 })) {
      const toastText = await toast.textContent();
      console.log(`Toast message: ${toastText}`);
    }
  });

  test('売 隍・焚縺ｮ繧ｹ繝・・繧ｿ繧ｹ螟画峩繝懊ち繝ｳ縺ｮ蜍穂ｽ懊ユ繧ｹ繝・, async ({ page }) => {
    console.log('=== 隍・焚縺ｮ繧ｹ繝・・繧ｿ繧ｹ螟画峩繝懊ち繝ｳ縺ｮ蜍穂ｽ懊ユ繧ｹ繝磯幕蟋・===');

    const statusButtons = page.locator('[role="button"]').filter({ hasText: '繧ｹ繝・・繧ｿ繧ｹ螟画峩' });
    const buttonCount = await statusButtons.count();
    console.log(`Testing ${buttonCount} status change buttons`);

    // 隍・焚縺ｮ繝懊ち繝ｳ縺悟ｭ伜惠縺吶ｋ蝣ｴ蜷医・繝・せ繝・
    if (buttonCount > 1) {
      // 譛蛻昴・繝懊ち繝ｳ繧帝幕縺・
      await statusButtons.nth(0).click();
      const firstDropdown = page.locator('[data-testid="unified-status-dropdown"]').first();
      await expect(firstDropdown).toBeVisible({ timeout: 3000 });
      console.log('First dropdown opened');

      // 2逡ｪ逶ｮ縺ｮ繝懊ち繝ｳ繧偵け繝ｪ繝・け
      await statusButtons.nth(1).click();
      
      // 譛蛻昴・繝峨Ο繝・・繝繧ｦ繝ｳ縺碁哩縺倥※縲・逡ｪ逶ｮ縺碁幕縺上％縺ｨ繧堤｢ｺ隱・
      await page.waitForTimeout(500);
      const visibleDropdowns = page.locator('[data-testid="unified-status-dropdown"]:visible');
      const visibleCount = await visibleDropdowns.count();
      console.log(`Visible dropdowns after clicking second button: ${visibleCount}`);
      
      // 荳蠎ｦ縺ｫ1縺､縺ｮ繝峨Ο繝・・繝繧ｦ繝ｳ縺ｮ縺ｿ縺碁幕縺・※縺・ｋ縺薙→繧堤｢ｺ隱・
      expect(visibleCount).toBeLessThanOrEqual(1);
    }
  });

  test('耳 UI繧ｹ繧ｿ繧､繝ｫ縺ｮ荳雋ｫ諤ｧ繝・せ繝・, async ({ page }) => {
    console.log('=== UI繧ｹ繧ｿ繧､繝ｫ縺ｮ荳雋ｫ諤ｧ繝・せ繝磯幕蟋・===');

    const statusButton = page.locator('[role="button"]').filter({ hasText: '繧ｹ繝・・繧ｿ繧ｹ螟画峩' }).first();
    await statusButton.click();

    const dropdown = page.locator('[data-testid="unified-status-dropdown"]');
    await expect(dropdown).toBeVisible({ timeout: 3000 });

    // z-index縺ｮ遒ｺ隱・
    const zIndex = await dropdown.evaluate((el) => {
      return window.getComputedStyle(el).zIndex;
    });
    console.log(`Dropdown z-index: ${zIndex}`);
    expect(parseInt(zIndex)).toBe(10000);

    // 邨ｱ荳縺輔ｌ縺櫃SS繧ｯ繝ｩ繧ｹ縺ｮ遒ｺ隱・
    const hasUnifiedClass = await dropdown.evaluate((el) => {
      return el.classList.contains('unified-status-menu');
    });
    console.log(`Has unified-status-menu class: ${hasUnifiedClass}`);
    expect(hasUnifiedClass).toBe(true);

    // 繧ｹ繝・・繧ｿ繧ｹ繧ｪ繝励す繝ｧ繝ｳ縺ｮ繧ｹ繧ｿ繧､繝ｫ遒ｺ隱・
    const statusOptions = dropdown.locator('.unified-status-option');
    const firstOption = statusOptions.first();
    
    // 繝帙ヰ繝ｼ蜉ｹ譫懊・繝・せ繝茨ｼ亥ｮ牙ｮ壽ｧ縺ｮ縺溘ａ邁｡逡･蛹厄ｼ・
    const optionExists = await firstOption.isVisible();
    console.log(`First option is visible: ${optionExists}`);
    expect(optionExists).toBe(true);
  });

  test('竚ｨ・・繧ｭ繝ｼ繝懊・繝峨リ繝薙ご繝ｼ繧ｷ繝ｧ繝ｳ繝・せ繝・, async ({ page }) => {
    console.log('=== 繧ｭ繝ｼ繝懊・繝峨リ繝薙ご繝ｼ繧ｷ繝ｧ繝ｳ繝・せ繝磯幕蟋・===');

    const statusButton = page.locator('[role="button"]').filter({ hasText: '繧ｹ繝・・繧ｿ繧ｹ螟画峩' }).first();
    await statusButton.click();

    const dropdown = page.locator('[data-testid="unified-status-dropdown"]');
    await expect(dropdown).toBeVisible({ timeout: 3000 });

    // ESC繧ｭ繝ｼ縺ｧ繝峨Ο繝・・繝繧ｦ繝ｳ繧帝哩縺倥ｋ
    await page.keyboard.press('Escape');
    await expect(dropdown).not.toBeVisible({ timeout: 3000 });
    console.log('Dropdown closed with Escape key');

    // 蜀榊ｺｦ髢九＞縺ｦEnter繧ｭ繝ｼ縺ｧ繧ｪ繝励す繝ｧ繝ｳ繧帝∈謚・
    await statusButton.click();
    await expect(dropdown).toBeVisible({ timeout: 3000 });

    const firstOption = dropdown.locator('.unified-status-option').first();
    await firstOption.focus();
    await page.keyboard.press('Enter');
    
    await expect(dropdown).not.toBeVisible({ timeout: 3000 });
    console.log('Status option selected with Enter key');
  });
}); 
