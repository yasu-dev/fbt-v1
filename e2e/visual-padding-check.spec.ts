import { test, expect } from '@playwright/test';

test.describe('üëÅÔ∏è Ë¶ñË¶öÁöÑ„Éë„Éá„Ç£„É≥„Ç∞Á¢∫Ë™ç', () => {
  
  test.beforeEach(async ({ page }) => {
    await page.goto('/login');
    await page.fill('input[type="email"]', 'test@example.com');
    await page.fill('input[type="password"]', 'password');
    await page.click('button[type="submit"]');
    await page.goto('/staff/returns');
    await page.waitForLoadState('networkidle');
  });

  test('üì∏ ÂêÑ„Çø„Éñ„ÅÆË¶ã„ÅüÁõÆÊØîËºÉ', async ({ page }) => {
    // ÂêÑ„Çø„Éñ„ÅÆ„Çπ„ÇØ„É™„Éº„É≥„Ç∑„Éß„ÉÉ„Éà„ÇíÊíÆÂΩ±
    const tabs = [
      { name: 'ËøîÂìÅÊ§úÂìÅ', filename: 'inspection-visual' },
      { name: 'ÂÜçÂá∫ÂìÅÊ•≠Âãô„Éï„É≠„Éº', filename: 'relisting-visual' },
      { name: 'ËøîÂìÅÁêÜÁî±ÂàÜÊûê', filename: 'analysis-visual' }
    ];
    
    for (const tab of tabs) {
      await page.click(`button:has-text("${tab.name}")`);
      await page.waitForTimeout(1000);
      
      // „Éï„É´„Éö„Éº„Ç∏„Çπ„ÇØ„É™„Éº„É≥„Ç∑„Éß„ÉÉ„Éà
      await page.screenshot({ 
        path: `test-results/${tab.filename}.png`,
        fullPage: true 
      });
      
      console.log(`üì∏ ${tab.name} „Çπ„ÇØ„É™„Éº„É≥„Ç∑„Éß„ÉÉ„Éà‰øùÂ≠òÂÆå‰∫Ü`);
    }
  });

  test('üî¥ „Éë„Éá„Ç£„É≥„Ç∞Ëµ§Ëâ≤„Éè„Ç§„É©„Ç§„ÉàÊØîËºÉ', async ({ page }) => {
    const tabs = [
      { name: 'ËøîÂìÅÊ§úÂìÅ', filename: 'inspection-highlighted' },
      { name: 'ÂÜçÂá∫ÂìÅÊ•≠Âãô„Éï„É≠„Éº', filename: 'relisting-highlighted' },
      { name: 'ËøîÂìÅÁêÜÁî±ÂàÜÊûê', filename: 'analysis-highlighted' }
    ];
    
    for (const tab of tabs) {
      await page.click(`button:has-text("${tab.name}")`);
      await page.waitForTimeout(500);
      
      // Ëµ§Ëâ≤„Éè„Ç§„É©„Ç§„Éà„ÇíËøΩÂä†Ôºà„Éë„Éá„Ç£„É≥„Ç∞ÈÉ®ÂàÜ„ÇíÂèØË¶ñÂåñÔºâ
      await page.evaluate(() => {
        // „É°„Ç§„É≥„Ç≥„É≥„ÉÜ„É≥„ÉÑ„Ç≥„É≥„ÉÜ„Éä„ÇíÂèñÂæó
        const containers = document.querySelectorAll('#main-content .p-8, .p-8, [class*="p-8"]');
        
        containers.forEach((container, index) => {
          const el = container as HTMLElement;
          if (el) {
            // Êó¢Â≠ò„ÅÆËÉåÊôØ„Çí‰øùÂ≠ò
            const originalBg = el.style.background;
            // „Éë„Éá„Ç£„É≥„Ç∞ÈÉ®ÂàÜ„ÇíËµ§Ëâ≤„Åß„Éè„Ç§„É©„Ç§„Éà
            el.style.background = `
              linear-gradient(90deg, 
                red 0px, red 32px, 
                ${originalBg || 'transparent'} 32px, 
                ${originalBg || 'transparent'} calc(100% - 32px), 
                red calc(100% - 32px), red 100%
              )
            `;
            el.style.backgroundClip = 'content-box, padding-box';
            el.style.minHeight = '300px';
          }
        });
        
        // ËøΩÂä†„Åß„Ç¢„Ç¶„Éà„É©„Ç§„É≥„ÇÇË°®Á§∫
        document.querySelectorAll('.intelligence-card').forEach(card => {
          const el = card as HTMLElement;
          el.style.outline = '2px solid blue';
          el.style.outlineOffset = '2px';
        });
      });
      
      await page.waitForTimeout(500);
      
      await page.screenshot({ 
        path: `test-results/${tab.filename}.png`,
        fullPage: true 
      });
      
      console.log(`üî¥ ${tab.name} „Éè„Ç§„É©„Ç§„ÉàË°®Á§∫ÂÆå‰∫Ü`);
    }
  });

  test('üìê ÂÆüÈöõ„ÅÆ„É¨„Ç§„Ç¢„Ç¶„ÉàÂØ∏Ê≥ïÁ¢∫Ë™ç', async ({ page }) => {
    const tabs = ['ËøîÂìÅÊ§úÂìÅ', 'ÂÜçÂá∫ÂìÅÊ•≠Âãô„Éï„É≠„Éº', 'ËøîÂìÅÁêÜÁî±ÂàÜÊûê'];
    
    for (const tab of tabs) {
      await page.click(`button:has-text("${tab}")`);
      await page.waitForTimeout(500);
      
      const measurements = await page.evaluate(() => {
        // Ë§áÊï∞„ÅÆË¶ÅÁ¥†„ÇíË™øÊüª
        const mainContent = document.querySelector('#main-content .page-scroll-container > div');
        const intelligenceCards = document.querySelectorAll('.intelligence-card');
        const spaceY6 = document.querySelectorAll('.space-y-6');
        
        const getElementInfo = (element: Element | null) => {
          if (!element) return null;
          const rect = element.getBoundingClientRect();
          const computed = window.getComputedStyle(element);
          return {
            width: rect.width,
            left: rect.left,
            right: rect.right,
            paddingLeft: computed.paddingLeft,
            paddingRight: computed.paddingRight,
            marginLeft: computed.marginLeft,
            marginRight: computed.marginRight,
            className: element.className
          };
        };
        
        return {
          mainContent: getElementInfo(mainContent),
          firstCard: getElementInfo(intelligenceCards[0]),
          spaceY6Count: spaceY6.length,
          cardCount: intelligenceCards.length,
          viewportWidth: window.innerWidth
        };
      });
      
      console.log(`üìê ${tab}:`, measurements);
    }
  });
}); 